
BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f0c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080061c0  080061c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061c0  080061c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  20000084  0800624c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  0800624c  00021a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001119d  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bd  00000000  00000000  0003124a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00034b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003609  00000000  00000000  00035998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011319  00000000  00000000  00038fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e60a  00000000  00000000  0004a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d88c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000d8914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006004 	.word	0x08006004

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006004 	.word	0x08006004

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd20 	bl	8000bdc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd17 	bl	8000bdc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000a3 	.word	0x200000a3
 8000240:	200000a4 	.word	0x200000a4
 8000244:	200000a0 	.word	0x200000a0
 8000248:	200000a1 	.word	0x200000a1
 800024c:	200000a2 	.word	0x200000a2
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	0800601c 	.word	0x0800601c
 80002e4:	200000a3 	.word	0x200000a3

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000a1 	.word	0x200000a1

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 ffc4 	bl	80013dc <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000a4 	.word	0x200000a4
 8000460:	200000a8 	.word	0x200000a8

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 faea 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f85c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8c4 	bl	80006d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f894 	bl	8000678 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
    HD44780_PrintStr("BTN don't push");
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0x88>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fe44 	bl	80021f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <main+0x8c>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ff7d 	bl	8002470 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <main+0x90>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <main+0x94>)
 800057e:	2100      	movs	r1, #0
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0x98>)
 8000582:	f001 fe9d 	bl	80022c0 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <main+0x9c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <main+0xa0>)
 800058e:	2100      	movs	r1, #0
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0xa4>)
 8000592:	f001 fe95 	bl	80022c0 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <main+0xa8>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <main+0xac>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0xb0>)
 80005a2:	f001 fe8d 	bl	80022c0 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0xb4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTask, NULL, &holdLED_attributes);
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0xb8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <main+0xbc>)
 80005b2:	f001 fe85 	bl	80022c0 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <main+0xc0>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f001 fe4c 	bl	8002258 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x84>
 80005c2:	bf00      	nop
 80005c4:	08006060 	.word	0x08006060
 80005c8:	08006164 	.word	0x08006164
 80005cc:	20000100 	.word	0x20000100
 80005d0:	080060d4 	.word	0x080060d4
 80005d4:	08000771 	.word	0x08000771
 80005d8:	200000fc 	.word	0x200000fc
 80005dc:	080060f8 	.word	0x080060f8
 80005e0:	08000781 	.word	0x08000781
 80005e4:	20000104 	.word	0x20000104
 80005e8:	0800611c 	.word	0x0800611c
 80005ec:	080007e5 	.word	0x080007e5
 80005f0:	20000108 	.word	0x20000108
 80005f4:	08006140 	.word	0x08006140
 80005f8:	08000861 	.word	0x08000861
 80005fc:	2000010c 	.word	0x2000010c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	; 0x40
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2228      	movs	r2, #40	; 0x28
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f884 	bl	800571c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f9d6 	bl	80019e8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000642:	f000 f967 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fc44 	bl	8001eec <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066a:	f000 f953 	bl	8000914 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3740      	adds	r7, #64	; 0x40
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 fd4d 	bl	8001154 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f928 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_GPIO_Init+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x90>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0x94>)
 8000720:	f000 fcff 	bl	8001122 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <MX_GPIO_Init+0x94>)
 800073e:	f000 fb55 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_GPIO_Init+0x98>)
 8000758:	f000 fb48 	bl	8000dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40011000 	.word	0x40011000
 800076c:	40010c00 	.word	0x40010c00

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f001 fe4b 	bl	8002414 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0x8>

08000780 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint8_t last_state = GPIO_PIN_RESET; // предполагаем, что кнопка не нажата
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {


        uint8_t current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800078c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000790:	4810      	ldr	r0, [pc, #64]	; (80007d4 <buttonTask+0x54>)
 8000792:	f000 fcaf 	bl	80010f4 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	73bb      	strb	r3, [r7, #14]
        HD44780_SetCursor(1,3);
 800079a:	2103      	movs	r1, #3
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff fd71 	bl	8000284 <HD44780_SetCursor>

           	 if(current_state == 1){
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d103      	bne.n	80007b0 <buttonTask+0x30>

           		HD44780_PrintStr("0");
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <buttonTask+0x58>)
 80007aa:	f7ff fddc 	bl	8000366 <HD44780_PrintStr>
 80007ae:	e002      	b.n	80007b6 <buttonTask+0x36>


           	 }else {

           		HD44780_PrintStr("1");
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <buttonTask+0x5c>)
 80007b2:	f7ff fdd8 	bl	8000366 <HD44780_PrintStr>

           	 }



        if(current_state == RESET)
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <buttonTask+0x4a>
        {
            last_state = current_state;
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	73fb      	strb	r3, [r7, #15]
            osSemaphoreRelease(buttonSemaphoreHandle); // сигнал об изменении состояния
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <buttonTask+0x60>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ff55 	bl	8002674 <osSemaphoreRelease>



        }
        osDelay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f001 fe22 	bl	8002414 <osDelay>
    {
 80007d0:	e7dc      	b.n	800078c <buttonTask+0xc>
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	08006070 	.word	0x08006070
 80007dc:	08006074 	.word	0x08006074
 80007e0:	20000100 	.word	0x20000100

080007e4 <ledTask>:
    }
}

void ledTask(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <ledTask+0x70>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fed6 	bl	80025a8 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <ledTask+0x74>)
 8000802:	f000 fc77 	bl	80010f4 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	73bb      	strb	r3, [r7, #14]

        if(button_state == GPIO_PIN_RESET)
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10c      	bne.n	800082a <ledTask+0x46>
        {
            // Кнопка нажата — светодиод горит постоянно
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <ledTask+0x78>)
 8000818:	f000 fc83 	bl	8001122 <HAL_GPIO_WritePin>
            led_on = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]

            osDelay(5000);
 8000820:	f241 3088 	movw	r0, #5000	; 0x1388
 8000824:	f001 fdf6 	bl	8002414 <osDelay>
 8000828:	e7e2      	b.n	80007f0 <ledTask+0xc>
        }
        else
        {
            led_on = !led_on;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (led_on) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	461a      	mov	r2, r3
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <ledTask+0x78>)
 800084c:	f000 fc69 	bl	8001122 <HAL_GPIO_WritePin>
    {
 8000850:	e7ce      	b.n	80007f0 <ledTask+0xc>
 8000852:	bf00      	nop
 8000854:	20000100 	.word	0x20000100
 8000858:	40010c00 	.word	0x40010c00
 800085c:	40011000 	.word	0x40011000

08000860 <lcdTask>:
        }
    }
}

void lcdTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    uint8_t prev_state = 0xFF;
 8000868:	23ff      	movs	r3, #255	; 0xff
 800086a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <lcdTask+0xa4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f04f 31ff 	mov.w	r1, #4294967295
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fe96 	bl	80025a8 <osSemaphoreAcquire>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d13c      	bne.n	80008fc <lcdTask+0x9c>
        {
           // получили сигнал об изменении, читаем актуальное состояние кнопки

        	int time = 5;
 8000882:	2305      	movs	r3, #5
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
        	        	char buffer[20];

        	        	HD44780_Clear();
 8000886:	f7ff fce7 	bl	8000258 <HD44780_Clear>
        	        	HD44780_PrintStr("door will be");
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <lcdTask+0xa8>)
 800088c:	f7ff fd6b 	bl	8000366 <HD44780_PrintStr>
        	        	HD44780_SetCursor(0,1);
 8000890:	2101      	movs	r1, #1
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fcf6 	bl	8000284 <HD44780_SetCursor>

        	        	for (; time > 0; time--) {
 8000898:	e01f      	b.n	80008da <lcdTask+0x7a>
        	            	HD44780_Clear();
 800089a:	f7ff fcdd 	bl	8000258 <HD44780_Clear>
        	                HD44780_SetCursor(0,0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fcef 	bl	8000284 <HD44780_SetCursor>
        	            	HD44780_PrintStr("door will be");
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <lcdTask+0xa8>)
 80008a8:	f7ff fd5d 	bl	8000366 <HD44780_PrintStr>
        	            	HD44780_SetCursor(0,1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fce8 	bl	8000284 <HD44780_SetCursor>
        	                sprintf(buffer, "close in: %d", time);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ba:	4914      	ldr	r1, [pc, #80]	; (800090c <lcdTask+0xac>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 ff35 	bl	800572c <siprintf>
        	                HD44780_PrintStr(buffer);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fd4d 	bl	8000366 <HD44780_PrintStr>
                            osDelay(900);
 80008cc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80008d0:	f001 fda0 	bl	8002414 <osDelay>
        	        	for (; time > 0; time--) {
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	3b01      	subs	r3, #1
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dcdc      	bgt.n	800089a <lcdTask+0x3a>
        	        	}



        	            osSemaphoreRelease(buttonSemaphoreHandle);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <lcdTask+0xa4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fec5 	bl	8002674 <osSemaphoreRelease>


        	            HD44780_Clear();
 80008ea:	f7ff fcb5 	bl	8000258 <HD44780_Clear>
        	            HD44780_SetCursor(0,0);
 80008ee:	2100      	movs	r1, #0
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fcc7 	bl	8000284 <HD44780_SetCursor>
        	            HD44780_PrintStr("BTN dont't press");
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <lcdTask+0xb0>)
 80008f8:	f7ff fd35 	bl	8000366 <HD44780_PrintStr>



        }

        osDelay(50);
 80008fc:	2032      	movs	r0, #50	; 0x32
 80008fe:	f001 fd89 	bl	8002414 <osDelay>
        if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 8000902:	e7b4      	b.n	800086e <lcdTask+0xe>
 8000904:	20000100 	.word	0x20000100
 8000908:	08006078 	.word	0x08006078
 800090c:	08006088 	.word	0x08006088
 8000910:	08006098 	.word	0x08006098

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_MspInit+0x4c>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_MspInit+0x4c>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x4c>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fa1c 	bl	8000d9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <HAL_I2C_MspInit+0x90>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d132      	bne.n	80009f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	2312      	movs	r3, #18
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <HAL_I2C_MspInit+0x98>)
 80009be:	f000 fa15 	bl	8000dec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_I2C_MspInit+0x9c>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <HAL_I2C_MspInit+0x9c>)
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_I2C_MspInit+0x94>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	40010000 	.word	0x40010000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f8b1 	bl	8000ba4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a42:	f003 fd73 	bl	800452c <xTaskGetSchedulerState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d001      	beq.n	8000a50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a4c:	f004 fbd4 	bl	80051f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f004 fe12 	bl	80056ac <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20005000 	.word	0x20005000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000110 	.word	0x20000110
 8000abc:	20001a70 	.word	0x20001a70

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f7ff ffe5 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 fddf 	bl	80056b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fd1f 	bl	800053c <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b08:	080061c8 	.word	0x080061c8
  ldr r2, =_sbss
 8000b0c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b10:	20001a70 	.word	0x20001a70

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f92b 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fef4 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f935 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f90b 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	20000014 	.word	0x20000014

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000018 	.word	0x20000018
 8000bc4:	20000114 	.word	0x20000114

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000114 	.word	0x20000114

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000018 	.word	0x20000018

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff90 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff49 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff5e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffb0 	bl	8000d40 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	e169      	b.n	80010d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e00:	2201      	movs	r2, #1
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8158 	bne.w	80010ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4a9a      	ldr	r2, [pc, #616]	; (800108c <HAL_GPIO_Init+0x2a0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d05e      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a98      	ldr	r2, [pc, #608]	; (800108c <HAL_GPIO_Init+0x2a0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d875      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e2e:	4a98      	ldr	r2, [pc, #608]	; (8001090 <HAL_GPIO_Init+0x2a4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d058      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e34:	4a96      	ldr	r2, [pc, #600]	; (8001090 <HAL_GPIO_Init+0x2a4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d86f      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e3a:	4a96      	ldr	r2, [pc, #600]	; (8001094 <HAL_GPIO_Init+0x2a8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d052      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e40:	4a94      	ldr	r2, [pc, #592]	; (8001094 <HAL_GPIO_Init+0x2a8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d869      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e46:	4a94      	ldr	r2, [pc, #592]	; (8001098 <HAL_GPIO_Init+0x2ac>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d04c      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e4c:	4a92      	ldr	r2, [pc, #584]	; (8001098 <HAL_GPIO_Init+0x2ac>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d863      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e52:	4a92      	ldr	r2, [pc, #584]	; (800109c <HAL_GPIO_Init+0x2b0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d046      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e58:	4a90      	ldr	r2, [pc, #576]	; (800109c <HAL_GPIO_Init+0x2b0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d85d      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d82a      	bhi.n	8000eb8 <HAL_GPIO_Init+0xcc>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d859      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <HAL_GPIO_Init+0x80>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ec1 	.word	0x08000ec1
 8000e74:	08000ed3 	.word	0x08000ed3
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f1b 	.word	0x08000f1b
 8000e80:	08000f1b 	.word	0x08000f1b
 8000e84:	08000f1b 	.word	0x08000f1b
 8000e88:	08000f1b 	.word	0x08000f1b
 8000e8c:	08000f1b 	.word	0x08000f1b
 8000e90:	08000f1b 	.word	0x08000f1b
 8000e94:	08000f1b 	.word	0x08000f1b
 8000e98:	08000f1b 	.word	0x08000f1b
 8000e9c:	08000f1b 	.word	0x08000f1b
 8000ea0:	08000f1b 	.word	0x08000f1b
 8000ea4:	08000f1b 	.word	0x08000f1b
 8000ea8:	08000f1b 	.word	0x08000f1b
 8000eac:	08000f1b 	.word	0x08000f1b
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <HAL_GPIO_Init+0x2b4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ebe:	e02c      	b.n	8000f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e029      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e024      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e01f      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e01a      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e013      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000efc:	2308      	movs	r3, #8
 8000efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	611a      	str	r2, [r3, #16]
          break;
 8000f06:	e009      	b.n	8000f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	615a      	str	r2, [r3, #20]
          break;
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          break;
 8000f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d801      	bhi.n	8000f26 <HAL_GPIO_Init+0x13a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_Init+0x13e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2bff      	cmp	r3, #255	; 0xff
 8000f30:	d802      	bhi.n	8000f38 <HAL_GPIO_Init+0x14c>
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x152>
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3b08      	subs	r3, #8
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	210f      	movs	r1, #15
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	401a      	ands	r2, r3
 8000f50:	6a39      	ldr	r1, [r7, #32]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80b1 	beq.w	80010ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a40      	ldr	r2, [pc, #256]	; (80010ac <HAL_GPIO_Init+0x2c0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1ec>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1e8>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3e      	ldr	r2, [pc, #248]	; (80010b4 <HAL_GPIO_Init+0x2c8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fea:	492f      	ldr	r1, [pc, #188]	; (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	492c      	ldr	r1, [pc, #176]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	43db      	mvns	r3, r3
 800101a:	4928      	ldr	r1, [pc, #160]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800101c:	4013      	ands	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4922      	ldr	r1, [pc, #136]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	491e      	ldr	r1, [pc, #120]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4918      	ldr	r1, [pc, #96]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	4914      	ldr	r1, [pc, #80]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d021      	beq.n	80010c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	490e      	ldr	r1, [pc, #56]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	60cb      	str	r3, [r1, #12]
 8001088:	e021      	b.n	80010ce <HAL_GPIO_Init+0x2e2>
 800108a:	bf00      	nop
 800108c:	10320000 	.word	0x10320000
 8001090:	10310000 	.word	0x10310000
 8001094:	10220000 	.word	0x10220000
 8001098:	10210000 	.word	0x10210000
 800109c:	10120000 	.word	0x10120000
 80010a0:	10110000 	.word	0x10110000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40010800 	.word	0x40010800
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40011400 	.word	0x40011400
 80010bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	3301      	adds	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	fa22 f303 	lsr.w	r3, r2, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f47f ae8e 	bne.w	8000e00 <HAL_GPIO_Init+0x14>
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	372c      	adds	r7, #44	; 0x2c
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001132:	787b      	ldrb	r3, [r7, #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800113e:	e003      	b.n	8001148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
	...

08001154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e12b      	b.n	80013be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fbf8 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2224      	movs	r2, #36	; 0x24
 8001184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011b8:	f000 ffea 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a81      	ldr	r2, [pc, #516]	; (80013c8 <HAL_I2C_Init+0x274>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d807      	bhi.n	80011d8 <HAL_I2C_Init+0x84>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a80      	ldr	r2, [pc, #512]	; (80013cc <HAL_I2C_Init+0x278>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	e006      	b.n	80011e6 <HAL_I2C_Init+0x92>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a7d      	ldr	r2, [pc, #500]	; (80013d0 <HAL_I2C_Init+0x27c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0e7      	b.n	80013be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a78      	ldr	r2, [pc, #480]	; (80013d4 <HAL_I2C_Init+0x280>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_I2C_Init+0x274>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d802      	bhi.n	8001228 <HAL_I2C_Init+0xd4>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	e009      	b.n	800123c <HAL_I2C_Init+0xe8>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_I2C_Init+0x284>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	099b      	lsrs	r3, r3, #6
 800123a:	3301      	adds	r3, #1
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800124e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	495c      	ldr	r1, [pc, #368]	; (80013c8 <HAL_I2C_Init+0x274>)
 8001258:	428b      	cmp	r3, r1
 800125a:	d819      	bhi.n	8001290 <HAL_I2C_Init+0x13c>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e59      	subs	r1, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fbb1 f3f3 	udiv	r3, r1, r3
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001270:	400b      	ands	r3, r1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <HAL_I2C_Init+0x138>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1e59      	subs	r1, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fbb1 f3f3 	udiv	r3, r1, r3
 8001284:	3301      	adds	r3, #1
 8001286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128a:	e051      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 800128c:	2304      	movs	r3, #4
 800128e:	e04f      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_I2C_Init+0x168>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e58      	subs	r0, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	440b      	add	r3, r1
 80012a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e012      	b.n	80012e2 <HAL_I2C_Init+0x18e>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e58      	subs	r0, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Init+0x196>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e022      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10e      	bne.n	8001310 <HAL_I2C_Init+0x1bc>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1e58      	subs	r0, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	440b      	add	r3, r1
 8001300:	fbb0 f3f3 	udiv	r3, r0, r3
 8001304:	3301      	adds	r3, #1
 8001306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130e:	e00f      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	0099      	lsls	r1, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	fbb0 f3f3 	udiv	r3, r0, r3
 8001326:	3301      	adds	r3, #1
 8001328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	6809      	ldr	r1, [r1, #0]
 8001334:	4313      	orrs	r3, r2
 8001336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800135e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6911      	ldr	r1, [r2, #16]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68d2      	ldr	r2, [r2, #12]
 800136a:	4311      	orrs	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	430b      	orrs	r3, r1
 8001372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	000186a0 	.word	0x000186a0
 80013cc:	001e847f 	.word	0x001e847f
 80013d0:	003d08ff 	.word	0x003d08ff
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	817b      	strh	r3, [r7, #10]
 80013ec:	4613      	mov	r3, r2
 80013ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fbea 	bl	8000bc8 <HAL_GetTick>
 80013f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	f040 80e0 	bne.w	80015c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2319      	movs	r3, #25
 800140a:	2201      	movs	r2, #1
 800140c:	4970      	ldr	r1, [pc, #448]	; (80015d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f964 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	e0d3      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_I2C_Master_Transmit+0x50>
 8001428:	2302      	movs	r3, #2
 800142a:	e0cc      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d007      	beq.n	8001452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2221      	movs	r2, #33	; 0x21
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2210      	movs	r2, #16
 800146e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	893a      	ldrh	r2, [r7, #8]
 8001482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f89c 	bl	80015d8 <I2C_MasterRequestWrite>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e08d      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014c0:	e066      	b.n	8001590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f9de 	bl	8001888 <I2C_WaitOnTXEFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d107      	bne.n	80014ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06b      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b04      	cmp	r3, #4
 800152a:	d11b      	bne.n	8001564 <HAL_I2C_Master_Transmit+0x188>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d017      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	6a39      	ldr	r1, [r7, #32]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f9ce 	bl	800190a <I2C_WaitOnBTFFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2b04      	cmp	r3, #4
 800157a:	d107      	bne.n	800158c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e01a      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	d194      	bne.n	80014c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	00100002 	.word	0x00100002
 80015d4:	ffff0000 	.word	0xffff0000

080015d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d006      	beq.n	8001602 <I2C_MasterRequestWrite+0x2a>
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <I2C_MasterRequestWrite+0x2a>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001600:	d108      	bne.n	8001614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e00b      	b.n	800162c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	2b12      	cmp	r3, #18
 800161a:	d107      	bne.n	800162c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f84f 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00d      	beq.n	8001660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001652:	d103      	bne.n	800165c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e035      	b.n	80016cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001668:	d108      	bne.n	800167c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	e01b      	b.n	80016b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	11db      	asrs	r3, r3, #7
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0306 	and.w	r3, r3, #6
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f063 030f 	orn	r3, r3, #15
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	490e      	ldr	r1, [pc, #56]	; (80016d4 <I2C_MasterRequestWrite+0xfc>)
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f875 	bl	800178a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e010      	b.n	80016cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <I2C_MasterRequestWrite+0x100>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f865 	bl	800178a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	00010008 	.word	0x00010008
 80016d8:	00010002 	.word	0x00010002

080016dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ec:	e025      	b.n	800173a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d021      	beq.n	800173a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff fa67 	bl	8000bc8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d116      	bne.n	800173a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f043 0220 	orr.w	r2, r3, #32
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e023      	b.n	8001782 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10d      	bne.n	8001760 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4013      	ands	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	e00c      	b.n	800177a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4013      	ands	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	429a      	cmp	r2, r3
 800177e:	d0b6      	beq.n	80016ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001798:	e051      	b.n	800183e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d123      	bne.n	80017f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f043 0204 	orr.w	r2, r3, #4
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e046      	b.n	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d021      	beq.n	800183e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fa:	f7ff f9e5 	bl	8000bc8 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d302      	bcc.n	8001810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d116      	bne.n	800183e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f043 0220 	orr.w	r2, r3, #32
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e020      	b.n	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10c      	bne.n	8001862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4013      	ands	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	e00b      	b.n	800187a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	43da      	mvns	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4013      	ands	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d18d      	bne.n	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001894:	e02d      	b.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f878 	bl	800198c <I2C_IsAcknowledgeFailed>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e02d      	b.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d021      	beq.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ae:	f7ff f98b 	bl	8000bc8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d116      	bne.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e007      	b.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d1ca      	bne.n	8001896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001916:	e02d      	b.n	8001974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f837 	bl	800198c <I2C_IsAcknowledgeFailed>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e02d      	b.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192e:	d021      	beq.n	8001974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001930:	f7ff f94a 	bl	8000bc8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	d302      	bcc.n	8001946 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b04      	cmp	r3, #4
 8001980:	d1ca      	bne.n	8001918 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d11b      	bne.n	80019dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e272      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d00c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a14:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d06c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x12c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d168      	bne.n	8001b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e24c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x76>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e02e      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f880 	bl	8000bc8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f87c 	bl	8000bc8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e200      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xe4>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f86c 	bl	8000bc8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f868 	bl	8000bc8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1ec      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x10c>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4939      	ldr	r1, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff f821 	bl	8000bc8 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f81d 	bl	8000bc8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1a1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f800 	bl	8000bc8 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7fe fffc 	bl	8000bc8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e180      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03a      	beq.n	8001c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7fe ffe0 	bl	8000bc8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe ffdc 	bl	8000bc8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e160      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 fac4 	bl	80021b8 <RCC_Delay>
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7fe ffc6 	bl	8000bc8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7fe ffc2 	bl	8000bc8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d908      	bls.n	8001c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e146      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	42420000 	.word	0x42420000
 8001c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e9      	bne.n	8001c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a6 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b85      	ldr	r3, [pc, #532]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ff83 	bl	8000bc8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7fe ff7f 	bl	8000bc8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	; 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e103      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x4c8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x312>
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d02:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a69      	ldr	r2, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a66      	ldr	r2, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	e01c      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x356>
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a60      	ldr	r2, [pc, #384]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a5a      	ldr	r2, [pc, #360]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe ff33 	bl	8000bc8 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7fe ff2f 	bl	8000bc8 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0b1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ee      	beq.n	8001d66 <HAL_RCC_OscConfig+0x37e>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff1d 	bl	8000bc8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe ff19 	bl	8000bc8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e09b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ee      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d061      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d146      	bne.n	8001e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe feed 	bl	8000bc8 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe fee9 	bl	8000bc8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e06d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4921      	ldr	r1, [pc, #132]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a19      	ldr	r1, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe febd 	bl	8000bc8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7fe feb9 	bl	8000bc8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e03d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x46a>
 8001e70:	e035      	b.n	8001ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x4cc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fea6 	bl	8000bc8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe fea2 	bl	8000bc8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e026      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x498>
 8001e9e:	e01e      	b.n	8001ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e019      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x500>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d0      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d910      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4965      	ldr	r1, [pc, #404]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d040      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e073      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4936      	ldr	r1, [pc, #216]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fdf4 	bl	8000bc8 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fdf0 	bl	8000bc8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e053      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d210      	bcs.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e032      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207a:	f000 f821 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fd52 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08006174 	.word	0x08006174
 80020b8:	20000010 	.word	0x20000010
 80020bc:	20000014 	.word	0x20000014

080020c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b490      	push	{r4, r7}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_GetSysClockFreq+0xac>)
 80020c8:	1d3c      	adds	r4, r7, #4
 80020ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020d0:	f240 2301 	movw	r3, #513	; 0x201
 80020d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x40>
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x46>
 80020fe:	e02b      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002102:	623b      	str	r3, [r7, #32]
      break;
 8002104:	e02b      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	0c9b      	lsrs	r3, r3, #18
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3328      	adds	r3, #40	; 0x28
 8002110:	443b      	add	r3, r7
 8002112:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002116:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0c5b      	lsrs	r3, r3, #17
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	3328      	adds	r3, #40	; 0x28
 800212e:	443b      	add	r3, r7
 8002130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb4>)
 800213a:	fb03 f202 	mul.w	r2, r3, r2
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	623b      	str	r3, [r7, #32]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb4>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	6a3b      	ldr	r3, [r7, #32]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc90      	pop	{r4, r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	080060ac 	.word	0x080060ac
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_GetHCLKFreq+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000010 	.word	0x20000010

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff2 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08006184 	.word	0x08006184

080021b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <RCC_Delay+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <RCC_Delay+0x38>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0a5b      	lsrs	r3, r3, #9
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <RCC_Delay+0x1c>
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000010 	.word	0x20000010
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021fa:	f3ef 8305 	mrs	r3, IPSR
 80021fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002200:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002206:	f3ef 8310 	mrs	r3, PRIMASK
 800220a:	607b      	str	r3, [r7, #4]
  return(result);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <osKernelInitialize+0x32>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <osKernelInitialize+0x60>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d109      	bne.n	800222e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800221a:	f3ef 8311 	mrs	r3, BASEPRI
 800221e:	603b      	str	r3, [r7, #0]
  return(result);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002226:	f06f 0305 	mvn.w	r3, #5
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00c      	b.n	8002248 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <osKernelInitialize+0x60>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <osKernelInitialize+0x60>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e002      	b.n	8002248 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000118 	.word	0x20000118

08002258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800225e:	f3ef 8305 	mrs	r3, IPSR
 8002262:	60bb      	str	r3, [r7, #8]
  return(result);
 8002264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226a:	f3ef 8310 	mrs	r3, PRIMASK
 800226e:	607b      	str	r3, [r7, #4]
  return(result);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <osKernelStart+0x32>
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <osKernelStart+0x64>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d109      	bne.n	8002292 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800227e:	f3ef 8311 	mrs	r3, BASEPRI
 8002282:	603b      	str	r3, [r7, #0]
  return(result);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osKernelStart+0x3a>
    stat = osErrorISR;
 800228a:	f06f 0305 	mvn.w	r3, #5
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e00e      	b.n	80022b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <osKernelStart+0x64>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <osKernelStart+0x64>)
 800229c:	2202      	movs	r2, #2
 800229e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022a0:	f001 fcf8 	bl	8003c94 <vTaskStartScheduler>
      stat = osOK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e002      	b.n	80022b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000118 	.word	0x20000118

080022c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b092      	sub	sp, #72	; 0x48
 80022c4:	af04      	add	r7, sp, #16
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022d0:	f3ef 8305 	mrs	r3, IPSR
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 8094 	bne.w	8002406 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022de:	f3ef 8310 	mrs	r3, PRIMASK
 80022e2:	623b      	str	r3, [r7, #32]
  return(result);
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 808d 	bne.w	8002406 <osThreadNew+0x146>
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <osThreadNew+0x150>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d106      	bne.n	8002302 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022f4:	f3ef 8311 	mrs	r3, BASEPRI
 80022f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 8082 	bne.w	8002406 <osThreadNew+0x146>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d07e      	beq.n	8002406 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800230c:	2318      	movs	r3, #24
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002310:	2300      	movs	r3, #0
 8002312:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002314:	f107 031b 	add.w	r3, r7, #27
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d045      	beq.n	80023b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <osThreadNew+0x74>
        name = attr->name;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <osThreadNew+0x9a>
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	2b38      	cmp	r3, #56	; 0x38
 800234c:	d805      	bhi.n	800235a <osThreadNew+0x9a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <osThreadNew+0x9e>
        return (NULL);
 800235a:	2300      	movs	r3, #0
 800235c:	e054      	b.n	8002408 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <osThreadNew+0xd4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b5b      	cmp	r3, #91	; 0x5b
 800237c:	d90a      	bls.n	8002394 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <osThreadNew+0xd4>
        mem = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	e010      	b.n	80023b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <osThreadNew+0xf6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <osThreadNew+0xf6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <osThreadNew+0xf6>
          mem = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b0:	e001      	b.n	80023b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023c4:	9202      	str	r2, [sp, #8]
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 fa92 	bl	80038fc <xTaskCreateStatic>
 80023d8:	4603      	mov	r3, r0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e013      	b.n	8002406 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d110      	bne.n	8002406 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f001 fadc 	bl	80039b4 <xTaskCreate>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <osThreadNew+0x146>
          hTask = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002406:	697b      	ldr	r3, [r7, #20]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	; 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000118 	.word	0x20000118

08002414 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800241c:	f3ef 8305 	mrs	r3, IPSR
 8002420:	613b      	str	r3, [r7, #16]
  return(result);
 8002422:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10f      	bne.n	8002448 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002428:	f3ef 8310 	mrs	r3, PRIMASK
 800242c:	60fb      	str	r3, [r7, #12]
  return(result);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <osDelay+0x34>
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <osDelay+0x58>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d109      	bne.n	8002450 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800243c:	f3ef 8311 	mrs	r3, BASEPRI
 8002440:	60bb      	str	r3, [r7, #8]
  return(result);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <osDelay+0x3c>
    stat = osErrorISR;
 8002448:	f06f 0305 	mvn.w	r3, #5
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e007      	b.n	8002460 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <osDelay+0x4c>
      vTaskDelay(ticks);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fbe6 	bl	8003c2c <vTaskDelay>
    }
  }

  return (stat);
 8002460:	697b      	ldr	r3, [r7, #20]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000118 	.word	0x20000118

08002470 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002480:	f3ef 8305 	mrs	r3, IPSR
 8002484:	61bb      	str	r3, [r7, #24]
  return(result);
 8002486:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8086 	bne.w	800259a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248e:	f3ef 8310 	mrs	r3, PRIMASK
 8002492:	617b      	str	r3, [r7, #20]
  return(result);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d17f      	bne.n	800259a <osSemaphoreNew+0x12a>
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <osSemaphoreNew+0x134>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d105      	bne.n	80024ae <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024a2:	f3ef 8311 	mrs	r3, BASEPRI
 80024a6:	613b      	str	r3, [r7, #16]
  return(result);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d175      	bne.n	800259a <osSemaphoreNew+0x12a>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d072      	beq.n	800259a <osSemaphoreNew+0x12a>
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d86e      	bhi.n	800259a <osSemaphoreNew+0x12a>
    mem = -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <osSemaphoreNew+0x6e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b4f      	cmp	r3, #79	; 0x4f
 80024d6:	d902      	bls.n	80024de <osSemaphoreNew+0x6e>
        mem = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	e00c      	b.n	80024f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <osSemaphoreNew+0x88>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <osSemaphoreNew+0x88>
          mem = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	e001      	b.n	80024f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d04c      	beq.n	800259a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d128      	bne.n	8002558 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10a      	bne.n	8002522 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2203      	movs	r2, #3
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2001      	movs	r0, #1
 800251a:	f000 fa4d 	bl	80029b8 <xQueueGenericCreateStatic>
 800251e:	6278      	str	r0, [r7, #36]	; 0x24
 8002520:	e005      	b.n	800252e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002522:	2203      	movs	r2, #3
 8002524:	2100      	movs	r1, #0
 8002526:	2001      	movs	r0, #1
 8002528:	f000 fabd 	bl	8002aa6 <xQueueGenericCreate>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d022      	beq.n	800257a <osSemaphoreNew+0x10a>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01f      	beq.n	800257a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800253a:	2300      	movs	r3, #0
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002542:	f000 fb7b 	bl	8002c3c <xQueueGenericSend>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d016      	beq.n	800257a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800254c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254e:	f001 f805 	bl	800355c <vQueueDelete>
            hSemaphore = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	e010      	b.n	800257a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	461a      	mov	r2, r3
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fafe 	bl	8002b68 <xQueueCreateCountingSemaphoreStatic>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24
 800256e:	e004      	b.n	800257a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb2f 	bl	8002bd6 <xQueueCreateCountingSemaphore>
 8002578:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <osSemaphoreNew+0x11e>
          name = attr->name;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	e001      	b.n	8002592 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002596:	f001 f92b 	bl	80037f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000118 	.word	0x20000118

080025a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025c0:	f06f 0303 	mvn.w	r3, #3
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e04b      	b.n	8002660 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c8:	f3ef 8305 	mrs	r3, IPSR
 80025cc:	617b      	str	r3, [r7, #20]
  return(result);
 80025ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d4:	f3ef 8310 	mrs	r3, PRIMASK
 80025d8:	613b      	str	r3, [r7, #16]
  return(result);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <osSemaphoreAcquire+0x4c>
 80025e0:	4b22      	ldr	r3, [pc, #136]	; (800266c <osSemaphoreAcquire+0xc4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d128      	bne.n	800263a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025e8:	f3ef 8311 	mrs	r3, BASEPRI
 80025ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80025fa:	f06f 0303 	mvn.w	r3, #3
 80025fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002600:	e02d      	b.n	800265e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	461a      	mov	r2, r3
 800260c:	2100      	movs	r1, #0
 800260e:	69b8      	ldr	r0, [r7, #24]
 8002610:	f000 ff24 	bl	800345c <xQueueReceiveFromISR>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d003      	beq.n	8002622 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800261a:	f06f 0302 	mvn.w	r3, #2
 800261e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002620:	e01d      	b.n	800265e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01a      	beq.n	800265e <osSemaphoreAcquire+0xb6>
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <osSemaphoreAcquire+0xc8>)
 800262a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002638:	e011      	b.n	800265e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	69b8      	ldr	r0, [r7, #24]
 800263e:	f000 fe01 	bl	8003244 <xQueueSemaphoreTake>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d00b      	beq.n	8002660 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800264e:	f06f 0301 	mvn.w	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	e004      	b.n	8002660 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002656:	f06f 0302 	mvn.w	r3, #2
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	e000      	b.n	8002660 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800265e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002660:	69fb      	ldr	r3, [r7, #28]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000118 	.word	0x20000118
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800268a:	f06f 0303 	mvn.w	r3, #3
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e03e      	b.n	8002710 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002692:	f3ef 8305 	mrs	r3, IPSR
 8002696:	617b      	str	r3, [r7, #20]
  return(result);
 8002698:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269e:	f3ef 8310 	mrs	r3, PRIMASK
 80026a2:	613b      	str	r3, [r7, #16]
  return(result);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <osSemaphoreRelease+0x4a>
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <osSemaphoreRelease+0xa8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d120      	bne.n	80026f4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026b2:	f3ef 8311 	mrs	r3, BASEPRI
 80026b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01a      	beq.n	80026f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	4619      	mov	r1, r3
 80026c8:	69b8      	ldr	r0, [r7, #24]
 80026ca:	f000 fc4d 	bl	8002f68 <xQueueGiveFromISR>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d003      	beq.n	80026dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80026d4:	f06f 0302 	mvn.w	r3, #2
 80026d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026da:	e018      	b.n	800270e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <osSemaphoreRelease+0x9a>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <osSemaphoreRelease+0xac>)
 80026e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026f2:	e00c      	b.n	800270e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	69b8      	ldr	r0, [r7, #24]
 80026fc:	f000 fa9e 	bl	8002c3c <xQueueGenericSend>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d004      	beq.n	8002710 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002706:	f06f 0302 	mvn.w	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e000      	b.n	8002710 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800270e:	bf00      	nop
    }
  }

  return (stat);
 8002710:	69fb      	ldr	r3, [r7, #28]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000118 	.word	0x20000118
 8002720:	e000ed04 	.word	0xe000ed04

08002724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a06      	ldr	r2, [pc, #24]	; (800274c <vApplicationGetIdleTaskMemory+0x28>)
 8002734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4a05      	ldr	r2, [pc, #20]	; (8002750 <vApplicationGetIdleTaskMemory+0x2c>)
 800273a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	2000011c 	.word	0x2000011c
 8002750:	20000178 	.word	0x20000178

08002754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <vApplicationGetTimerTaskMemory+0x2c>)
 8002764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <vApplicationGetTimerTaskMemory+0x30>)
 800276a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000378 	.word	0x20000378
 8002784:	200003d4 	.word	0x200003d4

08002788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 0208 	add.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0208 	add.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d103      	bne.n	8002844 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e00c      	b.n	800285e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3308      	adds	r3, #8
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e002      	b.n	8002852 <vListInsert+0x2e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d2f6      	bcs.n	800284c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d103      	bne.n	80028c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
	...

080028e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002912:	f002 fbf3 	bl	80050fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	3b01      	subs	r3, #1
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	441a      	add	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d114      	bne.n	8002992 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01a      	beq.n	80029a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3310      	adds	r3, #16
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fc17 	bl	80041a8 <xTaskRemoveFromEventList>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <xQueueGenericReset+0xcc>)
 8002982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	e009      	b.n	80029a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3310      	adds	r3, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fef6 	bl	8002788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3324      	adds	r3, #36	; 0x24
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fef1 	bl	8002788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029a6:	f002 fbd9 	bl	800515c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <xQueueGenericCreateStatic+0x52>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <xQueueGenericCreateStatic+0x56>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <xQueueGenericCreateStatic+0x58>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	623b      	str	r3, [r7, #32]
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <xQueueGenericCreateStatic+0x7e>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <xQueueGenericCreateStatic+0x82>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xQueueGenericCreateStatic+0x84>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61fb      	str	r3, [r7, #28]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a56:	2350      	movs	r3, #80	; 0x50
 8002a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d00a      	beq.n	8002a76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61bb      	str	r3, [r7, #24]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f843 	bl	8002b22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b08a      	sub	sp, #40	; 0x28
 8002aaa:	af02      	add	r7, sp, #8
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	613b      	str	r3, [r7, #16]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e004      	b.n	8002ae6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3350      	adds	r3, #80	; 0x50
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fc06 	bl	80052fc <pvPortMalloc>
 8002af0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00f      	beq.n	8002b18 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	3350      	adds	r3, #80	; 0x50
 8002afc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b06:	79fa      	ldrb	r2, [r7, #7]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f805 	bl	8002b22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b18:	69bb      	ldr	r3, [r7, #24]
	}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e002      	b.n	8002b44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b50:	2101      	movs	r1, #1
 8002b52:	69b8      	ldr	r0, [r7, #24]
 8002b54:	f7ff fec8 	bl	80028e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	61bb      	str	r3, [r7, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d90a      	bls.n	8002bae <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	617b      	str	r3, [r7, #20]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bae:	2302      	movs	r3, #2
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fefd 	bl	80029b8 <xQueueGenericCreateStatic>
 8002bbe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
	}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	613b      	str	r3, [r7, #16]
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d90a      	bls.n	8002c1a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff41 	bl	8002aa6 <xQueueGenericCreate>
 8002c24:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c32:	697b      	ldr	r3, [r7, #20]
	}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	; 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericSend+0x32>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <xQueueGenericSend+0x40>
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <xQueueGenericSend+0x44>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <xQueueGenericSend+0x46>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <xQueueGenericSend+0x60>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d103      	bne.n	8002caa <xQueueGenericSend+0x6e>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <xQueueGenericSend+0x72>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueGenericSend+0x74>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueGenericSend+0x8e>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	623b      	str	r3, [r7, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cca:	f001 fc2f 	bl	800452c <xTaskGetSchedulerState>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <xQueueGenericSend+0x9e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueGenericSend+0xa2>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueGenericSend+0xa4>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueGenericSend+0xbe>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61fb      	str	r3, [r7, #28]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cfa:	f002 f9ff 	bl	80050fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <xQueueGenericSend+0xd4>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d129      	bne.n	8002d64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d16:	f000 fc5b 	bl	80035d0 <prvCopyDataToQueue>
 8002d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	3324      	adds	r3, #36	; 0x24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fa3d 	bl	80041a8 <xTaskRemoveFromEventList>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d34:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <xQueueGenericSend+0x1f8>)
 8002d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	e00a      	b.n	8002d5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <xQueueGenericSend+0x1f8>)
 8002d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d5c:	f002 f9fe 	bl	800515c <vPortExitCritical>
				return pdPASS;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e063      	b.n	8002e2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d6a:	f002 f9f7 	bl	800515c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e05c      	b.n	8002e2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fa77 	bl	8004270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d82:	2301      	movs	r3, #1
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d86:	f002 f9e9 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d8a:	f000 ffe9 	bl	8003d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d8e:	f002 f9b5 	bl	80050fc <vPortEnterCritical>
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d98:	b25b      	sxtb	r3, r3
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d103      	bne.n	8002da8 <xQueueGenericSend+0x16c>
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d103      	bne.n	8002dbe <xQueueGenericSend+0x182>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbe:	f002 f9cd 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc2:	1d3a      	adds	r2, r7, #4
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fa66 	bl	800429c <xTaskCheckForTimeOut>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d124      	bne.n	8002e20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd8:	f000 fcf2 	bl	80037c0 <prvIsQueueFull>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	3310      	adds	r3, #16
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f98c 	bl	8004108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f000 fc7d 	bl	80036f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002df6:	f000 ffc1 	bl	8003d7c <xTaskResumeAll>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f af7c 	bne.w	8002cfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <xQueueGenericSend+0x1f8>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	e772      	b.n	8002cfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e16:	f000 fc6b 	bl	80036f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e1a:	f000 ffaf 	bl	8003d7c <xTaskResumeAll>
 8002e1e:	e76c      	b.n	8002cfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e22:	f000 fc65 	bl	80036f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e26:	f000 ffa9 	bl	8003d7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e2a:	2300      	movs	r3, #0
		}
	}
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3738      	adds	r7, #56	; 0x38
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	e000ed04 	.word	0xe000ed04

08002e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	; 0x38
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <xQueueGenericSendFromISR+0x3c>
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <xQueueGenericSendFromISR+0x40>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <xQueueGenericSendFromISR+0x42>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	623b      	str	r3, [r7, #32]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSendFromISR+0x6a>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <xQueueGenericSendFromISR+0x6e>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <xQueueGenericSendFromISR+0x70>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	61fb      	str	r3, [r7, #28]
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ec2:	f002 f9dd 	bl	8005280 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	61ba      	str	r2, [r7, #24]
 8002edc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ede:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <xQueueGenericSendFromISR+0xbc>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d12c      	bne.n	8002f4e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f04:	f000 fb64 	bl	80035d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d112      	bne.n	8002f38 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	3324      	adds	r3, #36	; 0x24
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f942 	bl	80041a8 <xTaskRemoveFromEventList>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e007      	b.n	8002f48 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	b25a      	sxtb	r2, r3
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f4c:	e001      	b.n	8002f52 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	623b      	str	r3, [r7, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61fb      	str	r3, [r7, #28]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGiveFromISR+0x58>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGiveFromISR+0x5c>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGiveFromISR+0x5e>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61bb      	str	r3, [r7, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fe0:	f002 f94e 	bl	8005280 <vPortValidateInterruptPriority>
	__asm volatile
 8002fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	617a      	str	r2, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002ffc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300c:	429a      	cmp	r2, r3
 800300e:	d22b      	bcs.n	8003068 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003022:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d112      	bne.n	8003052 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d016      	beq.n	8003062 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f8b5 	bl	80041a8 <xTaskRemoveFromEventList>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003056:	3301      	adds	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	b25a      	sxtb	r2, r3
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003062:	2301      	movs	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	e001      	b.n	800306c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003068:	2300      	movs	r3, #0
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f383 8811 	msr	BASEPRI, r3
}
 8003076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800307a:	4618      	mov	r0, r3
 800307c:	3738      	adds	r7, #56	; 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueReceive+0x30>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	623b      	str	r3, [r7, #32]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueReceive+0x3e>
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueReceive+0x42>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueReceive+0x44>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueReceive+0x5e>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61fb      	str	r3, [r7, #28]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e2:	f001 fa23 	bl	800452c <xTaskGetSchedulerState>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <xQueueReceive+0x6e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <xQueueReceive+0x72>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueReceive+0x74>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueReceive+0x8e>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	61bb      	str	r3, [r7, #24]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003112:	f001 fff3 	bl	80050fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 fabd 	bl	80036a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00f      	beq.n	800315a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	3310      	adds	r3, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f832 	bl	80041a8 <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <xQueueReceive+0x1bc>)
 800314c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800315a:	f001 ffff 	bl	800515c <vPortExitCritical>
				return pdPASS;
 800315e:	2301      	movs	r3, #1
 8003160:	e069      	b.n	8003236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003168:	f001 fff8 	bl	800515c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800316c:	2300      	movs	r3, #0
 800316e:	e062      	b.n	8003236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f878 	bl	8004270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003184:	f001 ffea 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003188:	f000 fdea 	bl	8003d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800318c:	f001 ffb6 	bl	80050fc <vPortEnterCritical>
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <xQueueReceive+0x122>
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d103      	bne.n	80031bc <xQueueReceive+0x138>
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	f001 ffce 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c0:	1d3a      	adds	r2, r7, #4
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 f867 	bl	800429c <xTaskCheckForTimeOut>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d123      	bne.n	800321c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	f000 fadd 	bl	8003794 <prvIsQueueEmpty>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 ff8d 	bl	8004108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 fa7e 	bl	80036f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031f4:	f000 fdc2 	bl	8003d7c <xTaskResumeAll>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d189      	bne.n	8003112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <xQueueReceive+0x1bc>)
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	e780      	b.n	8003112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003212:	f000 fa6d 	bl	80036f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003216:	f000 fdb1 	bl	8003d7c <xTaskResumeAll>
 800321a:	e77a      	b.n	8003112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800321c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321e:	f000 fa67 	bl	80036f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003222:	f000 fdab 	bl	8003d7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003228:	f000 fab4 	bl	8003794 <prvIsQueueEmpty>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f43f af6f 	beq.w	8003112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003236:	4618      	mov	r0, r3
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	; 0x38
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	623b      	str	r3, [r7, #32]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	61fb      	str	r3, [r7, #28]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003294:	f001 f94a 	bl	800452c <xTaskGetSchedulerState>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <xQueueSemaphoreTake+0x60>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <xQueueSemaphoreTake+0x64>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <xQueueSemaphoreTake+0x66>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	61bb      	str	r3, [r7, #24]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032c4:	f001 ff1a 	bl	80050fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d024      	beq.n	800331e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80032e4:	f001 faa2 	bl	800482c <pvTaskIncrementMutexHeldCount>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	3310      	adds	r3, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 ff54 	bl	80041a8 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <xQueueSemaphoreTake+0x214>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003316:	f001 ff21 	bl	800515c <vPortExitCritical>
				return pdPASS;
 800331a:	2301      	movs	r3, #1
 800331c:	e097      	b.n	800344e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	617b      	str	r3, [r7, #20]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003340:	f001 ff0c 	bl	800515c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003344:	2300      	movs	r3, #0
 8003346:	e082      	b.n	800344e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800334e:	f107 030c 	add.w	r3, r7, #12
 8003352:	4618      	mov	r0, r3
 8003354:	f000 ff8c 	bl	8004270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800335c:	f001 fefe 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003360:	f000 fcfe 	bl	8003d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003364:	f001 feca 	bl	80050fc <vPortEnterCritical>
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800336e:	b25b      	sxtb	r3, r3
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d103      	bne.n	800337e <xQueueSemaphoreTake+0x13a>
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003384:	b25b      	sxtb	r3, r3
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d103      	bne.n	8003394 <xQueueSemaphoreTake+0x150>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003394:	f001 fee2 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003398:	463a      	mov	r2, r7
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 ff7b 	bl	800429c <xTaskCheckForTimeOut>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d132      	bne.n	8003412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ae:	f000 f9f1 	bl	8003794 <prvIsQueueEmpty>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d026      	beq.n	8003406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033c0:	f001 fe9c 	bl	80050fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 f8cd 	bl	8004568 <xTaskPriorityInherit>
 80033ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033d0:	f001 fec4 	bl	800515c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fe93 	bl	8004108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e4:	f000 f984 	bl	80036f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033e8:	f000 fcc8 	bl	8003d7c <xTaskResumeAll>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af68 	bne.w	80032c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <xQueueSemaphoreTake+0x214>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	e75e      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003408:	f000 f972 	bl	80036f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340c:	f000 fcb6 	bl	8003d7c <xTaskResumeAll>
 8003410:	e758      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003414:	f000 f96c 	bl	80036f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003418:	f000 fcb0 	bl	8003d7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800341e:	f000 f9b9 	bl	8003794 <prvIsQueueEmpty>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f43f af4d 	beq.w	80032c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003430:	f001 fe64 	bl	80050fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003436:	f000 f8b4 	bl	80035a2 <prvGetDisinheritPriorityAfterTimeout>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f001 f96c 	bl	8004720 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003448:	f001 fe88 	bl	800515c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800344c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800344e:	4618      	mov	r0, r3
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	623b      	str	r3, [r7, #32]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueReceiveFromISR+0x3a>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xQueueReceiveFromISR+0x3e>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueReceiveFromISR+0x40>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b6:	f001 fee3 	bl	8005280 <vPortValidateInterruptPriority>
	__asm volatile
 80034ba:	f3ef 8211 	mrs	r2, BASEPRI
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	61ba      	str	r2, [r7, #24]
 80034d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02f      	beq.n	8003542 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f000 f8d8 	bl	80036a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d112      	bne.n	800352c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	3310      	adds	r3, #16
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fe48 	bl	80041a8 <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	b25a      	sxtb	r2, r3
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800353c:	2301      	movs	r3, #1
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
 8003540:	e001      	b.n	8003546 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f383 8811 	msr	BASEPRI, r3
}
 8003550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	; 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <vQueueDelete+0x28>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60bb      	str	r3, [r7, #8]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f95b 	bl	8003840 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f001 ff75 	bl	8005484 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e001      	b.n	80035c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035c4:	68fb      	ldr	r3, [r7, #12]
	}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d14d      	bne.n	8003692 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f822 	bl	8004644 <xTaskPriorityDisinherit>
 8003600:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	e043      	b.n	8003692 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d119      	bne.n	8003644 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6898      	ldr	r0, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	461a      	mov	r2, r3
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	f002 f870 	bl	8005700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d32b      	bcc.n	8003692 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	e026      	b.n	8003692 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68d8      	ldr	r0, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	461a      	mov	r2, r3
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	f002 f856 	bl	8005700 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	425b      	negs	r3, r3
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d207      	bcs.n	8003680 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	425b      	negs	r3, r3
 800367a:	441a      	add	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d105      	bne.n	8003692 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3b01      	subs	r3, #1
 8003690:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800369a:	697b      	ldr	r3, [r7, #20]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d303      	bcc.n	80036d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68d9      	ldr	r1, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	461a      	mov	r2, r3
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	f002 f80c 	bl	8005700 <memcpy>
	}
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036f8:	f001 fd00 	bl	80050fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003702:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003704:	e011      	b.n	800372a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3324      	adds	r3, #36	; 0x24
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fd48 	bl	80041a8 <xTaskRemoveFromEventList>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800371e:	f000 fe1f 	bl	8004360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	3b01      	subs	r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	dce9      	bgt.n	8003706 <prvUnlockQueue+0x16>
 8003732:	e000      	b.n	8003736 <prvUnlockQueue+0x46>
					break;
 8003734:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800373e:	f001 fd0d 	bl	800515c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003742:	f001 fcdb 	bl	80050fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800374c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800374e:	e011      	b.n	8003774 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd23 	bl	80041a8 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003768:	f000 fdfa 	bl	8004360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800376c:	7bbb      	ldrb	r3, [r7, #14]
 800376e:	3b01      	subs	r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003778:	2b00      	cmp	r3, #0
 800377a:	dce9      	bgt.n	8003750 <prvUnlockQueue+0x60>
 800377c:	e000      	b.n	8003780 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800377e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003788:	f001 fce8 	bl	800515c <vPortExitCritical>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800379c:	f001 fcae 	bl	80050fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e001      	b.n	80037b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037b2:	f001 fcd3 	bl	800515c <vPortExitCritical>

	return xReturn;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037c8:	f001 fc98 	bl	80050fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d102      	bne.n	80037de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e001      	b.n	80037e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037e2:	f001 fcbb 	bl	800515c <vPortExitCritical>

	return xReturn;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e014      	b.n	800382a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <vQueueAddToRegistry+0x4c>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800380c:	490b      	ldr	r1, [pc, #44]	; (800383c <vQueueAddToRegistry+0x4c>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <vQueueAddToRegistry+0x4c>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003822:	e006      	b.n	8003832 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b07      	cmp	r3, #7
 800382e:	d9e7      	bls.n	8003800 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	200007d4 	.word	0x200007d4

08003840 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e016      	b.n	800387c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <vQueueUnregisterQueue+0x50>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d10b      	bne.n	8003876 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <vQueueUnregisterQueue+0x50>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2100      	movs	r1, #0
 8003864:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <vQueueUnregisterQueue+0x50>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	2200      	movs	r2, #0
 8003872:	605a      	str	r2, [r3, #4]
				break;
 8003874:	e006      	b.n	8003884 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b07      	cmp	r3, #7
 8003880:	d9e5      	bls.n	800384e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	200007d4 	.word	0x200007d4

08003894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038a4:	f001 fc2a 	bl	80050fc <vPortEnterCritical>
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d103      	bne.n	80038be <vQueueWaitForMessageRestricted+0x2a>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d103      	bne.n	80038d4 <vQueueWaitForMessageRestricted+0x40>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d4:	f001 fc42 	bl	800515c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3324      	adds	r3, #36	; 0x24
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fc31 	bl	8004150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff fefe 	bl	80036f0 <prvUnlockQueue>
	}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	; 0x38
 8003900:	af04      	add	r7, sp, #16
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	623b      	str	r3, [r7, #32]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCreateStatic+0x46>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	61fb      	str	r3, [r7, #28]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003942:	235c      	movs	r3, #92	; 0x5c
 8003944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b5c      	cmp	r3, #92	; 0x5c
 800394a:	d00a      	beq.n	8003962 <xTaskCreateStatic+0x66>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	61bb      	str	r3, [r7, #24]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01e      	beq.n	80039a6 <xTaskCreateStatic+0xaa>
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01b      	beq.n	80039a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003980:	2300      	movs	r3, #0
 8003982:	9303      	str	r3, [sp, #12]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	9302      	str	r3, [sp, #8]
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f850 	bl	8003a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800399e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a0:	f000 f8d4 	bl	8003b4c <prvAddNewTaskToReadyList>
 80039a4:	e001      	b.n	80039aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039aa:	697b      	ldr	r3, [r7, #20]
	}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	; 0x30
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fc97 	bl	80052fc <pvPortMalloc>
 80039ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039d6:	205c      	movs	r0, #92	; 0x5c
 80039d8:	f001 fc90 	bl	80052fc <pvPortMalloc>
 80039dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ea:	e005      	b.n	80039f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f001 fd49 	bl	8005484 <vPortFree>
 80039f2:	e001      	b.n	80039f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d017      	beq.n	8003a2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9303      	str	r3, [sp, #12]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f80e 	bl	8003a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a22:	69f8      	ldr	r0, [r7, #28]
 8003a24:	f000 f892 	bl	8003b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e002      	b.n	8003a34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a34:	69bb      	ldr	r3, [r7, #24]
	}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b088      	sub	sp, #32
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	461a      	mov	r2, r3
 8003a56:	21a5      	movs	r1, #165	; 0xa5
 8003a58:	f001 fe60 	bl	800571c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a66:	3b01      	subs	r3, #1
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f023 0307 	bic.w	r3, r3, #7
 8003a74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	617b      	str	r3, [r7, #20]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e012      	b.n	8003ac2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	7819      	ldrb	r1, [r3, #0]
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3334      	adds	r3, #52	; 0x34
 8003aac:	460a      	mov	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d9e9      	bls.n	8003a9c <prvInitialiseNewTask+0x5e>
 8003ac8:	e000      	b.n	8003acc <prvInitialiseNewTask+0x8e>
		{
			break;
 8003aca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b37      	cmp	r3, #55	; 0x37
 8003ad8:	d901      	bls.n	8003ade <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ada:	2337      	movs	r3, #55	; 0x37
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2200      	movs	r2, #0
 8003aee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	3304      	adds	r3, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fe66 	bl	80027c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3318      	adds	r3, #24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fe61 	bl	80027c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	69b8      	ldr	r0, [r7, #24]
 8003b2e:	f001 f9f7 	bl	8004f20 <pxPortInitialiseStack>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b54:	f001 fad2 	bl	80050fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b58:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d110      	bne.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b78:	f000 fc16 	bl	80043a8 <prvInitialiseTaskLists>
 8003b7c:	e00d      	b.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <prvAddNewTaskToReadyList+0xcc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b86:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d802      	bhi.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <prvAddNewTaskToReadyList+0xd4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d903      	bls.n	8003bc0 <prvAddNewTaskToReadyList+0x74>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <prvAddNewTaskToReadyList+0xd4>)
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <prvAddNewTaskToReadyList+0xd8>)
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f7fe fe01 	bl	80027de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bdc:	f001 fabe 	bl	800515c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <prvAddNewTaskToReadyList+0xcc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d207      	bcs.n	8003c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <prvAddNewTaskToReadyList+0xdc>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000ce8 	.word	0x20000ce8
 8003c14:	20000814 	.word	0x20000814
 8003c18:	20000cf4 	.word	0x20000cf4
 8003c1c:	20000d04 	.word	0x20000d04
 8003c20:	20000cf0 	.word	0x20000cf0
 8003c24:	20000818 	.word	0x20000818
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <vTaskDelay+0x60>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <vTaskDelay+0x30>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60bb      	str	r3, [r7, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c5c:	f000 f880 	bl	8003d60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c60:	2100      	movs	r1, #0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fdf6 	bl	8004854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c68:	f000 f888 	bl	8003d7c <xTaskResumeAll>
 8003c6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <vTaskDelay+0x64>)
 8003c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000d10 	.word	0x20000d10
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ca2:	463a      	mov	r2, r7
 8003ca4:	1d39      	adds	r1, r7, #4
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd3a 	bl	8002724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	9202      	str	r2, [sp, #8]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	4921      	ldr	r1, [pc, #132]	; (8003d48 <vTaskStartScheduler+0xb4>)
 8003cc4:	4821      	ldr	r0, [pc, #132]	; (8003d4c <vTaskStartScheduler+0xb8>)
 8003cc6:	f7ff fe19 	bl	80038fc <xTaskCreateStatic>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <vTaskStartScheduler+0xbc>)
 8003cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <vTaskStartScheduler+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e001      	b.n	8003ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ce8:	f000 fe08 	bl	80048fc <xTimerCreateTimerTask>
 8003cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d116      	bne.n	8003d22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	613b      	str	r3, [r7, #16]
}
 8003d06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <vTaskStartScheduler+0xc0>)
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <vTaskStartScheduler+0xc4>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <vTaskStartScheduler+0xc8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d1c:	f001 f97c 	bl	8005018 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d20:	e00e      	b.n	8003d40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d10a      	bne.n	8003d40 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60fb      	str	r3, [r7, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <vTaskStartScheduler+0xaa>
}
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	080060bc 	.word	0x080060bc
 8003d4c:	08004379 	.word	0x08004379
 8003d50:	20000d0c 	.word	0x20000d0c
 8003d54:	20000d08 	.word	0x20000d08
 8003d58:	20000cf4 	.word	0x20000cf4
 8003d5c:	20000cec 	.word	0x20000cec

08003d60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <vTaskSuspendAll+0x18>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <vTaskSuspendAll+0x18>)
 8003d6c:	6013      	str	r3, [r2, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000d10 	.word	0x20000d10

08003d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d8a:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <xTaskResumeAll+0x118>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	603b      	str	r3, [r7, #0]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003da8:	f001 f9a8 	bl	80050fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <xTaskResumeAll+0x118>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <xTaskResumeAll+0x118>)
 8003db4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <xTaskResumeAll+0x118>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d162      	bne.n	8003e84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <xTaskResumeAll+0x11c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d05e      	beq.n	8003e84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dc6:	e02f      	b.n	8003e28 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dc8:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <xTaskResumeAll+0x120>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fd5d 	bl	8002894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fd58 	bl	8002894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <xTaskResumeAll+0x124>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d903      	bls.n	8003df8 <xTaskResumeAll+0x7c>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <xTaskResumeAll+0x124>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <xTaskResumeAll+0x128>)
 8003e06:	441a      	add	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f7fe fce5 	bl	80027de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <xTaskResumeAll+0x12c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <xTaskResumeAll+0x130>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <xTaskResumeAll+0x120>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1cb      	bne.n	8003dc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e36:	f000 fb55 	bl	80044e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <xTaskResumeAll+0x134>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e46:	f000 f845 	bl	8003ed4 <xTaskIncrementTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <xTaskResumeAll+0x130>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f1      	bne.n	8003e46 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <xTaskResumeAll+0x134>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <xTaskResumeAll+0x130>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <xTaskResumeAll+0x138>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e84:	f001 f96a 	bl	800515c <vPortExitCritical>

	return xAlreadyYielded;
 8003e88:	68bb      	ldr	r3, [r7, #8]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000d10 	.word	0x20000d10
 8003e98:	20000ce8 	.word	0x20000ce8
 8003e9c:	20000ca8 	.word	0x20000ca8
 8003ea0:	20000cf0 	.word	0x20000cf0
 8003ea4:	20000818 	.word	0x20000818
 8003ea8:	20000814 	.word	0x20000814
 8003eac:	20000cfc 	.word	0x20000cfc
 8003eb0:	20000cf8 	.word	0x20000cf8
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <xTaskGetTickCount+0x18>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ec4:	687b      	ldr	r3, [r7, #4]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000cec 	.word	0x20000cec

08003ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <xTaskIncrementTick+0x150>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 808e 	bne.w	8004004 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <xTaskIncrementTick+0x154>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ef0:	4a4d      	ldr	r2, [pc, #308]	; (8004028 <xTaskIncrementTick+0x154>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d120      	bne.n	8003f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <xTaskIncrementTick+0x158>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	603b      	str	r3, [r7, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <xTaskIncrementTick+0x46>
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <xTaskIncrementTick+0x158>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b43      	ldr	r3, [pc, #268]	; (8004030 <xTaskIncrementTick+0x15c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a41      	ldr	r2, [pc, #260]	; (800402c <xTaskIncrementTick+0x158>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4a41      	ldr	r2, [pc, #260]	; (8004030 <xTaskIncrementTick+0x15c>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <xTaskIncrementTick+0x160>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a3f      	ldr	r2, [pc, #252]	; (8004034 <xTaskIncrementTick+0x160>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	f000 fad3 	bl	80044e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <xTaskIncrementTick+0x164>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d34e      	bcc.n	8003fe6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f48:	4b38      	ldr	r3, [pc, #224]	; (800402c <xTaskIncrementTick+0x158>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <xTaskIncrementTick+0x82>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <xTaskIncrementTick+0x84>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <xTaskIncrementTick+0x164>)
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	601a      	str	r2, [r3, #0]
					break;
 8003f64:	e03f      	b.n	8003fe6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <xTaskIncrementTick+0x158>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d203      	bcs.n	8003f86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <xTaskIncrementTick+0x164>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]
						break;
 8003f84:	e02f      	b.n	8003fe6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fc82 	bl	8002894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fc79 	bl	8002894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <xTaskIncrementTick+0x168>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d903      	bls.n	8003fb6 <xTaskIncrementTick+0xe2>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a22      	ldr	r2, [pc, #136]	; (800403c <xTaskIncrementTick+0x168>)
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <xTaskIncrementTick+0x16c>)
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fc06 	bl	80027de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <xTaskIncrementTick+0x170>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3b3      	bcc.n	8003f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe4:	e7b0      	b.n	8003f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <xTaskIncrementTick+0x170>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	4914      	ldr	r1, [pc, #80]	; (8004040 <xTaskIncrementTick+0x16c>)
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d907      	bls.n	800400e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e004      	b.n	800400e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <xTaskIncrementTick+0x174>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <xTaskIncrementTick+0x174>)
 800400c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <xTaskIncrementTick+0x178>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800401a:	697b      	ldr	r3, [r7, #20]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000d10 	.word	0x20000d10
 8004028:	20000cec 	.word	0x20000cec
 800402c:	20000ca0 	.word	0x20000ca0
 8004030:	20000ca4 	.word	0x20000ca4
 8004034:	20000d00 	.word	0x20000d00
 8004038:	20000d08 	.word	0x20000d08
 800403c:	20000cf0 	.word	0x20000cf0
 8004040:	20000818 	.word	0x20000818
 8004044:	20000814 	.word	0x20000814
 8004048:	20000cf8 	.word	0x20000cf8
 800404c:	20000cfc 	.word	0x20000cfc

08004050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <vTaskSwitchContext+0xa4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <vTaskSwitchContext+0xa8>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004064:	e041      	b.n	80040ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <vTaskSwitchContext+0xa8>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <vTaskSwitchContext+0xac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e010      	b.n	8004096 <vTaskSwitchContext+0x46>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <vTaskSwitchContext+0x40>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vTaskSwitchContext+0x3e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	491a      	ldr	r1, [pc, #104]	; (8004100 <vTaskSwitchContext+0xb0>)
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0e4      	beq.n	8004074 <vTaskSwitchContext+0x24>
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <vTaskSwitchContext+0xb0>)
 80040b6:	4413      	add	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3308      	adds	r3, #8
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d104      	bne.n	80040da <vTaskSwitchContext+0x8a>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <vTaskSwitchContext+0xb4>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4a05      	ldr	r2, [pc, #20]	; (80040fc <vTaskSwitchContext+0xac>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6013      	str	r3, [r2, #0]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000d10 	.word	0x20000d10
 80040f8:	20000cfc 	.word	0x20000cfc
 80040fc:	20000cf0 	.word	0x20000cf0
 8004100:	20000818 	.word	0x20000818
 8004104:	20000814 	.word	0x20000814

08004108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <vTaskPlaceOnEventList+0x44>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3318      	adds	r3, #24
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe fb74 	bl	8002824 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800413c:	2101      	movs	r1, #1
 800413e:	6838      	ldr	r0, [r7, #0]
 8004140:	f000 fb88 	bl	8004854 <prvAddCurrentTaskToDelayedList>
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000814 	.word	0x20000814

08004150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	617b      	str	r3, [r7, #20]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3318      	adds	r3, #24
 800417e:	4619      	mov	r1, r3
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7fe fb2c 	bl	80027de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68b8      	ldr	r0, [r7, #8]
 8004196:	f000 fb5d 	bl	8004854 <prvAddCurrentTaskToDelayedList>
	}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000814 	.word	0x20000814

080041a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60fb      	str	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3318      	adds	r3, #24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fb5b 	bl	8002894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <xTaskRemoveFromEventList+0xb0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fb52 	bl	8002894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <xTaskRemoveFromEventList+0xb4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d903      	bls.n	8004204 <xTaskRemoveFromEventList+0x5c>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <xTaskRemoveFromEventList+0xb4>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a13      	ldr	r2, [pc, #76]	; (8004260 <xTaskRemoveFromEventList+0xb8>)
 8004212:	441a      	add	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f7fe fadf 	bl	80027de <vListInsertEnd>
 8004220:	e005      	b.n	800422e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3318      	adds	r3, #24
 8004226:	4619      	mov	r1, r3
 8004228:	480e      	ldr	r0, [pc, #56]	; (8004264 <xTaskRemoveFromEventList+0xbc>)
 800422a:	f7fe fad8 	bl	80027de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <xTaskRemoveFromEventList+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	429a      	cmp	r2, r3
 800423a:	d905      	bls.n	8004248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <xTaskRemoveFromEventList+0xc4>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e001      	b.n	800424c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800424c:	697b      	ldr	r3, [r7, #20]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000d10 	.word	0x20000d10
 800425c:	20000cf0 	.word	0x20000cf0
 8004260:	20000818 	.word	0x20000818
 8004264:	20000ca8 	.word	0x20000ca8
 8004268:	20000814 	.word	0x20000814
 800426c:	20000cfc 	.word	0x20000cfc

08004270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <vTaskInternalSetTimeOutState+0x24>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <vTaskInternalSetTimeOutState+0x28>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000d00 	.word	0x20000d00
 8004298:	20000cec 	.word	0x20000cec

0800429c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
}
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042de:	f000 ff0d 	bl	80050fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <xTaskCheckForTimeOut+0xbc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d102      	bne.n	8004302 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e023      	b.n	800434a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <xTaskCheckForTimeOut+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d007      	beq.n	800431e <xTaskCheckForTimeOut+0x82>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004318:	2301      	movs	r3, #1
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e015      	b.n	800434a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d20b      	bcs.n	8004340 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff9b 	bl	8004270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e004      	b.n	800434a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f000 ff07 	bl	800515c <vPortExitCritical>

	return xReturn;
 800434e:	69fb      	ldr	r3, [r7, #28]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000cec 	.word	0x20000cec
 800435c:	20000d00 	.word	0x20000d00

08004360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <vTaskMissedYield+0x14>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000cfc 	.word	0x20000cfc

08004378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004380:	f000 f852 	bl	8004428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <prvIdleTask+0x28>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d9f9      	bls.n	8004380 <prvIdleTask+0x8>
			{
				taskYIELD();
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <prvIdleTask+0x2c>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800439c:	e7f0      	b.n	8004380 <prvIdleTask+0x8>
 800439e:	bf00      	nop
 80043a0:	20000818 	.word	0x20000818
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	e00c      	b.n	80043ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <prvInitialiseTaskLists+0x60>)
 80043c0:	4413      	add	r3, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe f9e0 	bl	8002788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b37      	cmp	r3, #55	; 0x37
 80043d2:	d9ef      	bls.n	80043b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043d4:	480d      	ldr	r0, [pc, #52]	; (800440c <prvInitialiseTaskLists+0x64>)
 80043d6:	f7fe f9d7 	bl	8002788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <prvInitialiseTaskLists+0x68>)
 80043dc:	f7fe f9d4 	bl	8002788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043e0:	480c      	ldr	r0, [pc, #48]	; (8004414 <prvInitialiseTaskLists+0x6c>)
 80043e2:	f7fe f9d1 	bl	8002788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043e6:	480c      	ldr	r0, [pc, #48]	; (8004418 <prvInitialiseTaskLists+0x70>)
 80043e8:	f7fe f9ce 	bl	8002788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043ec:	480b      	ldr	r0, [pc, #44]	; (800441c <prvInitialiseTaskLists+0x74>)
 80043ee:	f7fe f9cb 	bl	8002788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <prvInitialiseTaskLists+0x78>)
 80043f4:	4a05      	ldr	r2, [pc, #20]	; (800440c <prvInitialiseTaskLists+0x64>)
 80043f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <prvInitialiseTaskLists+0x7c>)
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <prvInitialiseTaskLists+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000818 	.word	0x20000818
 800440c:	20000c78 	.word	0x20000c78
 8004410:	20000c8c 	.word	0x20000c8c
 8004414:	20000ca8 	.word	0x20000ca8
 8004418:	20000cbc 	.word	0x20000cbc
 800441c:	20000cd4 	.word	0x20000cd4
 8004420:	20000ca0 	.word	0x20000ca0
 8004424:	20000ca4 	.word	0x20000ca4

08004428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800442e:	e019      	b.n	8004464 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004430:	f000 fe64 	bl	80050fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004434:	4b10      	ldr	r3, [pc, #64]	; (8004478 <prvCheckTasksWaitingTermination+0x50>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe fa27 	bl	8002894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <prvCheckTasksWaitingTermination+0x54>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3b01      	subs	r3, #1
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <prvCheckTasksWaitingTermination+0x54>)
 800444e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <prvCheckTasksWaitingTermination+0x58>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3b01      	subs	r3, #1
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <prvCheckTasksWaitingTermination+0x58>)
 8004458:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800445a:	f000 fe7f 	bl	800515c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f810 	bl	8004484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <prvCheckTasksWaitingTermination+0x58>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e1      	bne.n	8004430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000cbc 	.word	0x20000cbc
 800447c:	20000ce8 	.word	0x20000ce8
 8004480:	20000cd0 	.word	0x20000cd0

08004484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fff2 	bl	8005484 <vPortFree>
				vPortFree( pxTCB );
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 ffef 	bl	8005484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044a6:	e018      	b.n	80044da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d103      	bne.n	80044ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ffe6 	bl	8005484 <vPortFree>
	}
 80044b8:	e00f      	b.n	80044da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d00a      	beq.n	80044da <prvDeleteTCB+0x56>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <prvDeleteTCB+0x54>
	}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ea:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvResetNextTaskUnblockTime+0x40>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <prvResetNextTaskUnblockTime+0x14>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <prvResetNextTaskUnblockTime+0x16>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <prvResetNextTaskUnblockTime+0x44>)
 8004500:	f04f 32ff 	mov.w	r2, #4294967295
 8004504:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004506:	e008      	b.n	800451a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <prvResetNextTaskUnblockTime+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvResetNextTaskUnblockTime+0x44>)
 8004518:	6013      	str	r3, [r2, #0]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	20000ca0 	.word	0x20000ca0
 8004528:	20000d08 	.word	0x20000d08

0800452c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <xTaskGetSchedulerState+0x34>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800453a:	2301      	movs	r3, #1
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	e008      	b.n	8004552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <xTaskGetSchedulerState+0x38>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004548:	2302      	movs	r3, #2
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	e001      	b.n	8004552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004552:	687b      	ldr	r3, [r7, #4]
	}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000cf4 	.word	0x20000cf4
 8004564:	20000d10 	.word	0x20000d10

08004568 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d056      	beq.n	800462c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004582:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <xTaskPriorityInherit+0xd0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	429a      	cmp	r2, r3
 800458a:	d246      	bcs.n	800461a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db06      	blt.n	80045a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004594:	4b28      	ldr	r3, [pc, #160]	; (8004638 <xTaskPriorityInherit+0xd0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6959      	ldr	r1, [r3, #20]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <xTaskPriorityInherit+0xd4>)
 80045b4:	4413      	add	r3, r2
 80045b6:	4299      	cmp	r1, r3
 80045b8:	d101      	bne.n	80045be <xTaskPriorityInherit+0x56>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xTaskPriorityInherit+0x58>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe f963 	bl	8002894 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <xTaskPriorityInherit+0xd0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <xTaskPriorityInherit+0xd8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d903      	bls.n	80045ec <xTaskPriorityInherit+0x84>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <xTaskPriorityInherit+0xd8>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a10      	ldr	r2, [pc, #64]	; (800463c <xTaskPriorityInherit+0xd4>)
 80045fa:	441a      	add	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe f8eb 	bl	80027de <vListInsertEnd>
 8004608:	e004      	b.n	8004614 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <xTaskPriorityInherit+0xd0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e008      	b.n	800462c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <xTaskPriorityInherit+0xd0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	429a      	cmp	r2, r3
 8004626:	d201      	bcs.n	800462c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800462c:	68fb      	ldr	r3, [r7, #12]
	}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000814 	.word	0x20000814
 800463c:	20000818 	.word	0x20000818
 8004640:	20000cf0 	.word	0x20000cf0

08004644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d056      	beq.n	8004708 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <xTaskPriorityDisinherit+0xd0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d00a      	beq.n	800467a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60bb      	str	r3, [r7, #8]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	1e5a      	subs	r2, r3, #1
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d02c      	beq.n	8004708 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d128      	bne.n	8004708 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f8ea 	bl	8002894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <xTaskPriorityDisinherit+0xd4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d903      	bls.n	80046e8 <xTaskPriorityDisinherit+0xa4>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <xTaskPriorityDisinherit+0xd4>)
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4a09      	ldr	r2, [pc, #36]	; (800471c <xTaskPriorityDisinherit+0xd8>)
 80046f6:	441a      	add	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe f86d 	bl	80027de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004708:	697b      	ldr	r3, [r7, #20]
	}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000814 	.word	0x20000814
 8004718:	20000cf0 	.word	0x20000cf0
 800471c:	20000818 	.word	0x20000818

08004720 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800472e:	2301      	movs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d06f      	beq.n	8004818 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e002      	b.n	800476c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	429a      	cmp	r2, r3
 8004774:	d050      	beq.n	8004818 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d14b      	bne.n	8004818 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d10a      	bne.n	80047a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db04      	blt.n	80047be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	6959      	ldr	r1, [r3, #20]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047ce:	4413      	add	r3, r2
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d101      	bne.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <vTaskPriorityDisinheritAfterTimeout+0xba>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01c      	beq.n	8004818 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f856 	bl	8002894 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d903      	bls.n	80047fc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800480a:	441a      	add	r2, r3
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fd ffe3 	bl	80027de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004818:	bf00      	nop
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000814 	.word	0x20000814
 8004824:	20000818 	.word	0x20000818
 8004828:	20000cf0 	.word	0x20000cf0

0800482c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pvTaskIncrementMutexHeldCount+0x24>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <pvTaskIncrementMutexHeldCount+0x24>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483e:	3201      	adds	r2, #1
 8004840:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <pvTaskIncrementMutexHeldCount+0x24>)
 8004844:	681b      	ldr	r3, [r3, #0]
	}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000814 	.word	0x20000814

08004854 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800485e:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3304      	adds	r3, #4
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe f812 	bl	8002894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d10a      	bne.n	800488e <prvAddCurrentTaskToDelayedList+0x3a>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4819      	ldr	r0, [pc, #100]	; (80048ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004888:	f7fd ffa9 	bl	80027de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800488c:	e026      	b.n	80048dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d209      	bcs.n	80048ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fd ffb6 	bl	8002824 <vListInsert>
}
 80048b8:	e010      	b.n	80048dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f7fd ffac 	bl	8002824 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d202      	bcs.n	80048dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6013      	str	r3, [r2, #0]
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000cec 	.word	0x20000cec
 80048e8:	20000814 	.word	0x20000814
 80048ec:	20000cd4 	.word	0x20000cd4
 80048f0:	20000ca4 	.word	0x20000ca4
 80048f4:	20000ca0 	.word	0x20000ca0
 80048f8:	20000d08 	.word	0x20000d08

080048fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004906:	f000 facb 	bl	8004ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800490a:	4b1c      	ldr	r3, [pc, #112]	; (800497c <xTimerCreateTimerTask+0x80>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d021      	beq.n	8004956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800491a:	1d3a      	adds	r2, r7, #4
 800491c:	f107 0108 	add.w	r1, r7, #8
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	4618      	mov	r0, r3
 8004926:	f7fd ff15 	bl	8002754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	9202      	str	r2, [sp, #8]
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	2302      	movs	r3, #2
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2300      	movs	r3, #0
 800493a:	460a      	mov	r2, r1
 800493c:	4910      	ldr	r1, [pc, #64]	; (8004980 <xTimerCreateTimerTask+0x84>)
 800493e:	4811      	ldr	r0, [pc, #68]	; (8004984 <xTimerCreateTimerTask+0x88>)
 8004940:	f7fe ffdc 	bl	80038fc <xTaskCreateStatic>
 8004944:	4603      	mov	r3, r0
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <xTimerCreateTimerTask+0x8c>)
 8004948:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <xTimerCreateTimerTask+0x8c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	613b      	str	r3, [r7, #16]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004972:	697b      	ldr	r3, [r7, #20]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000d44 	.word	0x20000d44
 8004980:	080060c4 	.word	0x080060c4
 8004984:	08004aa9 	.word	0x08004aa9
 8004988:	20000d48 	.word	0x20000d48

0800498c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <xTimerGenericCommand+0x98>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02a      	beq.n	8004a18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	dc18      	bgt.n	8004a06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049d4:	f7ff fdaa 	bl	800452c <xTaskGetSchedulerState>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d109      	bne.n	80049f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xTimerGenericCommand+0x98>)
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	f107 0110 	add.w	r1, r7, #16
 80049e6:	2300      	movs	r3, #0
 80049e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ea:	f7fe f927 	bl	8002c3c <xQueueGenericSend>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24
 80049f0:	e012      	b.n	8004a18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <xTimerGenericCommand+0x98>)
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f107 0110 	add.w	r1, r7, #16
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	f7fe f91d 	bl	8002c3c <xQueueGenericSend>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24
 8004a04:	e008      	b.n	8004a18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <xTimerGenericCommand+0x98>)
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	f107 0110 	add.w	r1, r7, #16
 8004a0e:	2300      	movs	r3, #0
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	f7fe fa11 	bl	8002e38 <xQueueGenericSendFromISR>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000d44 	.word	0x20000d44

08004a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <prvProcessExpiredTimer+0x7c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd ff27 	bl	8002894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d122      	bne.n	8004a94 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	18d1      	adds	r1, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f000 f8c8 	bl	8004bf0 <prvInsertTimerInActiveList>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a66:	2300      	movs	r3, #0
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	2100      	movs	r1, #0
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f7ff ff8b 	bl	800498c <xTimerGenericCommand>
 8004a76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60fb      	str	r3, [r7, #12]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	4798      	blx	r3
}
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000d3c 	.word	0x20000d3c

08004aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ab0:	f107 0308 	add.w	r3, r7, #8
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f857 	bl	8004b68 <prvGetNextExpireTime>
 8004aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f803 	bl	8004acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ac6:	f000 f8d5 	bl	8004c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aca:	e7f1      	b.n	8004ab0 <prvTimerTask+0x8>

08004acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ad6:	f7ff f943 	bl	8003d60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ada:	f107 0308 	add.w	r3, r7, #8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f866 	bl	8004bb0 <prvSampleTimeNow>
 8004ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d130      	bne.n	8004b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <prvProcessTimerOrBlockTask+0x3c>
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d806      	bhi.n	8004b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004afa:	f7ff f93f 	bl	8003d7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff91 	bl	8004a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b06:	e024      	b.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <prvProcessTimerOrBlockTask+0x90>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <prvProcessTimerOrBlockTask+0x94>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fe feb1 	bl	8003894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b32:	f7ff f923 	bl	8003d7c <xTaskResumeAll>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <prvProcessTimerOrBlockTask+0x98>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
}
 8004b4c:	e001      	b.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b4e:	f7ff f915 	bl	8003d7c <xTaskResumeAll>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000d40 	.word	0x20000d40
 8004b60:	20000d44 	.word	0x20000d44
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <prvGetNextExpireTime+0x44>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <prvGetNextExpireTime+0x44>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e001      	b.n	8004b9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000d3c 	.word	0x20000d3c

08004bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bb8:	f7ff f97e 	bl	8003eb8 <xTaskGetTickCount>
 8004bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvSampleTimeNow+0x3c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d205      	bcs.n	8004bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bc8:	f000 f908 	bl	8004ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <prvSampleTimeNow+0x3c>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000d4c 	.word	0x20000d4c

08004bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d812      	bhi.n	8004c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d302      	bcc.n	8004c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e01b      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <prvInsertTimerInActiveList+0x7c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fd fdf5 	bl	8002824 <vListInsert>
 8004c3a:	e012      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d206      	bcs.n	8004c52 <prvInsertTimerInActiveList+0x62>
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e007      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <prvInsertTimerInActiveList+0x80>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fd fde1 	bl	8002824 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c62:	697b      	ldr	r3, [r7, #20]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000d40 	.word	0x20000d40
 8004c70:	20000d3c 	.word	0x20000d3c

08004c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08e      	sub	sp, #56	; 0x38
 8004c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c7a:	e09d      	b.n	8004db8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da18      	bge.n	8004cb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	3304      	adds	r3, #4
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	61fb      	str	r3, [r7, #28]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004caa:	6850      	ldr	r0, [r2, #4]
 8004cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	db7d      	blt.n	8004db6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd fde2 	bl	8002894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff6c 	bl	8004bb0 <prvSampleTimeNow>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	d86b      	bhi.n	8004db8 <prvProcessReceivedCommands+0x144>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <prvProcessReceivedCommands+0x74>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d11 	.word	0x08004d11
 8004cf4:	08004db9 	.word	0x08004db9
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004da5 	.word	0x08004da5
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d11 	.word	0x08004d11
 8004d08:	08004db9 	.word	0x08004db9
 8004d0c:	08004d6d 	.word	0x08004d6d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	18d1      	adds	r1, r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d1e:	f7ff ff67 	bl	8004bf0 <prvInsertTimerInActiveList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d047      	beq.n	8004db8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d13f      	bne.n	8004db8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	441a      	add	r2, r3
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2300      	movs	r3, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4a:	f7ff fe1f 	bl	800498c <xTimerGenericCommand>
 8004d4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d130      	bne.n	8004db8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	61bb      	str	r3, [r7, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	617b      	str	r3, [r7, #20]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	18d1      	adds	r1, r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9e:	f7ff ff27 	bl	8004bf0 <prvInsertTimerInActiveList>
					break;
 8004da2:	e009      	b.n	8004db8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db0:	f000 fb68 	bl	8005484 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004db4:	e000      	b.n	8004db8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004db6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <prvProcessReceivedCommands+0x164>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1d39      	adds	r1, r7, #4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe f95f 	bl	8003084 <xQueueReceive>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f47f af57 	bne.w	8004c7c <prvProcessReceivedCommands+0x8>
	}
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	3730      	adds	r7, #48	; 0x30
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000d44 	.word	0x20000d44

08004ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004de2:	e045      	b.n	8004e70 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fd fd49 	bl	8002894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d12e      	bne.n	8004e70 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d90e      	bls.n	8004e42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fd fcf2 	bl	8002824 <vListInsert>
 8004e40:	e016      	b.n	8004e70 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fd9d 	bl	800498c <xTimerGenericCommand>
 8004e52:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1b4      	bne.n	8004de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvSwitchTimerLists+0xbc>)
 8004e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e88:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6013      	str	r3, [r2, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000d3c 	.word	0x20000d3c
 8004e9c:	20000d40 	.word	0x20000d40

08004ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ea6:	f000 f929 	bl	80050fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d120      	bne.n	8004ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eb2:	4814      	ldr	r0, [pc, #80]	; (8004f04 <prvCheckForValidListAndQueue+0x64>)
 8004eb4:	f7fd fc68 	bl	8002788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eb8:	4813      	ldr	r0, [pc, #76]	; (8004f08 <prvCheckForValidListAndQueue+0x68>)
 8004eba:	f7fd fc65 	bl	8002788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <prvCheckForValidListAndQueue+0x6c>)
 8004ec0:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <prvCheckForValidListAndQueue+0x64>)
 8004ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <prvCheckForValidListAndQueue+0x70>)
 8004ec6:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <prvCheckForValidListAndQueue+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <prvCheckForValidListAndQueue+0x74>)
 8004ed0:	4a11      	ldr	r2, [pc, #68]	; (8004f18 <prvCheckForValidListAndQueue+0x78>)
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	200a      	movs	r0, #10
 8004ed6:	f7fd fd6f 	bl	80029b8 <xQueueGenericCreateStatic>
 8004eda:	4603      	mov	r3, r0
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	490b      	ldr	r1, [pc, #44]	; (8004f1c <prvCheckForValidListAndQueue+0x7c>)
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fc7e 	bl	80037f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef4:	f000 f932 	bl	800515c <vPortExitCritical>
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000d44 	.word	0x20000d44
 8004f04:	20000d14 	.word	0x20000d14
 8004f08:	20000d28 	.word	0x20000d28
 8004f0c:	20000d3c 	.word	0x20000d3c
 8004f10:	20000d40 	.word	0x20000d40
 8004f14:	20000df0 	.word	0x20000df0
 8004f18:	20000d50 	.word	0x20000d50
 8004f1c:	080060cc 	.word	0x080060cc

08004f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f50:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <pxPortInitialiseStack+0x54>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b14      	subs	r3, #20
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b20      	subs	r3, #32
 8004f66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f68:	68fb      	ldr	r3, [r7, #12]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	08004f79 	.word	0x08004f79

08004f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <prvTaskExitError+0x54>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d00a      	beq.n	8004fa2 <prvTaskExitError+0x2a>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <prvTaskExitError+0x28>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
}
 8004fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fb6:	bf00      	nop
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0fc      	beq.n	8004fb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	2000001c 	.word	0x2000001c

08004fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6808      	ldr	r0, [r1, #0]
 8004fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fda:	f380 8809 	msr	PSP, r0
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8811 	msr	BASEPRI, r0
 8004fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fee:	4770      	bx	lr

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <prvPortStartFirstTask+0x1c>)
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f380 8808 	msr	MSP, r0
 8005002:	b662      	cpsie	i
 8005004:	b661      	cpsie	f
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	df00      	svc	0
 8005010:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005012:	bf00      	nop
 8005014:	e000ed08 	.word	0xe000ed08

08005018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <xPortStartScheduler+0xd0>)
 8005020:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <xPortStartScheduler+0xd4>)
 8005044:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005048:	2207      	movs	r2, #7
 800504a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504c:	e009      	b.n	8005062 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005056:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d0ef      	beq.n	800504e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00a      	beq.n	8005090 <xPortStartScheduler+0x78>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60bb      	str	r3, [r7, #8]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <xPortStartScheduler+0xd8>)
 8005098:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <xPortStartScheduler+0xd8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <xPortStartScheduler+0xd8>)
 80050a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <xPortStartScheduler+0xdc>)
 80050c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050c6:	f000 f8b9 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <xPortStartScheduler+0xe0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050d0:	f7ff ff92 	bl	8004ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050d4:	f7fe ffbc 	bl	8004050 <vTaskSwitchContext>
	prvTaskExitError();
 80050d8:	f7ff ff4e 	bl	8004f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	e000e400 	.word	0xe000e400
 80050ec:	20000e40 	.word	0x20000e40
 80050f0:	20000e44 	.word	0x20000e44
 80050f4:	e000ed20 	.word	0xe000ed20
 80050f8:	2000001c 	.word	0x2000001c

080050fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <vPortEnterCritical+0x58>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <vPortEnterCritical+0x58>)
 800511e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <vPortEnterCritical+0x58>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10f      	bne.n	8005148 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <vPortEnterCritical+0x5c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <vPortEnterCritical+0x4c>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	603b      	str	r3, [r7, #0]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vPortEnterCritical+0x4a>
	}
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	2000001c 	.word	0x2000001c
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <vPortExitCritical+0x4c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <vPortExitCritical+0x24>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	607b      	str	r3, [r7, #4]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <vPortExitCritical+0x4c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3b01      	subs	r3, #1
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <vPortExitCritical+0x4c>)
 8005188:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <vPortExitCritical+0x4c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <vPortExitCritical+0x42>
 8005192:	2300      	movs	r3, #0
 8005194:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f383 8811 	msr	BASEPRI, r3
}
 800519c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	2000001c 	.word	0x2000001c
 80051ac:	00000000 	.word	0x00000000

080051b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051b0:	f3ef 8009 	mrs	r0, PSP
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <pxCurrentTCBConst>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051c0:	6010      	str	r0, [r2, #0]
 80051c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051ca:	f380 8811 	msr	BASEPRI, r0
 80051ce:	f7fe ff3f 	bl	8004050 <vTaskSwitchContext>
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	6808      	ldr	r0, [r1, #0]
 80051e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051e6:	f380 8809 	msr	PSP, r0
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	4770      	bx	lr

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7fe fe5f 	bl	8003ed4 <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <xPortSysTickHandler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <vPortSetupTimerInterrupt+0x30>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a09      	ldr	r2, [pc, #36]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <vPortSetupTimerInterrupt+0x30>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	e000e010 	.word	0xe000e010
 8005270:	e000e018 	.word	0xe000e018
 8005274:	20000010 	.word	0x20000010
 8005278:	10624dd3 	.word	0x10624dd3
 800527c:	e000e014 	.word	0xe000e014

08005280 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005286:	f3ef 8305 	mrs	r3, IPSR
 800528a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d914      	bls.n	80052bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <vPortValidateInterruptPriority+0x6c>)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <vPortValidateInterruptPriority+0x70>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	7afa      	ldrb	r2, [r7, #11]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d20a      	bcs.n	80052bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	607b      	str	r3, [r7, #4]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <vPortValidateInterruptPriority+0x74>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <vPortValidateInterruptPriority+0x78>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d90a      	bls.n	80052e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	603b      	str	r3, [r7, #0]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <vPortValidateInterruptPriority+0x60>
	}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	e000e3f0 	.word	0xe000e3f0
 80052f0:	20000e40 	.word	0x20000e40
 80052f4:	e000ed0c 	.word	0xe000ed0c
 80052f8:	20000e44 	.word	0x20000e44

080052fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005308:	f7fe fd2a 	bl	8003d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800530c:	4b58      	ldr	r3, [pc, #352]	; (8005470 <pvPortMalloc+0x174>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005314:	f000 f910 	bl	8005538 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005318:	4b56      	ldr	r3, [pc, #344]	; (8005474 <pvPortMalloc+0x178>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 808e 	bne.w	8005442 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01d      	beq.n	8005368 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800532c:	2208      	movs	r2, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d014      	beq.n	8005368 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f023 0307 	bic.w	r3, r3, #7
 8005344:	3308      	adds	r3, #8
 8005346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <pvPortMalloc+0x6c>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d069      	beq.n	8005442 <pvPortMalloc+0x146>
 800536e:	4b42      	ldr	r3, [pc, #264]	; (8005478 <pvPortMalloc+0x17c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d864      	bhi.n	8005442 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005378:	4b40      	ldr	r3, [pc, #256]	; (800547c <pvPortMalloc+0x180>)
 800537a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800537c:	4b3f      	ldr	r3, [pc, #252]	; (800547c <pvPortMalloc+0x180>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005382:	e004      	b.n	800538e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d903      	bls.n	80053a0 <pvPortMalloc+0xa4>
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <pvPortMalloc+0x174>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d04b      	beq.n	8005442 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2208      	movs	r2, #8
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	2308      	movs	r3, #8
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d91f      	bls.n	800540c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <pvPortMalloc+0xf8>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	613b      	str	r3, [r7, #16]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005406:	69b8      	ldr	r0, [r7, #24]
 8005408:	f000 f8f8 	bl	80055fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <pvPortMalloc+0x17c>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <pvPortMalloc+0x17c>)
 8005418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <pvPortMalloc+0x17c>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <pvPortMalloc+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d203      	bcs.n	800542e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <pvPortMalloc+0x17c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a15      	ldr	r2, [pc, #84]	; (8005480 <pvPortMalloc+0x184>)
 800542c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <pvPortMalloc+0x178>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	431a      	orrs	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005442:	f7fe fc9b 	bl	8003d7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <pvPortMalloc+0x16a>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <pvPortMalloc+0x168>
	return pvReturn;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20001a50 	.word	0x20001a50
 8005474:	20001a5c 	.word	0x20001a5c
 8005478:	20001a54 	.word	0x20001a54
 800547c:	20001a48 	.word	0x20001a48
 8005480:	20001a58 	.word	0x20001a58

08005484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d048      	beq.n	8005528 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005496:	2308      	movs	r3, #8
 8005498:	425b      	negs	r3, r3
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <vPortFree+0xac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <vPortFree+0x44>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60fb      	str	r3, [r7, #12]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <vPortFree+0x62>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <vPortFree+0xac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d115      	bne.n	8005528 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortFree+0xac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800550c:	f7fe fc28 	bl	8003d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <vPortFree+0xb0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4413      	add	r3, r2
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <vPortFree+0xb0>)
 800551c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f000 f86c 	bl	80055fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005524:	f7fe fc2a 	bl	8003d7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20001a5c 	.word	0x20001a5c
 8005534:	20001a54 	.word	0x20001a54

08005538 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800553e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <prvHeapInit+0xac>)
 8005546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3307      	adds	r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <prvHeapInit+0xac>)
 8005568:	4413      	add	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <prvHeapInit+0xb0>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005576:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <prvHeapInit+0xb0>)
 8005578:	2200      	movs	r2, #0
 800557a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005584:	2208      	movs	r2, #8
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <prvHeapInit+0xb4>)
 8005598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800559a:	4b14      	ldr	r3, [pc, #80]	; (80055ec <prvHeapInit+0xb4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <prvHeapInit+0xb4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <prvHeapInit+0xb4>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <prvHeapInit+0xb8>)
 80055c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <prvHeapInit+0xbc>)
 80055ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <prvHeapInit+0xc0>)
 80055d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055d6:	601a      	str	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000e48 	.word	0x20000e48
 80055e8:	20001a48 	.word	0x20001a48
 80055ec:	20001a50 	.word	0x20001a50
 80055f0:	20001a58 	.word	0x20001a58
 80055f4:	20001a54 	.word	0x20001a54
 80055f8:	20001a5c 	.word	0x20001a5c

080055fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e002      	b.n	8005610 <prvInsertBlockIntoFreeList+0x14>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d8f7      	bhi.n	800560a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d118      	bne.n	8005684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d00d      	beq.n	800567a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e008      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e003      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d002      	beq.n	800569a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	20001a48 	.word	0x20001a48
 80056a8:	20001a50 	.word	0x20001a50

080056ac <__errno>:
 80056ac:	4b01      	ldr	r3, [pc, #4]	; (80056b4 <__errno+0x8>)
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000020 	.word	0x20000020

080056b8 <__libc_init_array>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	2600      	movs	r6, #0
 80056bc:	4d0c      	ldr	r5, [pc, #48]	; (80056f0 <__libc_init_array+0x38>)
 80056be:	4c0d      	ldr	r4, [pc, #52]	; (80056f4 <__libc_init_array+0x3c>)
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	42a6      	cmp	r6, r4
 80056c6:	d109      	bne.n	80056dc <__libc_init_array+0x24>
 80056c8:	f000 fc9c 	bl	8006004 <_init>
 80056cc:	2600      	movs	r6, #0
 80056ce:	4d0a      	ldr	r5, [pc, #40]	; (80056f8 <__libc_init_array+0x40>)
 80056d0:	4c0a      	ldr	r4, [pc, #40]	; (80056fc <__libc_init_array+0x44>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	42a6      	cmp	r6, r4
 80056d8:	d105      	bne.n	80056e6 <__libc_init_array+0x2e>
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e0:	4798      	blx	r3
 80056e2:	3601      	adds	r6, #1
 80056e4:	e7ee      	b.n	80056c4 <__libc_init_array+0xc>
 80056e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ea:	4798      	blx	r3
 80056ec:	3601      	adds	r6, #1
 80056ee:	e7f2      	b.n	80056d6 <__libc_init_array+0x1e>
 80056f0:	080061c0 	.word	0x080061c0
 80056f4:	080061c0 	.word	0x080061c0
 80056f8:	080061c0 	.word	0x080061c0
 80056fc:	080061c4 	.word	0x080061c4

08005700 <memcpy>:
 8005700:	440a      	add	r2, r1
 8005702:	4291      	cmp	r1, r2
 8005704:	f100 33ff 	add.w	r3, r0, #4294967295
 8005708:	d100      	bne.n	800570c <memcpy+0xc>
 800570a:	4770      	bx	lr
 800570c:	b510      	push	{r4, lr}
 800570e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005712:	4291      	cmp	r1, r2
 8005714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005718:	d1f9      	bne.n	800570e <memcpy+0xe>
 800571a:	bd10      	pop	{r4, pc}

0800571c <memset>:
 800571c:	4603      	mov	r3, r0
 800571e:	4402      	add	r2, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <siprintf>:
 800572c:	b40e      	push	{r1, r2, r3}
 800572e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005732:	b500      	push	{lr}
 8005734:	b09c      	sub	sp, #112	; 0x70
 8005736:	ab1d      	add	r3, sp, #116	; 0x74
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9006      	str	r0, [sp, #24]
 800573c:	9107      	str	r1, [sp, #28]
 800573e:	9104      	str	r1, [sp, #16]
 8005740:	4808      	ldr	r0, [pc, #32]	; (8005764 <siprintf+0x38>)
 8005742:	4909      	ldr	r1, [pc, #36]	; (8005768 <siprintf+0x3c>)
 8005744:	f853 2b04 	ldr.w	r2, [r3], #4
 8005748:	9105      	str	r1, [sp, #20]
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	a902      	add	r1, sp, #8
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	f000 f868 	bl	8005824 <_svfiprintf_r>
 8005754:	2200      	movs	r2, #0
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	b01c      	add	sp, #112	; 0x70
 800575c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005760:	b003      	add	sp, #12
 8005762:	4770      	bx	lr
 8005764:	20000020 	.word	0x20000020
 8005768:	ffff0208 	.word	0xffff0208

0800576c <__ssputs_r>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	688e      	ldr	r6, [r1, #8]
 8005772:	4682      	mov	sl, r0
 8005774:	429e      	cmp	r6, r3
 8005776:	460c      	mov	r4, r1
 8005778:	4690      	mov	r8, r2
 800577a:	461f      	mov	r7, r3
 800577c:	d838      	bhi.n	80057f0 <__ssputs_r+0x84>
 800577e:	898a      	ldrh	r2, [r1, #12]
 8005780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005784:	d032      	beq.n	80057ec <__ssputs_r+0x80>
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	6909      	ldr	r1, [r1, #16]
 800578a:	3301      	adds	r3, #1
 800578c:	eba5 0901 	sub.w	r9, r5, r1
 8005790:	6965      	ldr	r5, [r4, #20]
 8005792:	444b      	add	r3, r9
 8005794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800579c:	106d      	asrs	r5, r5, #1
 800579e:	429d      	cmp	r5, r3
 80057a0:	bf38      	it	cc
 80057a2:	461d      	movcc	r5, r3
 80057a4:	0553      	lsls	r3, r2, #21
 80057a6:	d531      	bpl.n	800580c <__ssputs_r+0xa0>
 80057a8:	4629      	mov	r1, r5
 80057aa:	f000 fb61 	bl	8005e70 <_malloc_r>
 80057ae:	4606      	mov	r6, r0
 80057b0:	b950      	cbnz	r0, 80057c8 <__ssputs_r+0x5c>
 80057b2:	230c      	movs	r3, #12
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	f8ca 3000 	str.w	r3, [sl]
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	464a      	mov	r2, r9
 80057ca:	6921      	ldr	r1, [r4, #16]
 80057cc:	f7ff ff98 	bl	8005700 <memcpy>
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	6126      	str	r6, [r4, #16]
 80057de:	444e      	add	r6, r9
 80057e0:	6026      	str	r6, [r4, #0]
 80057e2:	463e      	mov	r6, r7
 80057e4:	6165      	str	r5, [r4, #20]
 80057e6:	eba5 0509 	sub.w	r5, r5, r9
 80057ea:	60a5      	str	r5, [r4, #8]
 80057ec:	42be      	cmp	r6, r7
 80057ee:	d900      	bls.n	80057f2 <__ssputs_r+0x86>
 80057f0:	463e      	mov	r6, r7
 80057f2:	4632      	mov	r2, r6
 80057f4:	4641      	mov	r1, r8
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	f000 fab8 	bl	8005d6c <memmove>
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	2000      	movs	r0, #0
 8005800:	1b9b      	subs	r3, r3, r6
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	4433      	add	r3, r6
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	e7db      	b.n	80057c4 <__ssputs_r+0x58>
 800580c:	462a      	mov	r2, r5
 800580e:	f000 fba3 	bl	8005f58 <_realloc_r>
 8005812:	4606      	mov	r6, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d1e1      	bne.n	80057dc <__ssputs_r+0x70>
 8005818:	4650      	mov	r0, sl
 800581a:	6921      	ldr	r1, [r4, #16]
 800581c:	f000 fac0 	bl	8005da0 <_free_r>
 8005820:	e7c7      	b.n	80057b2 <__ssputs_r+0x46>
	...

08005824 <_svfiprintf_r>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	4698      	mov	r8, r3
 800582a:	898b      	ldrh	r3, [r1, #12]
 800582c:	4607      	mov	r7, r0
 800582e:	061b      	lsls	r3, r3, #24
 8005830:	460d      	mov	r5, r1
 8005832:	4614      	mov	r4, r2
 8005834:	b09d      	sub	sp, #116	; 0x74
 8005836:	d50e      	bpl.n	8005856 <_svfiprintf_r+0x32>
 8005838:	690b      	ldr	r3, [r1, #16]
 800583a:	b963      	cbnz	r3, 8005856 <_svfiprintf_r+0x32>
 800583c:	2140      	movs	r1, #64	; 0x40
 800583e:	f000 fb17 	bl	8005e70 <_malloc_r>
 8005842:	6028      	str	r0, [r5, #0]
 8005844:	6128      	str	r0, [r5, #16]
 8005846:	b920      	cbnz	r0, 8005852 <_svfiprintf_r+0x2e>
 8005848:	230c      	movs	r3, #12
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	e0d1      	b.n	80059f6 <_svfiprintf_r+0x1d2>
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	616b      	str	r3, [r5, #20]
 8005856:	2300      	movs	r3, #0
 8005858:	9309      	str	r3, [sp, #36]	; 0x24
 800585a:	2320      	movs	r3, #32
 800585c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005860:	2330      	movs	r3, #48	; 0x30
 8005862:	f04f 0901 	mov.w	r9, #1
 8005866:	f8cd 800c 	str.w	r8, [sp, #12]
 800586a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a10 <_svfiprintf_r+0x1ec>
 800586e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005872:	4623      	mov	r3, r4
 8005874:	469a      	mov	sl, r3
 8005876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800587a:	b10a      	cbz	r2, 8005880 <_svfiprintf_r+0x5c>
 800587c:	2a25      	cmp	r2, #37	; 0x25
 800587e:	d1f9      	bne.n	8005874 <_svfiprintf_r+0x50>
 8005880:	ebba 0b04 	subs.w	fp, sl, r4
 8005884:	d00b      	beq.n	800589e <_svfiprintf_r+0x7a>
 8005886:	465b      	mov	r3, fp
 8005888:	4622      	mov	r2, r4
 800588a:	4629      	mov	r1, r5
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ff6d 	bl	800576c <__ssputs_r>
 8005892:	3001      	adds	r0, #1
 8005894:	f000 80aa 	beq.w	80059ec <_svfiprintf_r+0x1c8>
 8005898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800589a:	445a      	add	r2, fp
 800589c:	9209      	str	r2, [sp, #36]	; 0x24
 800589e:	f89a 3000 	ldrb.w	r3, [sl]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a2 	beq.w	80059ec <_svfiprintf_r+0x1c8>
 80058a8:	2300      	movs	r3, #0
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b2:	f10a 0a01 	add.w	sl, sl, #1
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	9307      	str	r3, [sp, #28]
 80058ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058be:	931a      	str	r3, [sp, #104]	; 0x68
 80058c0:	4654      	mov	r4, sl
 80058c2:	2205      	movs	r2, #5
 80058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c8:	4851      	ldr	r0, [pc, #324]	; (8005a10 <_svfiprintf_r+0x1ec>)
 80058ca:	f000 fa41 	bl	8005d50 <memchr>
 80058ce:	9a04      	ldr	r2, [sp, #16]
 80058d0:	b9d8      	cbnz	r0, 800590a <_svfiprintf_r+0xe6>
 80058d2:	06d0      	lsls	r0, r2, #27
 80058d4:	bf44      	itt	mi
 80058d6:	2320      	movmi	r3, #32
 80058d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058dc:	0711      	lsls	r1, r2, #28
 80058de:	bf44      	itt	mi
 80058e0:	232b      	movmi	r3, #43	; 0x2b
 80058e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ea:	2b2a      	cmp	r3, #42	; 0x2a
 80058ec:	d015      	beq.n	800591a <_svfiprintf_r+0xf6>
 80058ee:	4654      	mov	r4, sl
 80058f0:	2000      	movs	r0, #0
 80058f2:	f04f 0c0a 	mov.w	ip, #10
 80058f6:	9a07      	ldr	r2, [sp, #28]
 80058f8:	4621      	mov	r1, r4
 80058fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fe:	3b30      	subs	r3, #48	; 0x30
 8005900:	2b09      	cmp	r3, #9
 8005902:	d94e      	bls.n	80059a2 <_svfiprintf_r+0x17e>
 8005904:	b1b0      	cbz	r0, 8005934 <_svfiprintf_r+0x110>
 8005906:	9207      	str	r2, [sp, #28]
 8005908:	e014      	b.n	8005934 <_svfiprintf_r+0x110>
 800590a:	eba0 0308 	sub.w	r3, r0, r8
 800590e:	fa09 f303 	lsl.w	r3, r9, r3
 8005912:	4313      	orrs	r3, r2
 8005914:	46a2      	mov	sl, r4
 8005916:	9304      	str	r3, [sp, #16]
 8005918:	e7d2      	b.n	80058c0 <_svfiprintf_r+0x9c>
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	1d19      	adds	r1, r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	9103      	str	r1, [sp, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfbb      	ittet	lt
 8005926:	425b      	neglt	r3, r3
 8005928:	f042 0202 	orrlt.w	r2, r2, #2
 800592c:	9307      	strge	r3, [sp, #28]
 800592e:	9307      	strlt	r3, [sp, #28]
 8005930:	bfb8      	it	lt
 8005932:	9204      	strlt	r2, [sp, #16]
 8005934:	7823      	ldrb	r3, [r4, #0]
 8005936:	2b2e      	cmp	r3, #46	; 0x2e
 8005938:	d10c      	bne.n	8005954 <_svfiprintf_r+0x130>
 800593a:	7863      	ldrb	r3, [r4, #1]
 800593c:	2b2a      	cmp	r3, #42	; 0x2a
 800593e:	d135      	bne.n	80059ac <_svfiprintf_r+0x188>
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	3402      	adds	r4, #2
 8005944:	1d1a      	adds	r2, r3, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	9203      	str	r2, [sp, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	bfb8      	it	lt
 800594e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005952:	9305      	str	r3, [sp, #20]
 8005954:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a14 <_svfiprintf_r+0x1f0>
 8005958:	2203      	movs	r2, #3
 800595a:	4650      	mov	r0, sl
 800595c:	7821      	ldrb	r1, [r4, #0]
 800595e:	f000 f9f7 	bl	8005d50 <memchr>
 8005962:	b140      	cbz	r0, 8005976 <_svfiprintf_r+0x152>
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	eba0 000a 	sub.w	r0, r0, sl
 800596a:	fa03 f000 	lsl.w	r0, r3, r0
 800596e:	9b04      	ldr	r3, [sp, #16]
 8005970:	3401      	adds	r4, #1
 8005972:	4303      	orrs	r3, r0
 8005974:	9304      	str	r3, [sp, #16]
 8005976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597a:	2206      	movs	r2, #6
 800597c:	4826      	ldr	r0, [pc, #152]	; (8005a18 <_svfiprintf_r+0x1f4>)
 800597e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005982:	f000 f9e5 	bl	8005d50 <memchr>
 8005986:	2800      	cmp	r0, #0
 8005988:	d038      	beq.n	80059fc <_svfiprintf_r+0x1d8>
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <_svfiprintf_r+0x1f8>)
 800598c:	bb1b      	cbnz	r3, 80059d6 <_svfiprintf_r+0x1b2>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	f023 0307 	bic.w	r3, r3, #7
 8005996:	3308      	adds	r3, #8
 8005998:	9303      	str	r3, [sp, #12]
 800599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599c:	4433      	add	r3, r6
 800599e:	9309      	str	r3, [sp, #36]	; 0x24
 80059a0:	e767      	b.n	8005872 <_svfiprintf_r+0x4e>
 80059a2:	460c      	mov	r4, r1
 80059a4:	2001      	movs	r0, #1
 80059a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059aa:	e7a5      	b.n	80058f8 <_svfiprintf_r+0xd4>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f04f 0c0a 	mov.w	ip, #10
 80059b2:	4619      	mov	r1, r3
 80059b4:	3401      	adds	r4, #1
 80059b6:	9305      	str	r3, [sp, #20]
 80059b8:	4620      	mov	r0, r4
 80059ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059be:	3a30      	subs	r2, #48	; 0x30
 80059c0:	2a09      	cmp	r2, #9
 80059c2:	d903      	bls.n	80059cc <_svfiprintf_r+0x1a8>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0c5      	beq.n	8005954 <_svfiprintf_r+0x130>
 80059c8:	9105      	str	r1, [sp, #20]
 80059ca:	e7c3      	b.n	8005954 <_svfiprintf_r+0x130>
 80059cc:	4604      	mov	r4, r0
 80059ce:	2301      	movs	r3, #1
 80059d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d4:	e7f0      	b.n	80059b8 <_svfiprintf_r+0x194>
 80059d6:	ab03      	add	r3, sp, #12
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	462a      	mov	r2, r5
 80059dc:	4638      	mov	r0, r7
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <_svfiprintf_r+0x1fc>)
 80059e0:	a904      	add	r1, sp, #16
 80059e2:	f3af 8000 	nop.w
 80059e6:	1c42      	adds	r2, r0, #1
 80059e8:	4606      	mov	r6, r0
 80059ea:	d1d6      	bne.n	800599a <_svfiprintf_r+0x176>
 80059ec:	89ab      	ldrh	r3, [r5, #12]
 80059ee:	065b      	lsls	r3, r3, #25
 80059f0:	f53f af2c 	bmi.w	800584c <_svfiprintf_r+0x28>
 80059f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f6:	b01d      	add	sp, #116	; 0x74
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	462a      	mov	r2, r5
 8005a02:	4638      	mov	r0, r7
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <_svfiprintf_r+0x1fc>)
 8005a06:	a904      	add	r1, sp, #16
 8005a08:	f000 f87c 	bl	8005b04 <_printf_i>
 8005a0c:	e7eb      	b.n	80059e6 <_svfiprintf_r+0x1c2>
 8005a0e:	bf00      	nop
 8005a10:	0800618c 	.word	0x0800618c
 8005a14:	08006192 	.word	0x08006192
 8005a18:	08006196 	.word	0x08006196
 8005a1c:	00000000 	.word	0x00000000
 8005a20:	0800576d 	.word	0x0800576d

08005a24 <_printf_common>:
 8005a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	4616      	mov	r6, r2
 8005a2a:	4699      	mov	r9, r3
 8005a2c:	688a      	ldr	r2, [r1, #8]
 8005a2e:	690b      	ldr	r3, [r1, #16]
 8005a30:	4607      	mov	r7, r0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bfb8      	it	lt
 8005a36:	4613      	movlt	r3, r2
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3e:	460c      	mov	r4, r1
 8005a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a44:	b10a      	cbz	r2, 8005a4a <_printf_common+0x26>
 8005a46:	3301      	adds	r3, #1
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	0699      	lsls	r1, r3, #26
 8005a4e:	bf42      	ittt	mi
 8005a50:	6833      	ldrmi	r3, [r6, #0]
 8005a52:	3302      	addmi	r3, #2
 8005a54:	6033      	strmi	r3, [r6, #0]
 8005a56:	6825      	ldr	r5, [r4, #0]
 8005a58:	f015 0506 	ands.w	r5, r5, #6
 8005a5c:	d106      	bne.n	8005a6c <_printf_common+0x48>
 8005a5e:	f104 0a19 	add.w	sl, r4, #25
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	6832      	ldr	r2, [r6, #0]
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	dc28      	bgt.n	8005abe <_printf_common+0x9a>
 8005a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a70:	1e13      	subs	r3, r2, #0
 8005a72:	6822      	ldr	r2, [r4, #0]
 8005a74:	bf18      	it	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	0692      	lsls	r2, r2, #26
 8005a7a:	d42d      	bmi.n	8005ad8 <_printf_common+0xb4>
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a84:	47c0      	blx	r8
 8005a86:	3001      	adds	r0, #1
 8005a88:	d020      	beq.n	8005acc <_printf_common+0xa8>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	68e5      	ldr	r5, [r4, #12]
 8005a8e:	f003 0306 	and.w	r3, r3, #6
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	bf18      	it	ne
 8005a96:	2500      	movne	r5, #0
 8005a98:	6832      	ldr	r2, [r6, #0]
 8005a9a:	f04f 0600 	mov.w	r6, #0
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	bf08      	it	eq
 8005aa2:	1aad      	subeq	r5, r5, r2
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	bf08      	it	eq
 8005aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfc4      	itt	gt
 8005ab0:	1a9b      	subgt	r3, r3, r2
 8005ab2:	18ed      	addgt	r5, r5, r3
 8005ab4:	341a      	adds	r4, #26
 8005ab6:	42b5      	cmp	r5, r6
 8005ab8:	d11a      	bne.n	8005af0 <_printf_common+0xcc>
 8005aba:	2000      	movs	r0, #0
 8005abc:	e008      	b.n	8005ad0 <_printf_common+0xac>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4652      	mov	r2, sl
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	47c0      	blx	r8
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d103      	bne.n	8005ad4 <_printf_common+0xb0>
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	e7c4      	b.n	8005a62 <_printf_common+0x3e>
 8005ad8:	2030      	movs	r0, #48	; 0x30
 8005ada:	18e1      	adds	r1, r4, r3
 8005adc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae6:	4422      	add	r2, r4
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aee:	e7c5      	b.n	8005a7c <_printf_common+0x58>
 8005af0:	2301      	movs	r3, #1
 8005af2:	4622      	mov	r2, r4
 8005af4:	4649      	mov	r1, r9
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c0      	blx	r8
 8005afa:	3001      	adds	r0, #1
 8005afc:	d0e6      	beq.n	8005acc <_printf_common+0xa8>
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7d9      	b.n	8005ab6 <_printf_common+0x92>
	...

08005b04 <_printf_i>:
 8005b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	7e0f      	ldrb	r7, [r1, #24]
 8005b0a:	4691      	mov	r9, r2
 8005b0c:	2f78      	cmp	r7, #120	; 0x78
 8005b0e:	4680      	mov	r8, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	469a      	mov	sl, r3
 8005b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b1a:	d807      	bhi.n	8005b2c <_printf_i+0x28>
 8005b1c:	2f62      	cmp	r7, #98	; 0x62
 8005b1e:	d80a      	bhi.n	8005b36 <_printf_i+0x32>
 8005b20:	2f00      	cmp	r7, #0
 8005b22:	f000 80d9 	beq.w	8005cd8 <_printf_i+0x1d4>
 8005b26:	2f58      	cmp	r7, #88	; 0x58
 8005b28:	f000 80a4 	beq.w	8005c74 <_printf_i+0x170>
 8005b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b34:	e03a      	b.n	8005bac <_printf_i+0xa8>
 8005b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b3a:	2b15      	cmp	r3, #21
 8005b3c:	d8f6      	bhi.n	8005b2c <_printf_i+0x28>
 8005b3e:	a101      	add	r1, pc, #4	; (adr r1, 8005b44 <_printf_i+0x40>)
 8005b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005b2d 	.word	0x08005b2d
 8005b50:	08005b2d 	.word	0x08005b2d
 8005b54:	08005b2d 	.word	0x08005b2d
 8005b58:	08005b2d 	.word	0x08005b2d
 8005b5c:	08005bb1 	.word	0x08005bb1
 8005b60:	08005b2d 	.word	0x08005b2d
 8005b64:	08005b2d 	.word	0x08005b2d
 8005b68:	08005b2d 	.word	0x08005b2d
 8005b6c:	08005b2d 	.word	0x08005b2d
 8005b70:	08005cbf 	.word	0x08005cbf
 8005b74:	08005be1 	.word	0x08005be1
 8005b78:	08005ca1 	.word	0x08005ca1
 8005b7c:	08005b2d 	.word	0x08005b2d
 8005b80:	08005b2d 	.word	0x08005b2d
 8005b84:	08005ce1 	.word	0x08005ce1
 8005b88:	08005b2d 	.word	0x08005b2d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b2d 	.word	0x08005b2d
 8005b94:	08005b2d 	.word	0x08005b2d
 8005b98:	08005ca9 	.word	0x08005ca9
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	602a      	str	r2, [r5, #0]
 8005ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0a4      	b.n	8005cfa <_printf_i+0x1f6>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	6829      	ldr	r1, [r5, #0]
 8005bb4:	0606      	lsls	r6, r0, #24
 8005bb6:	f101 0304 	add.w	r3, r1, #4
 8005bba:	d50a      	bpl.n	8005bd2 <_printf_i+0xce>
 8005bbc:	680e      	ldr	r6, [r1, #0]
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	da03      	bge.n	8005bcc <_printf_i+0xc8>
 8005bc4:	232d      	movs	r3, #45	; 0x2d
 8005bc6:	4276      	negs	r6, r6
 8005bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bcc:	230a      	movs	r3, #10
 8005bce:	485e      	ldr	r0, [pc, #376]	; (8005d48 <_printf_i+0x244>)
 8005bd0:	e019      	b.n	8005c06 <_printf_i+0x102>
 8005bd2:	680e      	ldr	r6, [r1, #0]
 8005bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	bf18      	it	ne
 8005bdc:	b236      	sxthne	r6, r6
 8005bde:	e7ef      	b.n	8005bc0 <_printf_i+0xbc>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	1d19      	adds	r1, r3, #4
 8005be6:	6029      	str	r1, [r5, #0]
 8005be8:	0601      	lsls	r1, r0, #24
 8005bea:	d501      	bpl.n	8005bf0 <_printf_i+0xec>
 8005bec:	681e      	ldr	r6, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <_printf_i+0xf2>
 8005bf0:	0646      	lsls	r6, r0, #25
 8005bf2:	d5fb      	bpl.n	8005bec <_printf_i+0xe8>
 8005bf4:	881e      	ldrh	r6, [r3, #0]
 8005bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2308      	moveq	r3, #8
 8005bfc:	230a      	movne	r3, #10
 8005bfe:	4852      	ldr	r0, [pc, #328]	; (8005d48 <_printf_i+0x244>)
 8005c00:	2100      	movs	r1, #0
 8005c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c06:	6865      	ldr	r5, [r4, #4]
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	bfa8      	it	ge
 8005c0c:	6821      	ldrge	r1, [r4, #0]
 8005c0e:	60a5      	str	r5, [r4, #8]
 8005c10:	bfa4      	itt	ge
 8005c12:	f021 0104 	bicge.w	r1, r1, #4
 8005c16:	6021      	strge	r1, [r4, #0]
 8005c18:	b90e      	cbnz	r6, 8005c1e <_printf_i+0x11a>
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	d04d      	beq.n	8005cba <_printf_i+0x1b6>
 8005c1e:	4615      	mov	r5, r2
 8005c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c24:	fb03 6711 	mls	r7, r3, r1, r6
 8005c28:	5dc7      	ldrb	r7, [r0, r7]
 8005c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c2e:	4637      	mov	r7, r6
 8005c30:	42bb      	cmp	r3, r7
 8005c32:	460e      	mov	r6, r1
 8005c34:	d9f4      	bls.n	8005c20 <_printf_i+0x11c>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d10b      	bne.n	8005c52 <_printf_i+0x14e>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	07de      	lsls	r6, r3, #31
 8005c3e:	d508      	bpl.n	8005c52 <_printf_i+0x14e>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	6861      	ldr	r1, [r4, #4]
 8005c44:	4299      	cmp	r1, r3
 8005c46:	bfde      	ittt	le
 8005c48:	2330      	movle	r3, #48	; 0x30
 8005c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c52:	1b52      	subs	r2, r2, r5
 8005c54:	6122      	str	r2, [r4, #16]
 8005c56:	464b      	mov	r3, r9
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f8cd a000 	str.w	sl, [sp]
 8005c60:	aa03      	add	r2, sp, #12
 8005c62:	f7ff fedf 	bl	8005a24 <_printf_common>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d14c      	bne.n	8005d04 <_printf_i+0x200>
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	b004      	add	sp, #16
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	4834      	ldr	r0, [pc, #208]	; (8005d48 <_printf_i+0x244>)
 8005c76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c7a:	6829      	ldr	r1, [r5, #0]
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c82:	6029      	str	r1, [r5, #0]
 8005c84:	061d      	lsls	r5, r3, #24
 8005c86:	d514      	bpl.n	8005cb2 <_printf_i+0x1ae>
 8005c88:	07df      	lsls	r7, r3, #31
 8005c8a:	bf44      	itt	mi
 8005c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c90:	6023      	strmi	r3, [r4, #0]
 8005c92:	b91e      	cbnz	r6, 8005c9c <_printf_i+0x198>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	e7af      	b.n	8005c00 <_printf_i+0xfc>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	f043 0320 	orr.w	r3, r3, #32
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	2378      	movs	r3, #120	; 0x78
 8005caa:	4828      	ldr	r0, [pc, #160]	; (8005d4c <_printf_i+0x248>)
 8005cac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cb0:	e7e3      	b.n	8005c7a <_printf_i+0x176>
 8005cb2:	0659      	lsls	r1, r3, #25
 8005cb4:	bf48      	it	mi
 8005cb6:	b2b6      	uxthmi	r6, r6
 8005cb8:	e7e6      	b.n	8005c88 <_printf_i+0x184>
 8005cba:	4615      	mov	r5, r2
 8005cbc:	e7bb      	b.n	8005c36 <_printf_i+0x132>
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	6826      	ldr	r6, [r4, #0]
 8005cc2:	1d18      	adds	r0, r3, #4
 8005cc4:	6961      	ldr	r1, [r4, #20]
 8005cc6:	6028      	str	r0, [r5, #0]
 8005cc8:	0635      	lsls	r5, r6, #24
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	d501      	bpl.n	8005cd2 <_printf_i+0x1ce>
 8005cce:	6019      	str	r1, [r3, #0]
 8005cd0:	e002      	b.n	8005cd8 <_printf_i+0x1d4>
 8005cd2:	0670      	lsls	r0, r6, #25
 8005cd4:	d5fb      	bpl.n	8005cce <_printf_i+0x1ca>
 8005cd6:	8019      	strh	r1, [r3, #0]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4615      	mov	r5, r2
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	e7ba      	b.n	8005c56 <_printf_i+0x152>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	1d1a      	adds	r2, r3, #4
 8005ce6:	602a      	str	r2, [r5, #0]
 8005ce8:	681d      	ldr	r5, [r3, #0]
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 f82f 	bl	8005d50 <memchr>
 8005cf2:	b108      	cbz	r0, 8005cf8 <_printf_i+0x1f4>
 8005cf4:	1b40      	subs	r0, r0, r5
 8005cf6:	6060      	str	r0, [r4, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d02:	e7a8      	b.n	8005c56 <_printf_i+0x152>
 8005d04:	462a      	mov	r2, r5
 8005d06:	4649      	mov	r1, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	47d0      	blx	sl
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d0ab      	beq.n	8005c6a <_printf_i+0x166>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	079b      	lsls	r3, r3, #30
 8005d16:	d413      	bmi.n	8005d40 <_printf_i+0x23c>
 8005d18:	68e0      	ldr	r0, [r4, #12]
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	4298      	cmp	r0, r3
 8005d1e:	bfb8      	it	lt
 8005d20:	4618      	movlt	r0, r3
 8005d22:	e7a4      	b.n	8005c6e <_printf_i+0x16a>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4632      	mov	r2, r6
 8005d28:	4649      	mov	r1, r9
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	47d0      	blx	sl
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d09b      	beq.n	8005c6a <_printf_i+0x166>
 8005d32:	3501      	adds	r5, #1
 8005d34:	68e3      	ldr	r3, [r4, #12]
 8005d36:	9903      	ldr	r1, [sp, #12]
 8005d38:	1a5b      	subs	r3, r3, r1
 8005d3a:	42ab      	cmp	r3, r5
 8005d3c:	dcf2      	bgt.n	8005d24 <_printf_i+0x220>
 8005d3e:	e7eb      	b.n	8005d18 <_printf_i+0x214>
 8005d40:	2500      	movs	r5, #0
 8005d42:	f104 0619 	add.w	r6, r4, #25
 8005d46:	e7f5      	b.n	8005d34 <_printf_i+0x230>
 8005d48:	0800619d 	.word	0x0800619d
 8005d4c:	080061ae 	.word	0x080061ae

08005d50 <memchr>:
 8005d50:	4603      	mov	r3, r0
 8005d52:	b510      	push	{r4, lr}
 8005d54:	b2c9      	uxtb	r1, r1
 8005d56:	4402      	add	r2, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	d101      	bne.n	8005d62 <memchr+0x12>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e003      	b.n	8005d6a <memchr+0x1a>
 8005d62:	7804      	ldrb	r4, [r0, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	428c      	cmp	r4, r1
 8005d68:	d1f6      	bne.n	8005d58 <memchr+0x8>
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <memmove>:
 8005d6c:	4288      	cmp	r0, r1
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	eb01 0402 	add.w	r4, r1, r2
 8005d74:	d902      	bls.n	8005d7c <memmove+0x10>
 8005d76:	4284      	cmp	r4, r0
 8005d78:	4623      	mov	r3, r4
 8005d7a:	d807      	bhi.n	8005d8c <memmove+0x20>
 8005d7c:	1e43      	subs	r3, r0, #1
 8005d7e:	42a1      	cmp	r1, r4
 8005d80:	d008      	beq.n	8005d94 <memmove+0x28>
 8005d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d8a:	e7f8      	b.n	8005d7e <memmove+0x12>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4402      	add	r2, r0
 8005d90:	428a      	cmp	r2, r1
 8005d92:	d100      	bne.n	8005d96 <memmove+0x2a>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d9e:	e7f7      	b.n	8005d90 <memmove+0x24>

08005da0 <_free_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4605      	mov	r5, r0
 8005da4:	2900      	cmp	r1, #0
 8005da6:	d040      	beq.n	8005e2a <_free_r+0x8a>
 8005da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dac:	1f0c      	subs	r4, r1, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	18e4      	addlt	r4, r4, r3
 8005db4:	f000 f910 	bl	8005fd8 <__malloc_lock>
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <_free_r+0x8c>)
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	b933      	cbnz	r3, 8005dcc <_free_r+0x2c>
 8005dbe:	6063      	str	r3, [r4, #4]
 8005dc0:	6014      	str	r4, [r2, #0]
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc8:	f000 b90c 	b.w	8005fe4 <__malloc_unlock>
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d908      	bls.n	8005de2 <_free_r+0x42>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	1821      	adds	r1, r4, r0
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	bf01      	itttt	eq
 8005dd8:	6819      	ldreq	r1, [r3, #0]
 8005dda:	685b      	ldreq	r3, [r3, #4]
 8005ddc:	1809      	addeq	r1, r1, r0
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	e7ed      	b.n	8005dbe <_free_r+0x1e>
 8005de2:	461a      	mov	r2, r3
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	b10b      	cbz	r3, 8005dec <_free_r+0x4c>
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	d9fa      	bls.n	8005de2 <_free_r+0x42>
 8005dec:	6811      	ldr	r1, [r2, #0]
 8005dee:	1850      	adds	r0, r2, r1
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d10b      	bne.n	8005e0c <_free_r+0x6c>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	4401      	add	r1, r0
 8005df8:	1850      	adds	r0, r2, r1
 8005dfa:	4283      	cmp	r3, r0
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	d1e0      	bne.n	8005dc2 <_free_r+0x22>
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4401      	add	r1, r0
 8005e06:	6011      	str	r1, [r2, #0]
 8005e08:	6053      	str	r3, [r2, #4]
 8005e0a:	e7da      	b.n	8005dc2 <_free_r+0x22>
 8005e0c:	d902      	bls.n	8005e14 <_free_r+0x74>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	602b      	str	r3, [r5, #0]
 8005e12:	e7d6      	b.n	8005dc2 <_free_r+0x22>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	1821      	adds	r1, r4, r0
 8005e18:	428b      	cmp	r3, r1
 8005e1a:	bf01      	itttt	eq
 8005e1c:	6819      	ldreq	r1, [r3, #0]
 8005e1e:	685b      	ldreq	r3, [r3, #4]
 8005e20:	1809      	addeq	r1, r1, r0
 8005e22:	6021      	streq	r1, [r4, #0]
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	6054      	str	r4, [r2, #4]
 8005e28:	e7cb      	b.n	8005dc2 <_free_r+0x22>
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20001a60 	.word	0x20001a60

08005e30 <sbrk_aligned>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4e0e      	ldr	r6, [pc, #56]	; (8005e6c <sbrk_aligned+0x3c>)
 8005e34:	460c      	mov	r4, r1
 8005e36:	6831      	ldr	r1, [r6, #0]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	b911      	cbnz	r1, 8005e42 <sbrk_aligned+0x12>
 8005e3c:	f000 f8bc 	bl	8005fb8 <_sbrk_r>
 8005e40:	6030      	str	r0, [r6, #0]
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 f8b7 	bl	8005fb8 <_sbrk_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d00a      	beq.n	8005e64 <sbrk_aligned+0x34>
 8005e4e:	1cc4      	adds	r4, r0, #3
 8005e50:	f024 0403 	bic.w	r4, r4, #3
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d007      	beq.n	8005e68 <sbrk_aligned+0x38>
 8005e58:	1a21      	subs	r1, r4, r0
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f000 f8ac 	bl	8005fb8 <_sbrk_r>
 8005e60:	3001      	adds	r0, #1
 8005e62:	d101      	bne.n	8005e68 <sbrk_aligned+0x38>
 8005e64:	f04f 34ff 	mov.w	r4, #4294967295
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	20001a64 	.word	0x20001a64

08005e70 <_malloc_r>:
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	1ccd      	adds	r5, r1, #3
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	4607      	mov	r7, r0
 8005e86:	db01      	blt.n	8005e8c <_malloc_r+0x1c>
 8005e88:	42a9      	cmp	r1, r5
 8005e8a:	d905      	bls.n	8005e98 <_malloc_r+0x28>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	2600      	movs	r6, #0
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4630      	mov	r0, r6
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e98:	4e2e      	ldr	r6, [pc, #184]	; (8005f54 <_malloc_r+0xe4>)
 8005e9a:	f000 f89d 	bl	8005fd8 <__malloc_lock>
 8005e9e:	6833      	ldr	r3, [r6, #0]
 8005ea0:	461c      	mov	r4, r3
 8005ea2:	bb34      	cbnz	r4, 8005ef2 <_malloc_r+0x82>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f7ff ffc2 	bl	8005e30 <sbrk_aligned>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	4604      	mov	r4, r0
 8005eb0:	d14d      	bne.n	8005f4e <_malloc_r+0xde>
 8005eb2:	6834      	ldr	r4, [r6, #0]
 8005eb4:	4626      	mov	r6, r4
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	d140      	bne.n	8005f3c <_malloc_r+0xcc>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	eb04 0803 	add.w	r8, r4, r3
 8005ec4:	f000 f878 	bl	8005fb8 <_sbrk_r>
 8005ec8:	4580      	cmp	r8, r0
 8005eca:	d13a      	bne.n	8005f42 <_malloc_r+0xd2>
 8005ecc:	6821      	ldr	r1, [r4, #0]
 8005ece:	3503      	adds	r5, #3
 8005ed0:	1a6d      	subs	r5, r5, r1
 8005ed2:	f025 0503 	bic.w	r5, r5, #3
 8005ed6:	3508      	adds	r5, #8
 8005ed8:	2d0c      	cmp	r5, #12
 8005eda:	bf38      	it	cc
 8005edc:	250c      	movcc	r5, #12
 8005ede:	4638      	mov	r0, r7
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7ff ffa5 	bl	8005e30 <sbrk_aligned>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d02b      	beq.n	8005f42 <_malloc_r+0xd2>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	442b      	add	r3, r5
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	e00e      	b.n	8005f10 <_malloc_r+0xa0>
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	1b52      	subs	r2, r2, r5
 8005ef6:	d41e      	bmi.n	8005f36 <_malloc_r+0xc6>
 8005ef8:	2a0b      	cmp	r2, #11
 8005efa:	d916      	bls.n	8005f2a <_malloc_r+0xba>
 8005efc:	1961      	adds	r1, r4, r5
 8005efe:	42a3      	cmp	r3, r4
 8005f00:	6025      	str	r5, [r4, #0]
 8005f02:	bf18      	it	ne
 8005f04:	6059      	strne	r1, [r3, #4]
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	bf08      	it	eq
 8005f0a:	6031      	streq	r1, [r6, #0]
 8005f0c:	5162      	str	r2, [r4, r5]
 8005f0e:	604b      	str	r3, [r1, #4]
 8005f10:	4638      	mov	r0, r7
 8005f12:	f104 060b 	add.w	r6, r4, #11
 8005f16:	f000 f865 	bl	8005fe4 <__malloc_unlock>
 8005f1a:	f026 0607 	bic.w	r6, r6, #7
 8005f1e:	1d23      	adds	r3, r4, #4
 8005f20:	1af2      	subs	r2, r6, r3
 8005f22:	d0b6      	beq.n	8005e92 <_malloc_r+0x22>
 8005f24:	1b9b      	subs	r3, r3, r6
 8005f26:	50a3      	str	r3, [r4, r2]
 8005f28:	e7b3      	b.n	8005e92 <_malloc_r+0x22>
 8005f2a:	6862      	ldr	r2, [r4, #4]
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	bf0c      	ite	eq
 8005f30:	6032      	streq	r2, [r6, #0]
 8005f32:	605a      	strne	r2, [r3, #4]
 8005f34:	e7ec      	b.n	8005f10 <_malloc_r+0xa0>
 8005f36:	4623      	mov	r3, r4
 8005f38:	6864      	ldr	r4, [r4, #4]
 8005f3a:	e7b2      	b.n	8005ea2 <_malloc_r+0x32>
 8005f3c:	4634      	mov	r4, r6
 8005f3e:	6876      	ldr	r6, [r6, #4]
 8005f40:	e7b9      	b.n	8005eb6 <_malloc_r+0x46>
 8005f42:	230c      	movs	r3, #12
 8005f44:	4638      	mov	r0, r7
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	f000 f84c 	bl	8005fe4 <__malloc_unlock>
 8005f4c:	e7a1      	b.n	8005e92 <_malloc_r+0x22>
 8005f4e:	6025      	str	r5, [r4, #0]
 8005f50:	e7de      	b.n	8005f10 <_malloc_r+0xa0>
 8005f52:	bf00      	nop
 8005f54:	20001a60 	.word	0x20001a60

08005f58 <_realloc_r>:
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4614      	mov	r4, r2
 8005f60:	460e      	mov	r6, r1
 8005f62:	b921      	cbnz	r1, 8005f6e <_realloc_r+0x16>
 8005f64:	4611      	mov	r1, r2
 8005f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	f7ff bf81 	b.w	8005e70 <_malloc_r>
 8005f6e:	b92a      	cbnz	r2, 8005f7c <_realloc_r+0x24>
 8005f70:	f7ff ff16 	bl	8005da0 <_free_r>
 8005f74:	4625      	mov	r5, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	f000 f838 	bl	8005ff0 <_malloc_usable_size_r>
 8005f80:	4284      	cmp	r4, r0
 8005f82:	4607      	mov	r7, r0
 8005f84:	d802      	bhi.n	8005f8c <_realloc_r+0x34>
 8005f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f8a:	d812      	bhi.n	8005fb2 <_realloc_r+0x5a>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4640      	mov	r0, r8
 8005f90:	f7ff ff6e 	bl	8005e70 <_malloc_r>
 8005f94:	4605      	mov	r5, r0
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0ed      	beq.n	8005f76 <_realloc_r+0x1e>
 8005f9a:	42bc      	cmp	r4, r7
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	bf28      	it	cs
 8005fa2:	463a      	movcs	r2, r7
 8005fa4:	f7ff fbac 	bl	8005700 <memcpy>
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff fef8 	bl	8005da0 <_free_r>
 8005fb0:	e7e1      	b.n	8005f76 <_realloc_r+0x1e>
 8005fb2:	4635      	mov	r5, r6
 8005fb4:	e7df      	b.n	8005f76 <_realloc_r+0x1e>
	...

08005fb8 <_sbrk_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d05      	ldr	r5, [pc, #20]	; (8005fd4 <_sbrk_r+0x1c>)
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	f7fa fd46 	bl	8000a54 <_sbrk>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_sbrk_r+0x1a>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_sbrk_r+0x1a>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20001a68 	.word	0x20001a68

08005fd8 <__malloc_lock>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	; (8005fe0 <__malloc_lock+0x8>)
 8005fda:	f000 b811 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8005fde:	bf00      	nop
 8005fe0:	20001a6c 	.word	0x20001a6c

08005fe4 <__malloc_unlock>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <__malloc_unlock+0x8>)
 8005fe6:	f000 b80c 	b.w	8006002 <__retarget_lock_release_recursive>
 8005fea:	bf00      	nop
 8005fec:	20001a6c 	.word	0x20001a6c

08005ff0 <_malloc_usable_size_r>:
 8005ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff4:	1f18      	subs	r0, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bfbc      	itt	lt
 8005ffa:	580b      	ldrlt	r3, [r1, r0]
 8005ffc:	18c0      	addlt	r0, r0, r3
 8005ffe:	4770      	bx	lr

08006000 <__retarget_lock_acquire_recursive>:
 8006000:	4770      	bx	lr

08006002 <__retarget_lock_release_recursive>:
 8006002:	4770      	bx	lr

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
