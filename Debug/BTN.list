
BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ec  080061ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080061ec  080061ec  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061ec  080061ec  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080061f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  20000084  08006278  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  08006278  00021a74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011184  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b4  00000000  00000000  00031231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00034b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003609  00000000  00000000  00035978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011326  00000000  00000000  00038f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e613  00000000  00000000  0004a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d88ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000d890c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006034 	.word	0x08006034

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006034 	.word	0x08006034

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd34 	bl	8000c04 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd2b 	bl	8000c04 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000a3 	.word	0x200000a3
 8000240:	200000a4 	.word	0x200000a4
 8000244:	200000a0 	.word	0x200000a0
 8000248:	200000a1 	.word	0x200000a1
 800024c:	200000a2 	.word	0x200000a2
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	0800604c 	.word	0x0800604c
 80002e4:	200000a3 	.word	0x200000a3

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000a1 	.word	0x200000a1

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 ffd8 	bl	8001404 <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000a4 	.word	0x200000a4
 8000460:	200000a8 	.word	0x200000a8

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fafe 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f866 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8ce 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f89e 	bl	800068c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
    HD44780_PrintStr("BTN don't push");
 8000562:	481c      	ldr	r0, [pc, #112]	; (80005d4 <main+0x98>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fe58 	bl	800221c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <main+0x9c>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ff91 	bl	8002498 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a18      	ldr	r2, [pc, #96]	; (80005dc <main+0xa0>)
 800057a:	6013      	str	r3, [r2, #0]
  prevSemaphoreHandle = osSemaphoreNew(1, 1, NULL);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2001      	movs	r0, #1
 8000582:	f001 ff89 	bl	8002498 <osSemaphoreNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <main+0xa4>)
 800058a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <main+0xa8>)
 800058e:	2100      	movs	r1, #0
 8000590:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0xac>)
 8000592:	f001 fea9 	bl	80022e8 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <main+0xb0>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <main+0xb4>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <main+0xb8>)
 80005a2:	f001 fea1 	bl	80022e8 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <main+0xbc>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <main+0xc0>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <main+0xc4>)
 80005b2:	f001 fe99 	bl	80022e8 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <main+0xc8>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTask, NULL, &holdLED_attributes);
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <main+0xcc>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0xd0>)
 80005c2:	f001 fe91 	bl	80022e8 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a11      	ldr	r2, [pc, #68]	; (8000610 <main+0xd4>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f001 fe58 	bl	8002280 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x94>
 80005d2:	bf00      	nop
 80005d4:	08006090 	.word	0x08006090
 80005d8:	08006190 	.word	0x08006190
 80005dc:	20000100 	.word	0x20000100
 80005e0:	20000104 	.word	0x20000104
 80005e4:	08006100 	.word	0x08006100
 80005e8:	08000785 	.word	0x08000785
 80005ec:	200000fc 	.word	0x200000fc
 80005f0:	08006124 	.word	0x08006124
 80005f4:	08000795 	.word	0x08000795
 80005f8:	20000108 	.word	0x20000108
 80005fc:	08006148 	.word	0x08006148
 8000600:	080007fd 	.word	0x080007fd
 8000604:	2000010c 	.word	0x2000010c
 8000608:	0800616c 	.word	0x0800616c
 800060c:	08000879 	.word	0x08000879
 8000610:	20000110 	.word	0x20000110

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 f892 	bl	800574c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2310      	movs	r3, #16
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000642:	2300      	movs	r3, #0
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f9e0 	bl	8001a10 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000656:	f000 f971 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc4e 	bl	8001f14 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067e:	f000 f95d 	bl	800093c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3740      	adds	r7, #64	; 0x40
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f000 fd57 	bl	800117c <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f932 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000a8 	.word	0x200000a8
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_GPIO_Init+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <MX_GPIO_Init+0x90>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_GPIO_Init+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_GPIO_Init+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_GPIO_Init+0x90>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0x90>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_GPIO_Init+0x94>)
 8000734:	f000 fd09 	bl	800114a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2302      	movs	r3, #2
 8000748:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4619      	mov	r1, r3
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <MX_GPIO_Init+0x94>)
 8000752:	f000 fb5f 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_GPIO_Init+0x98>)
 800076c:	f000 fb52 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	40011000 	.word	0x40011000
 8000780:	40010c00 	.word	0x40010c00

08000784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f001 fe55 	bl	800243c <osDelay>
 8000792:	e7fb      	b.n	800078c <StartDefaultTask+0x8>

08000794 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    uint8_t last_state = GPIO_PIN_RESET; // Исходное состояние - кнопка отпущена
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]

    for(;;)
    {
        uint8_t current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <buttonTask+0x58>)
 80007a6:	f000 fcb9 	bl	800111c <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73bb      	strb	r3, [r7, #14]

        // Обновление информации на дисплее
        HD44780_SetCursor(13,3);
 80007ae:	2103      	movs	r1, #3
 80007b0:	200d      	movs	r0, #13
 80007b2:	f7ff fd67 	bl	8000284 <HD44780_SetCursor>
        HD44780_PrintStr((current_state == GPIO_PIN_SET) ? "0" : "1");
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d101      	bne.n	80007c0 <buttonTask+0x2c>
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <buttonTask+0x5c>)
 80007be:	e000      	b.n	80007c2 <buttonTask+0x2e>
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <buttonTask+0x60>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fdcf 	bl	8000366 <HD44780_PrintStr>

        // Обработка изменения состояния
        if(current_state != last_state)
 80007c8:	7bba      	ldrb	r2, [r7, #14]
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d009      	beq.n	80007e4 <buttonTask+0x50>
        {
            if(current_state == GPIO_PIN_SET)
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d104      	bne.n	80007e0 <buttonTask+0x4c>
            {
                osSemaphoreRelease(buttonSemaphoreHandle);
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <buttonTask+0x64>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 ff5e 	bl	800269c <osSemaphoreRelease>
            }

            last_state = current_state;
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	73fb      	strb	r3, [r7, #15]
        }


        osDelay(10); // Задержка для стабильности опроса
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 fe29 	bl	800243c <osDelay>
    {
 80007ea:	e7d9      	b.n	80007a0 <buttonTask+0xc>
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	080060a0 	.word	0x080060a0
 80007f4:	080060a4 	.word	0x080060a4
 80007f8:	20000100 	.word	0x20000100

080007fc <ledTask>:
    }
}


void ledTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <ledTask+0x70>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2164      	movs	r1, #100	; 0x64
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fede 	bl	80025d0 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	4815      	ldr	r0, [pc, #84]	; (8000870 <ledTask+0x74>)
 800081a:	f000 fc7f 	bl	800111c <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	73bb      	strb	r3, [r7, #14]

        if(button_state == GPIO_PIN_RESET)
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10c      	bne.n	8000842 <ledTask+0x46>
        {
            // Кнопка нажата — светодиод горит постоянно
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <ledTask+0x78>)
 8000830:	f000 fc8b 	bl	800114a <HAL_GPIO_WritePin>
            led_on = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]

            osDelay(5000);
 8000838:	f241 3088 	movw	r0, #5000	; 0x1388
 800083c:	f001 fdfe 	bl	800243c <osDelay>
 8000840:	e7e2      	b.n	8000808 <ledTask+0xc>
        }
        else
        {
            led_on = !led_on;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (led_on) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf0c      	ite	eq
 8000856:	2301      	moveq	r3, #1
 8000858:	2300      	movne	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <ledTask+0x78>)
 8000864:	f000 fc71 	bl	800114a <HAL_GPIO_WritePin>
    {
 8000868:	e7ce      	b.n	8000808 <ledTask+0xc>
 800086a:	bf00      	nop
 800086c:	20000100 	.word	0x20000100
 8000870:	40010c00 	.word	0x40010c00
 8000874:	40011000 	.word	0x40011000

08000878 <lcdTask>:
        }
    }
}

void lcdTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <lcdTask+0xb0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fea1 	bl	80025d0 <osSemaphoreAcquire>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d145      	bne.n	8000920 <lcdTask+0xa8>
	    {
	        if(osSemaphoreAcquire(prevSemaphoreHandle, 0) == osOK)
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <lcdTask+0xb4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fe98 	bl	80025d0 <osSemaphoreAcquire>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d13c      	bne.n	8000920 <lcdTask+0xa8>
	        {
	            // Запускаем отсчет
	            int time = 5;
 80008a6:	2305      	movs	r3, #5
 80008a8:	61fb      	str	r3, [r7, #28]
	            char buffer[20];

	            HD44780_Clear();
 80008aa:	f7ff fcd5 	bl	8000258 <HD44780_Clear>
	            HD44780_PrintStr("door will be");
 80008ae:	4820      	ldr	r0, [pc, #128]	; (8000930 <lcdTask+0xb8>)
 80008b0:	f7ff fd59 	bl	8000366 <HD44780_PrintStr>
	            HD44780_SetCursor(0,1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fce4 	bl	8000284 <HD44780_SetCursor>

	            for (; time > 0; time--) {
 80008bc:	e01f      	b.n	80008fe <lcdTask+0x86>
	                HD44780_Clear();
 80008be:	f7ff fccb 	bl	8000258 <HD44780_Clear>
	                HD44780_SetCursor(0,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fcdd 	bl	8000284 <HD44780_SetCursor>
	                HD44780_PrintStr("door will be");
 80008ca:	4819      	ldr	r0, [pc, #100]	; (8000930 <lcdTask+0xb8>)
 80008cc:	f7ff fd4b 	bl	8000366 <HD44780_PrintStr>
	                HD44780_SetCursor(0,1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fcd6 	bl	8000284 <HD44780_SetCursor>
	                sprintf(buffer, "close in: %d", time);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4915      	ldr	r1, [pc, #84]	; (8000934 <lcdTask+0xbc>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 ff3b 	bl	800575c <siprintf>
	                HD44780_PrintStr(buffer);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fd3b 	bl	8000366 <HD44780_PrintStr>
	                osDelay(900);
 80008f0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80008f4:	f001 fda2 	bl	800243c <osDelay>
	            for (; time > 0; time--) {
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	2b00      	cmp	r3, #0
 8000902:	dcdc      	bgt.n	80008be <lcdTask+0x46>
	            }

	            HD44780_Clear();
 8000904:	f7ff fca8 	bl	8000258 <HD44780_Clear>
	            HD44780_SetCursor(0,0);
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fcba 	bl	8000284 <HD44780_SetCursor>
	            HD44780_PrintStr("BTN don't press");
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <lcdTask+0xc0>)
 8000912:	f7ff fd28 	bl	8000366 <HD44780_PrintStr>

	            // Освобождаем prevSemaphoreHandle после отсчета
	            osSemaphoreRelease(prevSemaphoreHandle);
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <lcdTask+0xb4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f001 febe 	bl	800269c <osSemaphoreRelease>
	        }
	    }
	    osDelay(50);
 8000920:	2032      	movs	r0, #50	; 0x32
 8000922:	f001 fd8b 	bl	800243c <osDelay>
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 8000926:	e7ab      	b.n	8000880 <lcdTask+0x8>
 8000928:	20000100 	.word	0x20000100
 800092c:	20000104 	.word	0x20000104
 8000930:	080060a8 	.word	0x080060a8
 8000934:	080060b8 	.word	0x080060b8
 8000938:	080060c8 	.word	0x080060c8

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_MspInit+0x4c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x4c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x4c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fa1c 	bl	8000dc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_I2C_MspInit+0x90>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d132      	bne.n	8000a1e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <HAL_I2C_MspInit+0x98>)
 80009e6:	f000 fa15 	bl	8000e14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_I2C_MspInit+0x9c>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <HAL_I2C_MspInit+0x9c>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40010000 	.word	0x40010000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f8b1 	bl	8000bcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a6a:	f003 fd73 	bl	8004554 <xTaskGetSchedulerState>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d001      	beq.n	8000a78 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a74:	f004 fbd8 	bl	8005228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f004 fe16 	bl	80056dc <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20005000 	.word	0x20005000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000114 	.word	0x20000114
 8000ae4:	20001a78 	.word	0x20001a78

08000ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1a:	f7ff ffe5 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f004 fde3 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fd0b 	bl	800053c <main>
  bx lr
 8000b26:	4770      	bx	lr
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b30:	080061f4 	.word	0x080061f4
  ldr r2, =_sbss
 8000b34:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b38:	20001a74 	.word	0x20001a74

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f92b 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fef4 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f935 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f90b 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	20000018 	.word	0x20000018
 8000bc8:	20000014 	.word	0x20000014

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x20>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000018 	.word	0x20000018
 8000bec:	20000118 	.word	0x20000118

08000bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000118 	.word	0x20000118

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff fff0 	bl	8000bf0 <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffe0 	bl	8000bf0 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000018 	.word	0x20000018

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff90 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff49 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff90 	bl	8000d04 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb0 	bl	8000d68 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e169      	b.n	80010fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8158 	bne.w	80010f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a9a      	ldr	r2, [pc, #616]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d05e      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e50:	4a98      	ldr	r2, [pc, #608]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d875      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e56:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d058      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e5c:	4a96      	ldr	r2, [pc, #600]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d86f      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e62:	4a96      	ldr	r2, [pc, #600]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d052      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e68:	4a94      	ldr	r2, [pc, #592]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d869      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e6e:	4a94      	ldr	r2, [pc, #592]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d04c      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e74:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d863      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a92      	ldr	r2, [pc, #584]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d046      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e80:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d85d      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d82a      	bhi.n	8000ee0 <HAL_GPIO_Init+0xcc>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d859      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <HAL_GPIO_Init+0x80>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000f0f 	.word	0x08000f0f
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000efb 	.word	0x08000efb
 8000ea0:	08000f3d 	.word	0x08000f3d
 8000ea4:	08000f43 	.word	0x08000f43
 8000ea8:	08000f43 	.word	0x08000f43
 8000eac:	08000f43 	.word	0x08000f43
 8000eb0:	08000f43 	.word	0x08000f43
 8000eb4:	08000f43 	.word	0x08000f43
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000f43 	.word	0x08000f43
 8000ec0:	08000f43 	.word	0x08000f43
 8000ec4:	08000f43 	.word	0x08000f43
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08000f43 	.word	0x08000f43
 8000ed0:	08000f43 	.word	0x08000f43
 8000ed4:	08000f43 	.word	0x08000f43
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000f05 	.word	0x08000f05
 8000ee0:	4a79      	ldr	r2, [pc, #484]	; (80010c8 <HAL_GPIO_Init+0x2b4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee6:	e02c      	b.n	8000f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e029      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e024      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e01f      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	330c      	adds	r3, #12
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e01a      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f16:	2304      	movs	r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e013      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	611a      	str	r2, [r3, #16]
          break;
 8000f2e:	e009      	b.n	8000f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	615a      	str	r2, [r3, #20]
          break;
 8000f3a:	e003      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          break;
 8000f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d801      	bhi.n	8000f4e <HAL_GPIO_Init+0x13a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3304      	adds	r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d802      	bhi.n	8000f60 <HAL_GPIO_Init+0x14c>
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x152>
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b08      	subs	r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	6a39      	ldr	r1, [r7, #32]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80b1 	beq.w	80010f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d013      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3f      	ldr	r2, [pc, #252]	; (80010d8 <HAL_GPIO_Init+0x2c4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <HAL_GPIO_Init+0x2c8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8001000:	2300      	movs	r3, #0
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001012:	492f      	ldr	r1, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	492c      	ldr	r1, [pc, #176]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	4928      	ldr	r1, [pc, #160]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4922      	ldr	r1, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	4918      	ldr	r1, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4914      	ldr	r1, [pc, #80]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001094:	4013      	ands	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d021      	beq.n	80010e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60cb      	str	r3, [r1, #12]
 80010b0:	e021      	b.n	80010f6 <HAL_GPIO_Init+0x2e2>
 80010b2:	bf00      	nop
 80010b4:	10320000 	.word	0x10320000
 80010b8:	10310000 	.word	0x10310000
 80010bc:	10220000 	.word	0x10220000
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10120000 	.word	0x10120000
 80010c8:	10110000 	.word	0x10110000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40011400 	.word	0x40011400
 80010e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae8e 	bne.w	8000e28 <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	372c      	adds	r7, #44	; 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	e001      	b.n	800113e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
 8001156:	4613      	mov	r3, r2
 8001158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001160:	887a      	ldrh	r2, [r7, #2]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001166:	e003      	b.n	8001170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	041a      	lsls	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e12b      	b.n	80013e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d106      	bne.n	80011a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fbf8 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2224      	movs	r2, #36	; 0x24
 80011ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011e0:	f000 ffea 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80011e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a81      	ldr	r2, [pc, #516]	; (80013f0 <HAL_I2C_Init+0x274>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d807      	bhi.n	8001200 <HAL_I2C_Init+0x84>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a80      	ldr	r2, [pc, #512]	; (80013f4 <HAL_I2C_Init+0x278>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	bf94      	ite	ls
 80011f8:	2301      	movls	r3, #1
 80011fa:	2300      	movhi	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e006      	b.n	800120e <HAL_I2C_Init+0x92>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a7d      	ldr	r2, [pc, #500]	; (80013f8 <HAL_I2C_Init+0x27c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	bf94      	ite	ls
 8001208:	2301      	movls	r3, #1
 800120a:	2300      	movhi	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0e7      	b.n	80013e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a78      	ldr	r2, [pc, #480]	; (80013fc <HAL_I2C_Init+0x280>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a6a      	ldr	r2, [pc, #424]	; (80013f0 <HAL_I2C_Init+0x274>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d802      	bhi.n	8001250 <HAL_I2C_Init+0xd4>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3301      	adds	r3, #1
 800124e:	e009      	b.n	8001264 <HAL_I2C_Init+0xe8>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <HAL_I2C_Init+0x284>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	3301      	adds	r3, #1
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	430b      	orrs	r3, r1
 800126a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	495c      	ldr	r1, [pc, #368]	; (80013f0 <HAL_I2C_Init+0x274>)
 8001280:	428b      	cmp	r3, r1
 8001282:	d819      	bhi.n	80012b8 <HAL_I2C_Init+0x13c>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1e59      	subs	r1, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001292:	1c59      	adds	r1, r3, #1
 8001294:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001298:	400b      	ands	r3, r1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00a      	beq.n	80012b4 <HAL_I2C_Init+0x138>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1e59      	subs	r1, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b2:	e051      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e04f      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d111      	bne.n	80012e4 <HAL_I2C_Init+0x168>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	440b      	add	r3, r1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	e012      	b.n	800130a <HAL_I2C_Init+0x18e>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Init+0x196>
 800130e:	2301      	movs	r3, #1
 8001310:	e022      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10e      	bne.n	8001338 <HAL_I2C_Init+0x1bc>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e58      	subs	r0, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	fbb0 f3f3 	udiv	r3, r0, r3
 800132c:	3301      	adds	r3, #1
 800132e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	e00f      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1e58      	subs	r0, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	0099      	lsls	r1, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	fbb0 f3f3 	udiv	r3, r0, r3
 800134e:	3301      	adds	r3, #1
 8001350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	6809      	ldr	r1, [r1, #0]
 800135c:	4313      	orrs	r3, r2
 800135e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6911      	ldr	r1, [r2, #16]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68d2      	ldr	r2, [r2, #12]
 8001392:	4311      	orrs	r1, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	430b      	orrs	r3, r1
 800139a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	000186a0 	.word	0x000186a0
 80013f4:	001e847f 	.word	0x001e847f
 80013f8:	003d08ff 	.word	0x003d08ff
 80013fc:	431bde83 	.word	0x431bde83
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	460b      	mov	r3, r1
 8001412:	817b      	strh	r3, [r7, #10]
 8001414:	4613      	mov	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fbea 	bl	8000bf0 <HAL_GetTick>
 800141c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	f040 80e0 	bne.w	80015ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2319      	movs	r3, #25
 8001432:	2201      	movs	r2, #1
 8001434:	4970      	ldr	r1, [pc, #448]	; (80015f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f964 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001442:	2302      	movs	r3, #2
 8001444:	e0d3      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_I2C_Master_Transmit+0x50>
 8001450:	2302      	movs	r3, #2
 8001452:	e0cc      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b01      	cmp	r3, #1
 8001468:	d007      	beq.n	800147a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001488:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2221      	movs	r2, #33	; 0x21
 800148e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2210      	movs	r2, #16
 8001496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	893a      	ldrh	r2, [r7, #8]
 80014aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4a50      	ldr	r2, [pc, #320]	; (80015fc <HAL_I2C_Master_Transmit+0x1f8>)
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014bc:	8979      	ldrh	r1, [r7, #10]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f89c 	bl	8001600 <I2C_MasterRequestWrite>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e08d      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014e8:	e066      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	6a39      	ldr	r1, [r7, #32]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f9de 	bl	80018b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00d      	beq.n	8001516 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06b      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d11b      	bne.n	800158c <HAL_I2C_Master_Transmit+0x188>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d017      	beq.n	800158c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	6a39      	ldr	r1, [r7, #32]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f9ce 	bl	8001932 <I2C_WaitOnBTFFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00d      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d107      	bne.n	80015b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e01a      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d194      	bne.n	80014ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e000      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015ec:	2302      	movs	r3, #2
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	00100002 	.word	0x00100002
 80015fc:	ffff0000 	.word	0xffff0000

08001600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	460b      	mov	r3, r1
 800160e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b08      	cmp	r3, #8
 800161a:	d006      	beq.n	800162a <I2C_MasterRequestWrite+0x2a>
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d003      	beq.n	800162a <I2C_MasterRequestWrite+0x2a>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001628:	d108      	bne.n	800163c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e00b      	b.n	8001654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	2b12      	cmp	r3, #18
 8001642:	d107      	bne.n	8001654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f84f 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00d      	beq.n	8001688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800167a:	d103      	bne.n	8001684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e035      	b.n	80016f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001690:	d108      	bne.n	80016a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	e01b      	b.n	80016dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016a4:	897b      	ldrh	r3, [r7, #10]
 80016a6:	11db      	asrs	r3, r3, #7
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0306 	and.w	r3, r3, #6
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f063 030f 	orn	r3, r3, #15
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <I2C_MasterRequestWrite+0xfc>)
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f875 	bl	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e010      	b.n	80016f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <I2C_MasterRequestWrite+0x100>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f865 	bl	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	00010008 	.word	0x00010008
 8001700:	00010002 	.word	0x00010002

08001704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001714:	e025      	b.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d021      	beq.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171e:	f7ff fa67 	bl	8000bf0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d302      	bcc.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e023      	b.n	80017aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10d      	bne.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x84>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4013      	ands	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf0c      	ite	eq
 800177e:	2301      	moveq	r3, #1
 8001780:	2300      	movne	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	e00c      	b.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4013      	ands	r3, r2
 8001794:	b29b      	uxth	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d0b6      	beq.n	8001716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017c0:	e051      	b.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d0:	d123      	bne.n	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f043 0204 	orr.w	r2, r3, #4
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e046      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d021      	beq.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001822:	f7ff f9e5 	bl	8000bf0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d302      	bcc.n	8001838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d116      	bne.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e020      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d10c      	bne.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4013      	ands	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	e00b      	b.n	80018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	43da      	mvns	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4013      	ands	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d18d      	bne.n	80017c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018bc:	e02d      	b.n	800191a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f878 	bl	80019b4 <I2C_IsAcknowledgeFailed>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e02d      	b.n	800192a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d021      	beq.n	800191a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff f98b 	bl	8000bf0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d116      	bne.n	800191a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2220      	movs	r2, #32
 80018f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f043 0220 	orr.w	r2, r3, #32
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e007      	b.n	800192a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d1ca      	bne.n	80018be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800193e:	e02d      	b.n	800199c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f837 	bl	80019b4 <I2C_IsAcknowledgeFailed>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e02d      	b.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001956:	d021      	beq.n	800199c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001958:	f7ff f94a 	bl	8000bf0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	429a      	cmp	r2, r3
 8001966:	d302      	bcc.n	800196e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e007      	b.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d1ca      	bne.n	8001940 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d11b      	bne.n	8001a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e272      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8087 	beq.w	8001b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a30:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d00c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a3c:	4b8f      	ldr	r3, [pc, #572]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d112      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5e>
 8001a48:	4b8c      	ldr	r3, [pc, #560]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d10b      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a56:	4b89      	ldr	r3, [pc, #548]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x12c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d168      	bne.n	8001b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e24c      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x76>
 8001a78:	4b80      	ldr	r3, [pc, #512]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a7f      	ldr	r2, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e02e      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd4>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x98>
 8001a8e:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7a      	ldr	r2, [pc, #488]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e01d      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0xbc>
 8001ab2:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a71      	ldr	r2, [pc, #452]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a6e      	ldr	r2, [pc, #440]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd4>
 8001acc:	4b6b      	ldr	r3, [pc, #428]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6a      	ldr	r2, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a67      	ldr	r2, [pc, #412]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f880 	bl	8000bf0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f87c 	bl	8000bf0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e200      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xe4>
 8001b12:	e014      	b.n	8001b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f86c 	bl	8000bf0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f868 	bl	8000bf0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1ec      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x10c>
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d063      	beq.n	8001c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d11c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x18c>
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d116      	bne.n	8001b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x176>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e1c0      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4939      	ldr	r1, [pc, #228]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	e03a      	b.n	8001c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff f821 	bl	8000bf0 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f81d 	bl	8000bf0 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1a1      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e015      	b.n	8001c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_RCC_OscConfig+0x270>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff f800 	bl	8000bf0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf4:	f7fe fffc 	bl	8000bf0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e180      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d03a      	beq.n	8001c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d019      	beq.n	8001c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_RCC_OscConfig+0x274>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe ffe0 	bl	8000bf0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7fe ffdc 	bl	8000bf0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e160      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f000 fac4 	bl	80021e0 <RCC_Delay>
 8001c58:	e01c      	b.n	8001c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7fe ffc6 	bl	8000bf0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c66:	e00f      	b.n	8001c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7fe ffc2 	bl	8000bf0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d908      	bls.n	8001c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e146      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	42420000 	.word	0x42420000
 8001c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e9      	bne.n	8001c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80a6 	beq.w	8001dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a87      	ldr	r2, [pc, #540]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b82      	ldr	r3, [pc, #520]	; (8001ed8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b7f      	ldr	r3, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x4c8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7e      	ldr	r2, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe ff83 	bl	8000bf0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7fe ff7f 	bl	8000bf0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	; 0x64
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e103      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b75      	ldr	r3, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x4c8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x312>
 8001d14:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	e02d      	b.n	8001d7e <HAL_RCC_OscConfig+0x36e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x334>
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	e01c      	b.n	8001d7e <HAL_RCC_OscConfig+0x36e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x356>
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	e00b      	b.n	8001d7e <HAL_RCC_OscConfig+0x36e>
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a57      	ldr	r2, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d015      	beq.n	8001db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff33 	bl	8000bf0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ff2f 	bl	8000bf0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0b1      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCC_OscConfig+0x37e>
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7fe ff1d 	bl	8000bf0 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7fe ff19 	bl	8000bf0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e09b      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a3b      	ldr	r2, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8087 	beq.w	8001f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d061      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d146      	bne.n	8001e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe feed 	bl	8000bf0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fee9 	bl	8000bf0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e06d      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4921      	ldr	r1, [pc, #132]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a19      	ldr	r1, [r3, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	430b      	orrs	r3, r1
 8001e66:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7fe febd 	bl	8000bf0 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7fe feb9 	bl	8000bf0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e03d      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x46a>
 8001e98:	e035      	b.n	8001f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fea6 	bl	8000bf0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe fea2 	bl	8000bf0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e026      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x498>
 8001ec6:	e01e      	b.n	8001f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e019      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x500>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0d0      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4965      	ldr	r1, [pc, #404]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b8      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	494d      	ldr	r1, [pc, #308]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d040      	beq.n	8002034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d115      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e07f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e073      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e06b      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f023 0203 	bic.w	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4936      	ldr	r1, [pc, #216]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fdf4 	bl	8000bf0 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	e00a      	b.n	8002022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f7fe fdf0 	bl	8000bf0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e053      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 020c 	and.w	r2, r3, #12
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	429a      	cmp	r2, r3
 8002032:	d1eb      	bne.n	800200c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d210      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4922      	ldr	r1, [pc, #136]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e032      	b.n	80020ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4916      	ldr	r1, [pc, #88]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a2:	f000 f821 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	490a      	ldr	r1, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1cc>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fd52 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	080061a0 	.word	0x080061a0
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20000014 	.word	0x20000014

080020e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b490      	push	{r4, r7}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_GetSysClockFreq+0xac>)
 80020f0:	1d3c      	adds	r4, r7, #4
 80020f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020f8:	f240 2301 	movw	r3, #513	; 0x201
 80020fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x40>
 8002122:	2b08      	cmp	r3, #8
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x46>
 8002126:	e02b      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_RCC_GetSysClockFreq+0xb4>)
 800212a:	623b      	str	r3, [r7, #32]
      break;
 800212c:	e02b      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	0c9b      	lsrs	r3, r3, #18
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3328      	adds	r3, #40	; 0x28
 8002138:	443b      	add	r3, r7
 800213a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800213e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb0>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	3328      	adds	r3, #40	; 0x28
 8002156:	443b      	add	r3, r7
 8002158:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800215c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002162:	fb03 f202 	mul.w	r2, r3, r2
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	e004      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	623b      	str	r3, [r7, #32]
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	6a3b      	ldr	r3, [r7, #32]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bc90      	pop	{r4, r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	080060d8 	.word	0x080060d8
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000010 	.word	0x20000010

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff2 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	080061b0 	.word	0x080061b0

080021e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <RCC_Delay+0x34>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <RCC_Delay+0x38>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0a5b      	lsrs	r3, r3, #9
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021fc:	bf00      	nop
  }
  while (Delay --);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	60fa      	str	r2, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <RCC_Delay+0x1c>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000010 	.word	0x20000010
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002222:	f3ef 8305 	mrs	r3, IPSR
 8002226:	60bb      	str	r3, [r7, #8]
  return(result);
 8002228:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222e:	f3ef 8310 	mrs	r3, PRIMASK
 8002232:	607b      	str	r3, [r7, #4]
  return(result);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <osKernelInitialize+0x32>
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <osKernelInitialize+0x60>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d109      	bne.n	8002256 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002242:	f3ef 8311 	mrs	r3, BASEPRI
 8002246:	603b      	str	r3, [r7, #0]
  return(result);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800224e:	f06f 0305 	mvn.w	r3, #5
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e00c      	b.n	8002270 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <osKernelInitialize+0x60>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <osKernelInitialize+0x60>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e002      	b.n	8002270 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	2000011c 	.word	0x2000011c

08002280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002286:	f3ef 8305 	mrs	r3, IPSR
 800228a:	60bb      	str	r3, [r7, #8]
  return(result);
 800228c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002292:	f3ef 8310 	mrs	r3, PRIMASK
 8002296:	607b      	str	r3, [r7, #4]
  return(result);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <osKernelStart+0x32>
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <osKernelStart+0x64>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d109      	bne.n	80022ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022a6:	f3ef 8311 	mrs	r3, BASEPRI
 80022aa:	603b      	str	r3, [r7, #0]
  return(result);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80022b2:	f06f 0305 	mvn.w	r3, #5
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e00e      	b.n	80022d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <osKernelStart+0x64>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <osKernelStart+0x64>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022c8:	f001 fcf8 	bl	8003cbc <vTaskStartScheduler>
      stat = osOK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e002      	b.n	80022d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000011c 	.word	0x2000011c

080022e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b092      	sub	sp, #72	; 0x48
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f8:	f3ef 8305 	mrs	r3, IPSR
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 8094 	bne.w	800242e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002306:	f3ef 8310 	mrs	r3, PRIMASK
 800230a:	623b      	str	r3, [r7, #32]
  return(result);
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 808d 	bne.w	800242e <osThreadNew+0x146>
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <osThreadNew+0x150>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d106      	bne.n	800232a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800231c:	f3ef 8311 	mrs	r3, BASEPRI
 8002320:	61fb      	str	r3, [r7, #28]
  return(result);
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8082 	bne.w	800242e <osThreadNew+0x146>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d07e      	beq.n	800242e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002334:	2318      	movs	r3, #24
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002338:	2300      	movs	r3, #0
 800233a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800233c:	f107 031b 	add.w	r3, r7, #27
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d045      	beq.n	80023da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <osThreadNew+0x74>
        name = attr->name;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <osThreadNew+0x9a>
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	2b38      	cmp	r3, #56	; 0x38
 8002374:	d805      	bhi.n	8002382 <osThreadNew+0x9a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <osThreadNew+0x9e>
        return (NULL);
 8002382:	2300      	movs	r3, #0
 8002384:	e054      	b.n	8002430 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <osThreadNew+0xd4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b5b      	cmp	r3, #91	; 0x5b
 80023a4:	d90a      	bls.n	80023bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <osThreadNew+0xd4>
        mem = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ba:	e010      	b.n	80023de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <osThreadNew+0xf6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <osThreadNew+0xf6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <osThreadNew+0xf6>
          mem = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d8:	e001      	b.n	80023de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d110      	bne.n	8002406 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023ec:	9202      	str	r2, [sp, #8]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f001 fa92 	bl	8003924 <xTaskCreateStatic>
 8002400:	4603      	mov	r3, r0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e013      	b.n	800242e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d110      	bne.n	800242e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	b29a      	uxth	r2, r3
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f001 fadc 	bl	80039dc <xTaskCreate>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <osThreadNew+0x146>
          hTask = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800242e:	697b      	ldr	r3, [r7, #20]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3738      	adds	r7, #56	; 0x38
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000011c 	.word	0x2000011c

0800243c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002444:	f3ef 8305 	mrs	r3, IPSR
 8002448:	613b      	str	r3, [r7, #16]
  return(result);
 800244a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002450:	f3ef 8310 	mrs	r3, PRIMASK
 8002454:	60fb      	str	r3, [r7, #12]
  return(result);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <osDelay+0x34>
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <osDelay+0x58>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d109      	bne.n	8002478 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002464:	f3ef 8311 	mrs	r3, BASEPRI
 8002468:	60bb      	str	r3, [r7, #8]
  return(result);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <osDelay+0x3c>
    stat = osErrorISR;
 8002470:	f06f 0305 	mvn.w	r3, #5
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e007      	b.n	8002488 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fbe6 	bl	8003c54 <vTaskDelay>
    }
  }

  return (stat);
 8002488:	697b      	ldr	r3, [r7, #20]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000011c 	.word	0x2000011c

08002498 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a8:	f3ef 8305 	mrs	r3, IPSR
 80024ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80024ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 8086 	bne.w	80025c2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b6:	f3ef 8310 	mrs	r3, PRIMASK
 80024ba:	617b      	str	r3, [r7, #20]
  return(result);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d17f      	bne.n	80025c2 <osSemaphoreNew+0x12a>
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <osSemaphoreNew+0x134>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d105      	bne.n	80024d6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ca:	f3ef 8311 	mrs	r3, BASEPRI
 80024ce:	613b      	str	r3, [r7, #16]
  return(result);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d175      	bne.n	80025c2 <osSemaphoreNew+0x12a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d072      	beq.n	80025c2 <osSemaphoreNew+0x12a>
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d86e      	bhi.n	80025c2 <osSemaphoreNew+0x12a>
    mem = -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <osSemaphoreNew+0x6e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b4f      	cmp	r3, #79	; 0x4f
 80024fe:	d902      	bls.n	8002506 <osSemaphoreNew+0x6e>
        mem = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	e00c      	b.n	8002520 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <osSemaphoreNew+0x88>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <osSemaphoreNew+0x88>
          mem = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	e001      	b.n	8002520 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d04c      	beq.n	80025c2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d128      	bne.n	8002580 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10a      	bne.n	800254a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2203      	movs	r2, #3
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2001      	movs	r0, #1
 8002542:	f000 fa4d 	bl	80029e0 <xQueueGenericCreateStatic>
 8002546:	6278      	str	r0, [r7, #36]	; 0x24
 8002548:	e005      	b.n	8002556 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800254a:	2203      	movs	r2, #3
 800254c:	2100      	movs	r1, #0
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fabd 	bl	8002ace <xQueueGenericCreate>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d022      	beq.n	80025a2 <osSemaphoreNew+0x10a>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01f      	beq.n	80025a2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002562:	2300      	movs	r3, #0
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800256a:	f000 fb7b 	bl	8002c64 <xQueueGenericSend>
 800256e:	4603      	mov	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d016      	beq.n	80025a2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002576:	f001 f805 	bl	8003584 <vQueueDelete>
            hSemaphore = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	e010      	b.n	80025a2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	461a      	mov	r2, r3
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fafe 	bl	8002b90 <xQueueCreateCountingSemaphoreStatic>
 8002594:	6278      	str	r0, [r7, #36]	; 0x24
 8002596:	e004      	b.n	80025a2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fb2f 	bl	8002bfe <xQueueCreateCountingSemaphore>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e001      	b.n	80025ba <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80025ba:	69f9      	ldr	r1, [r7, #28]
 80025bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025be:	f001 f92b 	bl	8003818 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000011c 	.word	0x2000011c

080025d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025e8:	f06f 0303 	mvn.w	r3, #3
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e04b      	b.n	8002688 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f0:	f3ef 8305 	mrs	r3, IPSR
 80025f4:	617b      	str	r3, [r7, #20]
  return(result);
 80025f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10f      	bne.n	800261c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002600:	613b      	str	r3, [r7, #16]
  return(result);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <osSemaphoreAcquire+0x4c>
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <osSemaphoreAcquire+0xc4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d128      	bne.n	8002662 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002610:	f3ef 8311 	mrs	r3, BASEPRI
 8002614:	60fb      	str	r3, [r7, #12]
  return(result);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d022      	beq.n	8002662 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8002622:	f06f 0303 	mvn.w	r3, #3
 8002626:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002628:	e02d      	b.n	8002686 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	461a      	mov	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	69b8      	ldr	r0, [r7, #24]
 8002638:	f000 ff24 	bl	8003484 <xQueueReceiveFromISR>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	d003      	beq.n	800264a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8002642:	f06f 0302 	mvn.w	r3, #2
 8002646:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002648:	e01d      	b.n	8002686 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01a      	beq.n	8002686 <osSemaphoreAcquire+0xb6>
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <osSemaphoreAcquire+0xc8>)
 8002652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002660:	e011      	b.n	8002686 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	69b8      	ldr	r0, [r7, #24]
 8002666:	f000 fe01 	bl	800326c <xQueueSemaphoreTake>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d00b      	beq.n	8002688 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8002676:	f06f 0301 	mvn.w	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	e004      	b.n	8002688 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800267e:	f06f 0302 	mvn.w	r3, #2
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e000      	b.n	8002688 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8002686:	bf00      	nop
      }
    }
  }

  return (stat);
 8002688:	69fb      	ldr	r3, [r7, #28]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000011c 	.word	0x2000011c
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80026b2:	f06f 0303 	mvn.w	r3, #3
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e03e      	b.n	8002738 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ba:	f3ef 8305 	mrs	r3, IPSR
 80026be:	617b      	str	r3, [r7, #20]
  return(result);
 80026c0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	613b      	str	r3, [r7, #16]
  return(result);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <osSemaphoreRelease+0x4a>
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <osSemaphoreRelease+0xa8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d120      	bne.n	800271c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026da:	f3ef 8311 	mrs	r3, BASEPRI
 80026de:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	4619      	mov	r1, r3
 80026f0:	69b8      	ldr	r0, [r7, #24]
 80026f2:	f000 fc4d 	bl	8002f90 <xQueueGiveFromISR>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d003      	beq.n	8002704 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80026fc:	f06f 0302 	mvn.w	r3, #2
 8002700:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002702:	e018      	b.n	8002736 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <osSemaphoreRelease+0x9a>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <osSemaphoreRelease+0xac>)
 800270c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800271a:	e00c      	b.n	8002736 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800271c:	2300      	movs	r3, #0
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	69b8      	ldr	r0, [r7, #24]
 8002724:	f000 fa9e 	bl	8002c64 <xQueueGenericSend>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d004      	beq.n	8002738 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800272e:	f06f 0302 	mvn.w	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e000      	b.n	8002738 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002736:	bf00      	nop
    }
  }

  return (stat);
 8002738:	69fb      	ldr	r3, [r7, #28]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000011c 	.word	0x2000011c
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a06      	ldr	r2, [pc, #24]	; (8002774 <vApplicationGetIdleTaskMemory+0x28>)
 800275c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <vApplicationGetIdleTaskMemory+0x2c>)
 8002762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000120 	.word	0x20000120
 8002778:	2000017c 	.word	0x2000017c

0800277c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800278c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <vApplicationGetTimerTaskMemory+0x30>)
 8002792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000037c 	.word	0x2000037c
 80027ac:	200003d8 	.word	0x200003d8

080027b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0208 	add.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0208 	add.w	r2, r3, #8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d103      	bne.n	800286c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e00c      	b.n	8002886 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3308      	adds	r3, #8
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e002      	b.n	800287a <vListInsert+0x2e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d2f6      	bcs.n	8002874 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6852      	ldr	r2, [r2, #4]
 80028dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800293a:	f002 fbf7 	bl	800512c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	68f9      	ldr	r1, [r7, #12]
 8002948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	441a      	add	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	3b01      	subs	r3, #1
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22ff      	movs	r2, #255	; 0xff
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d114      	bne.n	80029ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01a      	beq.n	80029ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3310      	adds	r3, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fc17 	bl	80041d0 <xTaskRemoveFromEventList>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <xQueueGenericReset+0xcc>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	e009      	b.n	80029ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3310      	adds	r3, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fef6 	bl	80027b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fef1 	bl	80027b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ce:	f002 fbdd 	bl	800518c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <xQueueGenericCreateStatic+0x52>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <xQueueGenericCreateStatic+0x56>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueGenericCreateStatic+0x58>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	623b      	str	r3, [r7, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <xQueueGenericCreateStatic+0x7e>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <xQueueGenericCreateStatic+0x82>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueGenericCreateStatic+0x84>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	61fb      	str	r3, [r7, #28]
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a7e:	2350      	movs	r3, #80	; 0x50
 8002a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b50      	cmp	r3, #80	; 0x50
 8002a86:	d00a      	beq.n	8002a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	61bb      	str	r3, [r7, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f843 	bl	8002b4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b08a      	sub	sp, #40	; 0x28
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	613b      	str	r3, [r7, #16]
}
 8002af4:	bf00      	nop
 8002af6:	e7fe      	b.n	8002af6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e004      	b.n	8002b0e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3350      	adds	r3, #80	; 0x50
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fc0a 	bl	800532c <pvPortMalloc>
 8002b18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00f      	beq.n	8002b40 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f805 	bl	8002b4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b40:	69bb      	ldr	r3, [r7, #24]
	}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e002      	b.n	8002b6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b78:	2101      	movs	r1, #1
 8002b7a:	69b8      	ldr	r0, [r7, #24]
 8002b7c:	f7ff fec8 	bl	8002910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	61bb      	str	r3, [r7, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	e7fe      	b.n	8002bb6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d90a      	bls.n	8002bd6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	617b      	str	r3, [r7, #20]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff fefd 	bl	80029e0 <xQueueGenericCreateStatic>
 8002be6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
	}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	613b      	str	r3, [r7, #16]
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d90a      	bls.n	8002c42 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	60fb      	str	r3, [r7, #12]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c42:	2202      	movs	r2, #2
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff41 	bl	8002ace <xQueueGenericCreate>
 8002c4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c5a:	697b      	ldr	r3, [r7, #20]
	}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0x32>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x40>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <xQueueGenericSend+0x44>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <xQueueGenericSend+0x46>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cc0:	bf00      	nop
 8002cc2:	e7fe      	b.n	8002cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <xQueueGenericSend+0x6e>
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericSend+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericSend+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	623b      	str	r3, [r7, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf2:	f001 fc2f 	bl	8004554 <xTaskGetSchedulerState>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <xQueueGenericSend+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <xQueueGenericSend+0xa2>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGenericSend+0xa4>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	61fb      	str	r3, [r7, #28]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d22:	f002 fa03 	bl	800512c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <xQueueGenericSend+0xd4>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d129      	bne.n	8002d8c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3e:	f000 fc5b 	bl	80035f8 <prvCopyDataToQueue>
 8002d42:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	3324      	adds	r3, #36	; 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fa3d 	bl	80041d0 <xTaskRemoveFromEventList>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e00a      	b.n	8002d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d84:	f002 fa02 	bl	800518c <vPortExitCritical>
				return pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e063      	b.n	8002e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d92:	f002 f9fb 	bl	800518c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e05c      	b.n	8002e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 fa77 	bl	8004298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dae:	f002 f9ed 	bl	800518c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db2:	f000 ffe9 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db6:	f002 f9b9 	bl	800512c <vPortEnterCritical>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x16c>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x182>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de6:	f002 f9d1 	bl	800518c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fa66 	bl	80042c4 <xTaskCheckForTimeOut>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d124      	bne.n	8002e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f000 fcf2 	bl	80037e8 <prvIsQueueFull>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 f98c 	bl	8004130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1a:	f000 fc7d 	bl	8003718 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e1e:	f000 ffc1 	bl	8003da4 <xTaskResumeAll>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af7c 	bne.w	8002d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	e772      	b.n	8002d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3e:	f000 fc6b 	bl	8003718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e42:	f000 ffaf 	bl	8003da4 <xTaskResumeAll>
 8002e46:	e76c      	b.n	8002d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4a:	f000 fc65 	bl	8003718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e4e:	f000 ffa9 	bl	8003da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
		}
	}
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	; 0x38
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSendFromISR+0x3c>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x40>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericSendFromISR+0x42>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	623b      	str	r3, [r7, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSendFromISR+0x6a>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSendFromISR+0x6e>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSendFromISR+0x70>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	61fb      	str	r3, [r7, #28]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eea:	f002 f9e1 	bl	80052b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eee:	f3ef 8211 	mrs	r2, BASEPRI
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	61ba      	str	r2, [r7, #24]
 8002f04:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f06:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <xQueueGenericSendFromISR+0xbc>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d12c      	bne.n	8002f76 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2c:	f000 fb64 	bl	80035f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f30:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d112      	bne.n	8002f60 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	3324      	adds	r3, #36	; 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f942 	bl	80041d0 <xTaskRemoveFromEventList>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e007      	b.n	8002f70 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f70:	2301      	movs	r3, #1
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f74:	e001      	b.n	8002f7a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3738      	adds	r7, #56	; 0x38
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	61fb      	str	r3, [r7, #28]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <xQueueGiveFromISR+0x58>
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <xQueueGiveFromISR+0x5c>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <xQueueGiveFromISR+0x5e>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	61bb      	str	r3, [r7, #24]
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003008:	f002 f952 	bl	80052b0 <vPortValidateInterruptPriority>
	__asm volatile
 800300c:	f3ef 8211 	mrs	r2, BASEPRI
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	617a      	str	r2, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003024:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003034:	429a      	cmp	r2, r3
 8003036:	d22b      	bcs.n	8003090 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800304a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d112      	bne.n	800307a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	3324      	adds	r3, #36	; 0x24
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f8b5 	bl	80041d0 <xTaskRemoveFromEventList>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800307e:	3301      	adds	r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800308a:	2301      	movs	r3, #1
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
 800308e:	e001      	b.n	8003094 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f383 8811 	msr	BASEPRI, r3
}
 800309e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3738      	adds	r7, #56	; 0x38
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <xQueueReceive+0x30>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	623b      	str	r3, [r7, #32]
}
 80030d8:	bf00      	nop
 80030da:	e7fe      	b.n	80030da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <xQueueReceive+0x3e>
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueReceive+0x42>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueReceive+0x44>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueReceive+0x5e>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61fb      	str	r3, [r7, #28]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800310a:	f001 fa23 	bl	8004554 <xTaskGetSchedulerState>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <xQueueReceive+0x6e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <xQueueReceive+0x72>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <xQueueReceive+0x74>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xQueueReceive+0x8e>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	61bb      	str	r3, [r7, #24]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800313a:	f001 fff7 	bl	800512c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01f      	beq.n	800318a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800314e:	f000 fabd 	bl	80036cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00f      	beq.n	8003182 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	3310      	adds	r3, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f832 	bl	80041d0 <xTaskRemoveFromEventList>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <xQueueReceive+0x1bc>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003182:	f002 f803 	bl	800518c <vPortExitCritical>
				return pdPASS;
 8003186:	2301      	movs	r3, #1
 8003188:	e069      	b.n	800325e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003190:	f001 fffc 	bl	800518c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003194:	2300      	movs	r3, #0
 8003196:	e062      	b.n	800325e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800319e:	f107 0310 	add.w	r3, r7, #16
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f878 	bl	8004298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ac:	f001 ffee 	bl	800518c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031b0:	f000 fdea 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031b4:	f001 ffba 	bl	800512c <vPortEnterCritical>
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d103      	bne.n	80031ce <xQueueReceive+0x122>
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d103      	bne.n	80031e4 <xQueueReceive+0x138>
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e4:	f001 ffd2 	bl	800518c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031e8:	1d3a      	adds	r2, r7, #4
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f867 	bl	80042c4 <xTaskCheckForTimeOut>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d123      	bne.n	8003244 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f000 fadd 	bl	80037bc <prvIsQueueEmpty>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff8d 	bl	8004130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003218:	f000 fa7e 	bl	8003718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800321c:	f000 fdc2 	bl	8003da4 <xTaskResumeAll>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d189      	bne.n	800313a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <xQueueReceive+0x1bc>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	e780      	b.n	800313a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323a:	f000 fa6d 	bl	8003718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800323e:	f000 fdb1 	bl	8003da4 <xTaskResumeAll>
 8003242:	e77a      	b.n	800313a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003246:	f000 fa67 	bl	8003718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800324a:	f000 fdab 	bl	8003da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800324e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003250:	f000 fab4 	bl	80037bc <prvIsQueueEmpty>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f43f af6f 	beq.w	800313a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800325c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800325e:	4618      	mov	r0, r3
 8003260:	3730      	adds	r7, #48	; 0x30
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	; 0x38
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	61fb      	str	r3, [r7, #28]
}
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 f94a 	bl	8004554 <xTaskGetSchedulerState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueSemaphoreTake+0x60>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueSemaphoreTake+0x64>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueSemaphoreTake+0x66>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	61bb      	str	r3, [r7, #24]
}
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ec:	f001 ff1e 	bl	800512c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d024      	beq.n	8003346 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	1e5a      	subs	r2, r3, #1
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800330c:	f001 faa2 	bl	8004854 <pvTaskIncrementMutexHeldCount>
 8003310:	4602      	mov	r2, r0
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	3310      	adds	r3, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff54 	bl	80041d0 <xTaskRemoveFromEventList>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800332e:	4b54      	ldr	r3, [pc, #336]	; (8003480 <xQueueSemaphoreTake+0x214>)
 8003330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800333e:	f001 ff25 	bl	800518c <vPortExitCritical>
				return pdPASS;
 8003342:	2301      	movs	r3, #1
 8003344:	e097      	b.n	8003476 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	617b      	str	r3, [r7, #20]
}
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003368:	f001 ff10 	bl	800518c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800336c:	2300      	movs	r3, #0
 800336e:	e082      	b.n	8003476 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	4618      	mov	r0, r3
 800337c:	f000 ff8c 	bl	8004298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003384:	f001 ff02 	bl	800518c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003388:	f000 fcfe 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800338c:	f001 fece 	bl	800512c <vPortEnterCritical>
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003396:	b25b      	sxtb	r3, r3
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d103      	bne.n	80033a6 <xQueueSemaphoreTake+0x13a>
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d103      	bne.n	80033bc <xQueueSemaphoreTake+0x150>
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033bc:	f001 fee6 	bl	800518c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c0:	463a      	mov	r2, r7
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ff7b 	bl	80042c4 <xTaskCheckForTimeOut>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d132      	bne.n	800343a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d6:	f000 f9f1 	bl	80037bc <prvIsQueueEmpty>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d026      	beq.n	800342e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033e8:	f001 fea0 	bl	800512c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f8cd 	bl	8004590 <xTaskPriorityInherit>
 80033f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033f8:	f001 fec8 	bl	800518c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	3324      	adds	r3, #36	; 0x24
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fe93 	bl	8004130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800340a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800340c:	f000 f984 	bl	8003718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003410:	f000 fcc8 	bl	8003da4 <xTaskResumeAll>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f47f af68 	bne.w	80032ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <xQueueSemaphoreTake+0x214>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	e75e      	b.n	80032ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800342e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003430:	f000 f972 	bl	8003718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003434:	f000 fcb6 	bl	8003da4 <xTaskResumeAll>
 8003438:	e758      	b.n	80032ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800343a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800343c:	f000 f96c 	bl	8003718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003440:	f000 fcb0 	bl	8003da4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003446:	f000 f9b9 	bl	80037bc <prvIsQueueEmpty>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	f43f af4d 	beq.w	80032ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003458:	f001 fe68 	bl	800512c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800345c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800345e:	f000 f8b4 	bl	80035ca <prvGetDisinheritPriorityAfterTimeout>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346a:	4618      	mov	r0, r3
 800346c:	f001 f96c 	bl	8004748 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003470:	f001 fe8c 	bl	800518c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003476:	4618      	mov	r0, r3
 8003478:	3738      	adds	r7, #56	; 0x38
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000ed04 	.word	0xe000ed04

08003484 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	623b      	str	r3, [r7, #32]
}
 80034ac:	bf00      	nop
 80034ae:	e7fe      	b.n	80034ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <xQueueReceiveFromISR+0x3a>
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueReceiveFromISR+0x3e>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueReceiveFromISR+0x40>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61fb      	str	r3, [r7, #28]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034de:	f001 fee7 	bl	80052b0 <vPortValidateInterruptPriority>
	__asm volatile
 80034e2:	f3ef 8211 	mrs	r2, BASEPRI
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	61ba      	str	r2, [r7, #24]
 80034f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02f      	beq.n	800356a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003518:	f000 f8d8 	bl	80036cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d112      	bne.n	8003554 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	3310      	adds	r3, #16
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fe48 	bl	80041d0 <xTaskRemoveFromEventList>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003558:	3301      	adds	r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	b25a      	sxtb	r2, r3
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003564:	2301      	movs	r3, #1
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
 8003568:	e001      	b.n	800356e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f383 8811 	msr	BASEPRI, r3
}
 8003578:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800357c:	4618      	mov	r0, r3
 800357e:	3738      	adds	r7, #56	; 0x38
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <vQueueDelete+0x28>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f95b 	bl	8003868 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f001 ff79 	bl	80054b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e001      	b.n	80035ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035ec:	68fb      	ldr	r3, [r7, #12]
	}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d14d      	bne.n	80036ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f001 f822 	bl	800466c <xTaskPriorityDisinherit>
 8003628:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	e043      	b.n	80036ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d119      	bne.n	800366c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6898      	ldr	r0, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	461a      	mov	r2, r3
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	f002 f874 	bl	8005730 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d32b      	bcc.n	80036ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	e026      	b.n	80036ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68d8      	ldr	r0, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	461a      	mov	r2, r3
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	f002 f85a 	bl	8005730 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	425b      	negs	r3, r3
 8003686:	441a      	add	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d207      	bcs.n	80036a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	425b      	negs	r3, r3
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d105      	bne.n	80036ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036c2:	697b      	ldr	r3, [r7, #20]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d018      	beq.n	8003710 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	441a      	add	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d303      	bcc.n	8003700 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68d9      	ldr	r1, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	461a      	mov	r2, r3
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f002 f810 	bl	8005730 <memcpy>
	}
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003720:	f001 fd04 	bl	800512c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800372a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800372c:	e011      	b.n	8003752 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3324      	adds	r3, #36	; 0x24
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fd48 	bl	80041d0 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003746:	f000 fe1f 	bl	8004388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3b01      	subs	r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	dce9      	bgt.n	800372e <prvUnlockQueue+0x16>
 800375a:	e000      	b.n	800375e <prvUnlockQueue+0x46>
					break;
 800375c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003766:	f001 fd11 	bl	800518c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800376a:	f001 fcdf 	bl	800512c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003774:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003776:	e011      	b.n	800379c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3310      	adds	r3, #16
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fd23 	bl	80041d0 <xTaskRemoveFromEventList>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003790:	f000 fdfa 	bl	8004388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	3b01      	subs	r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800379c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dce9      	bgt.n	8003778 <prvUnlockQueue+0x60>
 80037a4:	e000      	b.n	80037a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	22ff      	movs	r2, #255	; 0xff
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037b0:	f001 fcec 	bl	800518c <vPortExitCritical>
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037c4:	f001 fcb2 	bl	800512c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e001      	b.n	80037da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037da:	f001 fcd7 	bl	800518c <vPortExitCritical>

	return xReturn;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037f0:	f001 fc9c 	bl	800512c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d102      	bne.n	8003806 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e001      	b.n	800380a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800380a:	f001 fcbf 	bl	800518c <vPortExitCritical>

	return xReturn;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e014      	b.n	8003852 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <vQueueAddToRegistry+0x4c>)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <vQueueAddToRegistry+0x4c>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <vQueueAddToRegistry+0x4c>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800384a:	e006      	b.n	800385a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3301      	adds	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b07      	cmp	r3, #7
 8003856:	d9e7      	bls.n	8003828 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	200007d8 	.word	0x200007d8

08003868 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e016      	b.n	80038a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <vQueueUnregisterQueue+0x50>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d10b      	bne.n	800389e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003886:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <vQueueUnregisterQueue+0x50>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2100      	movs	r1, #0
 800388c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <vQueueUnregisterQueue+0x50>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
				break;
 800389c:	e006      	b.n	80038ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	d9e5      	bls.n	8003876 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	200007d8 	.word	0x200007d8

080038bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038cc:	f001 fc2e 	bl	800512c <vPortEnterCritical>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d103      	bne.n	80038e6 <vQueueWaitForMessageRestricted+0x2a>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d103      	bne.n	80038fc <vQueueWaitForMessageRestricted+0x40>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fc:	f001 fc46 	bl	800518c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fc31 	bl	8004178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff fefe 	bl	8003718 <prvUnlockQueue>
	}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	; 0x38
 8003928:	af04      	add	r7, sp, #16
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	623b      	str	r3, [r7, #32]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xTaskCreateStatic+0x46>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61fb      	str	r3, [r7, #28]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800396a:	235c      	movs	r3, #92	; 0x5c
 800396c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b5c      	cmp	r3, #92	; 0x5c
 8003972:	d00a      	beq.n	800398a <xTaskCreateStatic+0x66>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01e      	beq.n	80039ce <xTaskCreateStatic+0xaa>
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01b      	beq.n	80039ce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	2300      	movs	r3, #0
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f850 	bl	8003a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c8:	f000 f8d4 	bl	8003b74 <prvAddNewTaskToReadyList>
 80039cc:	e001      	b.n	80039d2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d2:	697b      	ldr	r3, [r7, #20]
	}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af04      	add	r7, sp, #16
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fc9b 	bl	800532c <pvPortMalloc>
 80039f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039fe:	205c      	movs	r0, #92	; 0x5c
 8003a00:	f001 fc94 	bl	800532c <pvPortMalloc>
 8003a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
 8003a12:	e005      	b.n	8003a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f001 fd4d 	bl	80054b4 <vPortFree>
 8003a1a:	e001      	b.n	8003a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	9302      	str	r3, [sp, #8]
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f80e 	bl	8003a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4a:	69f8      	ldr	r0, [r7, #28]
 8003a4c:	f000 f892 	bl	8003b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e002      	b.n	8003a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	21a5      	movs	r1, #165	; 0xa5
 8003a80:	f001 fe64 	bl	800574c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f023 0307 	bic.w	r3, r3, #7
 8003a9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <prvInitialiseNewTask+0x58>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	617b      	str	r3, [r7, #20]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e012      	b.n	8003aea <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	7819      	ldrb	r1, [r3, #0]
 8003acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3334      	adds	r3, #52	; 0x34
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d9e9      	bls.n	8003ac4 <prvInitialiseNewTask+0x5e>
 8003af0:	e000      	b.n	8003af4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003af2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b37      	cmp	r3, #55	; 0x37
 8003b00:	d901      	bls.n	8003b06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b02:	2337      	movs	r3, #55	; 0x37
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2200      	movs	r2, #0
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fe66 	bl	80027ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	3318      	adds	r3, #24
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fe61 	bl	80027ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	69b8      	ldr	r0, [r7, #24]
 8003b56:	f001 f9f7 	bl	8004f48 <pxPortInitialiseStack>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b7c:	f001 fad6 	bl	800512c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d110      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba0:	f000 fc16 	bl	80043d0 <prvInitialiseTaskLists>
 8003ba4:	e00d      	b.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d802      	bhi.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <prvAddNewTaskToReadyList+0x74>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <prvAddNewTaskToReadyList+0xd8>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7fe fe01 	bl	8002806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c04:	f001 fac2 	bl	800518c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d207      	bcs.n	8003c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <prvAddNewTaskToReadyList+0xdc>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000cec 	.word	0x20000cec
 8003c3c:	20000818 	.word	0x20000818
 8003c40:	20000cf8 	.word	0x20000cf8
 8003c44:	20000d08 	.word	0x20000d08
 8003c48:	20000cf4 	.word	0x20000cf4
 8003c4c:	2000081c 	.word	0x2000081c
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <vTaskDelay+0x60>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <vTaskDelay+0x30>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60bb      	str	r3, [r7, #8]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c84:	f000 f880 	bl	8003d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c88:	2100      	movs	r1, #0
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fdf6 	bl	800487c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c90:	f000 f888 	bl	8003da4 <xTaskResumeAll>
 8003c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <vTaskDelay+0x64>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000d14 	.word	0x20000d14
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cca:	463a      	mov	r2, r7
 8003ccc:	1d39      	adds	r1, r7, #4
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fd3a 	bl	800274c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	4921      	ldr	r1, [pc, #132]	; (8003d70 <vTaskStartScheduler+0xb4>)
 8003cec:	4821      	ldr	r0, [pc, #132]	; (8003d74 <vTaskStartScheduler+0xb8>)
 8003cee:	f7ff fe19 	bl	8003924 <xTaskCreateStatic>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <vTaskStartScheduler+0xbc>)
 8003cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <vTaskStartScheduler+0xbc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e001      	b.n	8003d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d10:	f000 fe08 	bl	8004924 <xTimerCreateTimerTask>
 8003d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d116      	bne.n	8003d4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	613b      	str	r3, [r7, #16]
}
 8003d2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <vTaskStartScheduler+0xc0>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <vTaskStartScheduler+0xc4>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <vTaskStartScheduler+0xc8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d44:	f001 f980 	bl	8005048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d48:	e00e      	b.n	8003d68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d10a      	bne.n	8003d68 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60fb      	str	r3, [r7, #12]
}
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <vTaskStartScheduler+0xaa>
}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	080060e8 	.word	0x080060e8
 8003d74:	080043a1 	.word	0x080043a1
 8003d78:	20000d10 	.word	0x20000d10
 8003d7c:	20000d0c 	.word	0x20000d0c
 8003d80:	20000cf8 	.word	0x20000cf8
 8003d84:	20000cf0 	.word	0x20000cf0

08003d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d94:	6013      	str	r3, [r2, #0]
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000d14 	.word	0x20000d14

08003da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003db2:	4b42      	ldr	r3, [pc, #264]	; (8003ebc <xTaskResumeAll+0x118>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	603b      	str	r3, [r7, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dd0:	f001 f9ac 	bl	800512c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dd4:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <xTaskResumeAll+0x118>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <xTaskResumeAll+0x118>)
 8003ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	4b37      	ldr	r3, [pc, #220]	; (8003ebc <xTaskResumeAll+0x118>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d162      	bne.n	8003eac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <xTaskResumeAll+0x11c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d05e      	beq.n	8003eac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dee:	e02f      	b.n	8003e50 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fd5d 	bl	80028bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fd58 	bl	80028bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <xTaskResumeAll+0x124>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d903      	bls.n	8003e20 <xTaskResumeAll+0x7c>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <xTaskResumeAll+0x124>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <xTaskResumeAll+0x128>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7fe fce5 	bl	8002806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1cb      	bne.n	8003df0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e5e:	f000 fb55 	bl	800450c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <xTaskResumeAll+0x134>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d010      	beq.n	8003e90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e6e:	f000 f845 	bl	8003efc <xTaskIncrementTick>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f1      	bne.n	8003e6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <xTaskResumeAll+0x134>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <xTaskResumeAll+0x138>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eac:	f001 f96e 	bl	800518c <vPortExitCritical>

	return xAlreadyYielded;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000d14 	.word	0x20000d14
 8003ec0:	20000cec 	.word	0x20000cec
 8003ec4:	20000cac 	.word	0x20000cac
 8003ec8:	20000cf4 	.word	0x20000cf4
 8003ecc:	2000081c 	.word	0x2000081c
 8003ed0:	20000818 	.word	0x20000818
 8003ed4:	20000d00 	.word	0x20000d00
 8003ed8:	20000cfc 	.word	0x20000cfc
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <xTaskGetTickCount+0x18>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003eec:	687b      	ldr	r3, [r7, #4]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	20000cf0 	.word	0x20000cf0

08003efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f06:	4b51      	ldr	r3, [pc, #324]	; (800404c <xTaskIncrementTick+0x150>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 808e 	bne.w	800402c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f18:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d120      	bne.n	8003f66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	603b      	str	r3, [r7, #0]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <xTaskIncrementTick+0x46>
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <xTaskIncrementTick+0x15c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a41      	ldr	r2, [pc, #260]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4a41      	ldr	r2, [pc, #260]	; (8004058 <xTaskIncrementTick+0x15c>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b40      	ldr	r3, [pc, #256]	; (800405c <xTaskIncrementTick+0x160>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <xTaskIncrementTick+0x160>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	f000 fad3 	bl	800450c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f66:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <xTaskIncrementTick+0x164>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d34e      	bcc.n	800400e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <xTaskIncrementTick+0x82>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xTaskIncrementTick+0x84>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <xTaskIncrementTick+0x164>)
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	601a      	str	r2, [r3, #0]
					break;
 8003f8c:	e03f      	b.n	800400e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d203      	bcs.n	8003fae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <xTaskIncrementTick+0x164>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6013      	str	r3, [r2, #0]
						break;
 8003fac:	e02f      	b.n	800400e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fc82 	bl	80028bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe fc79 	bl	80028bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <xTaskIncrementTick+0x168>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <xTaskIncrementTick+0xe2>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <xTaskIncrementTick+0x168>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <xTaskIncrementTick+0x16c>)
 8003fec:	441a      	add	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fc06 	bl	8002806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <xTaskIncrementTick+0x170>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	429a      	cmp	r2, r3
 8004006:	d3b3      	bcc.n	8003f70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400c:	e7b0      	b.n	8003f70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800400e:	4b17      	ldr	r3, [pc, #92]	; (800406c <xTaskIncrementTick+0x170>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4914      	ldr	r1, [pc, #80]	; (8004068 <xTaskIncrementTick+0x16c>)
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d907      	bls.n	8004036 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e004      	b.n	8004036 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <xTaskIncrementTick+0x174>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a0f      	ldr	r2, [pc, #60]	; (8004070 <xTaskIncrementTick+0x174>)
 8004034:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <xTaskIncrementTick+0x178>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000d14 	.word	0x20000d14
 8004050:	20000cf0 	.word	0x20000cf0
 8004054:	20000ca4 	.word	0x20000ca4
 8004058:	20000ca8 	.word	0x20000ca8
 800405c:	20000d04 	.word	0x20000d04
 8004060:	20000d0c 	.word	0x20000d0c
 8004064:	20000cf4 	.word	0x20000cf4
 8004068:	2000081c 	.word	0x2000081c
 800406c:	20000818 	.word	0x20000818
 8004070:	20000cfc 	.word	0x20000cfc
 8004074:	20000d00 	.word	0x20000d00

08004078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800407e:	4b27      	ldr	r3, [pc, #156]	; (800411c <vTaskSwitchContext+0xa4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <vTaskSwitchContext+0xa8>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800408c:	e041      	b.n	8004112 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <vTaskSwitchContext+0xa8>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <vTaskSwitchContext+0xac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e010      	b.n	80040be <vTaskSwitchContext+0x46>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vTaskSwitchContext+0x3e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	491a      	ldr	r1, [pc, #104]	; (8004128 <vTaskSwitchContext+0xb0>)
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0e4      	beq.n	800409c <vTaskSwitchContext+0x24>
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <vTaskSwitchContext+0xb0>)
 80040de:	4413      	add	r3, r2
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3308      	adds	r3, #8
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <vTaskSwitchContext+0x8a>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a08      	ldr	r2, [pc, #32]	; (800412c <vTaskSwitchContext+0xb4>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4a05      	ldr	r2, [pc, #20]	; (8004124 <vTaskSwitchContext+0xac>)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	20000d14 	.word	0x20000d14
 8004120:	20000d00 	.word	0x20000d00
 8004124:	20000cf4 	.word	0x20000cf4
 8004128:	2000081c 	.word	0x2000081c
 800412c:	20000818 	.word	0x20000818

08004130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60fb      	str	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <vTaskPlaceOnEventList+0x44>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3318      	adds	r3, #24
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe fb74 	bl	800284c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004164:	2101      	movs	r1, #1
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	f000 fb88 	bl	800487c <prvAddCurrentTaskToDelayedList>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000818 	.word	0x20000818

08004178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	617b      	str	r3, [r7, #20]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <vTaskPlaceOnEventListRestricted+0x54>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3318      	adds	r3, #24
 80041a6:	4619      	mov	r1, r3
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fe fb2c 	bl	8002806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68b8      	ldr	r0, [r7, #8]
 80041be:	f000 fb5d 	bl	800487c <prvAddCurrentTaskToDelayedList>
	}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000818 	.word	0x20000818

080041d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	60fb      	str	r3, [r7, #12]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	3318      	adds	r3, #24
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fb5b 	bl	80028bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <xTaskRemoveFromEventList+0xb0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11d      	bne.n	800424a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3304      	adds	r3, #4
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fb52 	bl	80028bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <xTaskRemoveFromEventList+0xb4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <xTaskRemoveFromEventList+0x5c>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a16      	ldr	r2, [pc, #88]	; (8004284 <xTaskRemoveFromEventList+0xb4>)
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <xTaskRemoveFromEventList+0xb8>)
 800423a:	441a      	add	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fe fadf 	bl	8002806 <vListInsertEnd>
 8004248:	e005      	b.n	8004256 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3318      	adds	r3, #24
 800424e:	4619      	mov	r1, r3
 8004250:	480e      	ldr	r0, [pc, #56]	; (800428c <xTaskRemoveFromEventList+0xbc>)
 8004252:	f7fe fad8 	bl	8002806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <xTaskRemoveFromEventList+0xc0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	429a      	cmp	r2, r3
 8004262:	d905      	bls.n	8004270 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <xTaskRemoveFromEventList+0xc4>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e001      	b.n	8004274 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004274:	697b      	ldr	r3, [r7, #20]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000d14 	.word	0x20000d14
 8004284:	20000cf4 	.word	0x20000cf4
 8004288:	2000081c 	.word	0x2000081c
 800428c:	20000cac 	.word	0x20000cac
 8004290:	20000818 	.word	0x20000818
 8004294:	20000d00 	.word	0x20000d00

08004298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <vTaskInternalSetTimeOutState+0x24>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <vTaskInternalSetTimeOutState+0x28>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000d04 	.word	0x20000d04
 80042c0:	20000cf0 	.word	0x20000cf0

080042c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60fb      	str	r3, [r7, #12]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004306:	f000 ff11 	bl	800512c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800430a:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <xTaskCheckForTimeOut+0xbc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d102      	bne.n	800432a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e023      	b.n	8004372 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <xTaskCheckForTimeOut+0xc0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d007      	beq.n	8004346 <xTaskCheckForTimeOut+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e015      	b.n	8004372 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	d20b      	bcs.n	8004368 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad2      	subs	r2, r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff9b 	bl	8004298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e004      	b.n	8004372 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004372:	f000 ff0b 	bl	800518c <vPortExitCritical>

	return xReturn;
 8004376:	69fb      	ldr	r3, [r7, #28]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000cf0 	.word	0x20000cf0
 8004384:	20000d04 	.word	0x20000d04

08004388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <vTaskMissedYield+0x14>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000d00 	.word	0x20000d00

080043a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043a8:	f000 f852 	bl	8004450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <prvIdleTask+0x28>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d9f9      	bls.n	80043a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <prvIdleTask+0x2c>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043c4:	e7f0      	b.n	80043a8 <prvIdleTask+0x8>
 80043c6:	bf00      	nop
 80043c8:	2000081c 	.word	0x2000081c
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e00c      	b.n	80043f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4a12      	ldr	r2, [pc, #72]	; (8004430 <prvInitialiseTaskLists+0x60>)
 80043e8:	4413      	add	r3, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f9e0 	bl	80027b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b37      	cmp	r3, #55	; 0x37
 80043fa:	d9ef      	bls.n	80043dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043fc:	480d      	ldr	r0, [pc, #52]	; (8004434 <prvInitialiseTaskLists+0x64>)
 80043fe:	f7fe f9d7 	bl	80027b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <prvInitialiseTaskLists+0x68>)
 8004404:	f7fe f9d4 	bl	80027b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004408:	480c      	ldr	r0, [pc, #48]	; (800443c <prvInitialiseTaskLists+0x6c>)
 800440a:	f7fe f9d1 	bl	80027b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800440e:	480c      	ldr	r0, [pc, #48]	; (8004440 <prvInitialiseTaskLists+0x70>)
 8004410:	f7fe f9ce 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004414:	480b      	ldr	r0, [pc, #44]	; (8004444 <prvInitialiseTaskLists+0x74>)
 8004416:	f7fe f9cb 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <prvInitialiseTaskLists+0x78>)
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <prvInitialiseTaskLists+0x64>)
 800441e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvInitialiseTaskLists+0x7c>)
 8004422:	4a05      	ldr	r2, [pc, #20]	; (8004438 <prvInitialiseTaskLists+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000081c 	.word	0x2000081c
 8004434:	20000c7c 	.word	0x20000c7c
 8004438:	20000c90 	.word	0x20000c90
 800443c:	20000cac 	.word	0x20000cac
 8004440:	20000cc0 	.word	0x20000cc0
 8004444:	20000cd8 	.word	0x20000cd8
 8004448:	20000ca4 	.word	0x20000ca4
 800444c:	20000ca8 	.word	0x20000ca8

08004450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004456:	e019      	b.n	800448c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004458:	f000 fe68 	bl	800512c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <prvCheckTasksWaitingTermination+0x50>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fa27 	bl	80028bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <prvCheckTasksWaitingTermination+0x54>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <prvCheckTasksWaitingTermination+0x54>)
 8004476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <prvCheckTasksWaitingTermination+0x58>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <prvCheckTasksWaitingTermination+0x58>)
 8004480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004482:	f000 fe83 	bl	800518c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f810 	bl	80044ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <prvCheckTasksWaitingTermination+0x58>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e1      	bne.n	8004458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000cc0 	.word	0x20000cc0
 80044a4:	20000cec 	.word	0x20000cec
 80044a8:	20000cd4 	.word	0x20000cd4

080044ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fff6 	bl	80054b4 <vPortFree>
				vPortFree( pxTCB );
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fff3 	bl	80054b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ce:	e018      	b.n	8004502 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d103      	bne.n	80044e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 ffea 	bl	80054b4 <vPortFree>
	}
 80044e0:	e00f      	b.n	8004502 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00a      	beq.n	8004502 <prvDeleteTCB+0x56>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <prvDeleteTCB+0x54>
	}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <prvResetNextTaskUnblockTime+0x14>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <prvResetNextTaskUnblockTime+0x16>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800452e:	e008      	b.n	8004542 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	20000ca4 	.word	0x20000ca4
 8004550:	20000d0c 	.word	0x20000d0c

08004554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <xTaskGetSchedulerState+0x34>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004562:	2301      	movs	r3, #1
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	e008      	b.n	800457a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <xTaskGetSchedulerState+0x38>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004570:	2302      	movs	r3, #2
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e001      	b.n	800457a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800457a:	687b      	ldr	r3, [r7, #4]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000cf8 	.word	0x20000cf8
 800458c:	20000d14 	.word	0x20000d14

08004590 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d056      	beq.n	8004654 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <xTaskPriorityInherit+0xd0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d246      	bcs.n	8004642 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db06      	blt.n	80045ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <xTaskPriorityInherit+0xd0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6959      	ldr	r1, [r3, #20]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <xTaskPriorityInherit+0xd4>)
 80045dc:	4413      	add	r3, r2
 80045de:	4299      	cmp	r1, r3
 80045e0:	d101      	bne.n	80045e6 <xTaskPriorityInherit+0x56>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xTaskPriorityInherit+0x58>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d022      	beq.n	8004632 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f963 	bl	80028bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <xTaskPriorityInherit+0xd0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <xTaskPriorityInherit+0xd8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d903      	bls.n	8004614 <xTaskPriorityInherit+0x84>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4a15      	ldr	r2, [pc, #84]	; (8004668 <xTaskPriorityInherit+0xd8>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <xTaskPriorityInherit+0xd4>)
 8004622:	441a      	add	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe f8eb 	bl	8002806 <vListInsertEnd>
 8004630:	e004      	b.n	800463c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <xTaskPriorityInherit+0xd0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e008      	b.n	8004654 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <xTaskPriorityInherit+0xd0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d201      	bcs.n	8004654 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004654:	68fb      	ldr	r3, [r7, #12]
	}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000818 	.word	0x20000818
 8004664:	2000081c 	.word	0x2000081c
 8004668:	20000cf4 	.word	0x20000cf4

0800466c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d056      	beq.n	8004730 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004682:	4b2e      	ldr	r3, [pc, #184]	; (800473c <xTaskPriorityDisinherit+0xd0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d00a      	beq.n	80046a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60fb      	str	r3, [r7, #12]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60bb      	str	r3, [r7, #8]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d02c      	beq.n	8004730 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d128      	bne.n	8004730 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f8ea 	bl	80028bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <xTaskPriorityDisinherit+0xd4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d903      	bls.n	8004710 <xTaskPriorityDisinherit+0xa4>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <xTaskPriorityDisinherit+0xd4>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <xTaskPriorityDisinherit+0xd8>)
 800471e:	441a      	add	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f7fe f86d 	bl	8002806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004730:	697b      	ldr	r3, [r7, #20]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000818 	.word	0x20000818
 8004740:	20000cf4 	.word	0x20000cf4
 8004744:	2000081c 	.word	0x2000081c

08004748 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004756:	2301      	movs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d06f      	beq.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d902      	bls.n	800478e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e002      	b.n	8004794 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004792:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	429a      	cmp	r2, r3
 800479c:	d050      	beq.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d14b      	bne.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10a      	bne.n	80047c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db04      	blt.n	80047e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6959      	ldr	r1, [r3, #20]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047f6:	4413      	add	r3, r2
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d101      	bne.n	8004800 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01c      	beq.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3304      	adds	r3, #4
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f856 	bl	80028bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d903      	bls.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4a06      	ldr	r2, [pc, #24]	; (800484c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004832:	441a      	add	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7fd ffe3 	bl	8002806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004840:	bf00      	nop
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000818 	.word	0x20000818
 800484c:	2000081c 	.word	0x2000081c
 8004850:	20000cf4 	.word	0x20000cf4

08004854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <pvTaskIncrementMutexHeldCount+0x24>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <pvTaskIncrementMutexHeldCount+0x24>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004866:	3201      	adds	r2, #1
 8004868:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <pvTaskIncrementMutexHeldCount+0x24>)
 800486c:	681b      	ldr	r3, [r3, #0]
	}
 800486e:	4618      	mov	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000818 	.word	0x20000818

0800487c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <prvAddCurrentTaskToDelayedList+0x90>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f812 	bl	80028bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d10a      	bne.n	80048b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a6:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4819      	ldr	r0, [pc, #100]	; (8004914 <prvAddCurrentTaskToDelayedList+0x98>)
 80048b0:	f7fd ffa9 	bl	8002806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048b4:	e026      	b.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4413      	add	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d209      	bcs.n	80048e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fd ffb6 	bl	800284c <vListInsert>
}
 80048e0:	e010      	b.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <prvAddCurrentTaskToDelayedList+0xa0>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvAddCurrentTaskToDelayedList+0x94>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fd ffac 	bl	800284c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d202      	bcs.n	8004904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6013      	str	r3, [r2, #0]
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000cf0 	.word	0x20000cf0
 8004910:	20000818 	.word	0x20000818
 8004914:	20000cd8 	.word	0x20000cd8
 8004918:	20000ca8 	.word	0x20000ca8
 800491c:	20000ca4 	.word	0x20000ca4
 8004920:	20000d0c 	.word	0x20000d0c

08004924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800492e:	f000 facb 	bl	8004ec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xTimerCreateTimerTask+0x80>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d021      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	f107 0108 	add.w	r1, r7, #8
 8004948:	f107 030c 	add.w	r3, r7, #12
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd ff15 	bl	800277c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2302      	movs	r3, #2
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	460a      	mov	r2, r1
 8004964:	4910      	ldr	r1, [pc, #64]	; (80049a8 <xTimerCreateTimerTask+0x84>)
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <xTimerCreateTimerTask+0x88>)
 8004968:	f7fe ffdc 	bl	8003924 <xTaskCreateStatic>
 800496c:	4603      	mov	r3, r0
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004970:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000d48 	.word	0x20000d48
 80049a8:	080060f0 	.word	0x080060f0
 80049ac:	08004ad1 	.word	0x08004ad1
 80049b0:	20000d4c 	.word	0x20000d4c

080049b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	623b      	str	r3, [r7, #32]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <xTimerGenericCommand+0x98>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02a      	beq.n	8004a40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	dc18      	bgt.n	8004a2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049fc:	f7ff fdaa 	bl	8004554 <xTaskGetSchedulerState>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d109      	bne.n	8004a1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <xTimerGenericCommand+0x98>)
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	f107 0110 	add.w	r1, r7, #16
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a12:	f7fe f927 	bl	8002c64 <xQueueGenericSend>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24
 8004a18:	e012      	b.n	8004a40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <xTimerGenericCommand+0x98>)
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	f107 0110 	add.w	r1, r7, #16
 8004a22:	2300      	movs	r3, #0
 8004a24:	2200      	movs	r2, #0
 8004a26:	f7fe f91d 	bl	8002c64 <xQueueGenericSend>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a2c:	e008      	b.n	8004a40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <xTimerGenericCommand+0x98>)
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	f107 0110 	add.w	r1, r7, #16
 8004a36:	2300      	movs	r3, #0
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f7fe fa11 	bl	8002e60 <xQueueGenericSendFromISR>
 8004a3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3728      	adds	r7, #40	; 0x28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000d48 	.word	0x20000d48

08004a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <prvProcessExpiredTimer+0x7c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fd ff27 	bl	80028bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d122      	bne.n	8004abc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	18d1      	adds	r1, r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	6978      	ldr	r0, [r7, #20]
 8004a84:	f000 f8c8 	bl	8004c18 <prvInsertTimerInActiveList>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	2100      	movs	r1, #0
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f7ff ff8b 	bl	80049b4 <xTimerGenericCommand>
 8004a9e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60fb      	str	r3, [r7, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	6978      	ldr	r0, [r7, #20]
 8004ac2:	4798      	blx	r3
}
 8004ac4:	bf00      	nop
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000d40 	.word	0x20000d40

08004ad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad8:	f107 0308 	add.w	r3, r7, #8
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f857 	bl	8004b90 <prvGetNextExpireTime>
 8004ae2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f803 	bl	8004af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aee:	f000 f8d5 	bl	8004c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af2:	e7f1      	b.n	8004ad8 <prvTimerTask+0x8>

08004af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004afe:	f7ff f943 	bl	8003d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f866 	bl	8004bd8 <prvSampleTimeNow>
 8004b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d130      	bne.n	8004b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <prvProcessTimerOrBlockTask+0x3c>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d806      	bhi.n	8004b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b22:	f7ff f93f 	bl	8003da4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff91 	bl	8004a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b2e:	e024      	b.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <prvProcessTimerOrBlockTask+0x90>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <prvProcessTimerOrBlockTask+0x94>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	f7fe feb1 	bl	80038bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b5a:	f7ff f923 	bl	8003da4 <xTaskResumeAll>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <prvProcessTimerOrBlockTask+0x98>)
 8004b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	f3bf 8f6f 	isb	sy
}
 8004b74:	e001      	b.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b76:	f7ff f915 	bl	8003da4 <xTaskResumeAll>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000d44 	.word	0x20000d44
 8004b88:	20000d48 	.word	0x20000d48
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <prvGetNextExpireTime+0x44>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvGetNextExpireTime+0x44>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e001      	b.n	8004bc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000d40 	.word	0x20000d40

08004bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004be0:	f7ff f97e 	bl	8003ee0 <xTaskGetTickCount>
 8004be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <prvSampleTimeNow+0x3c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d205      	bcs.n	8004bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bf0:	f000 f908 	bl	8004e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <prvSampleTimeNow+0x3c>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000d50 	.word	0x20000d50

08004c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d812      	bhi.n	8004c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e01b      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <prvInsertTimerInActiveList+0x7c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fd fdf5 	bl	800284c <vListInsert>
 8004c62:	e012      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d206      	bcs.n	8004c7a <prvInsertTimerInActiveList+0x62>
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e007      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvInsertTimerInActiveList+0x80>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7fd fde1 	bl	800284c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c8a:	697b      	ldr	r3, [r7, #20]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000d44 	.word	0x20000d44
 8004c98:	20000d40 	.word	0x20000d40

08004c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ca2:	e09d      	b.n	8004de0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da18      	bge.n	8004cdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	3304      	adds	r3, #4
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61fb      	str	r3, [r7, #28]
}
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd2:	6850      	ldr	r0, [r2, #4]
 8004cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd6:	6892      	ldr	r2, [r2, #8]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	db7d      	blt.n	8004dde <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd fde2 	bl	80028bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff6c 	bl	8004bd8 <prvSampleTimeNow>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b09      	cmp	r3, #9
 8004d06:	d86b      	bhi.n	8004de0 <prvProcessReceivedCommands+0x144>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <prvProcessReceivedCommands+0x74>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d39 	.word	0x08004d39
 8004d1c:	08004de1 	.word	0x08004de1
 8004d20:	08004d95 	.word	0x08004d95
 8004d24:	08004dcd 	.word	0x08004dcd
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d39 	.word	0x08004d39
 8004d30:	08004de1 	.word	0x08004de1
 8004d34:	08004d95 	.word	0x08004d95
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	18d1      	adds	r1, r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d46:	f7ff ff67 	bl	8004c18 <prvInsertTimerInActiveList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d047      	beq.n	8004de0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d13f      	bne.n	8004de0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	441a      	add	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f7ff fe1f 	bl	80049b4 <xTimerGenericCommand>
 8004d76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d130      	bne.n	8004de0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61bb      	str	r3, [r7, #24]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	617b      	str	r3, [r7, #20]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	18d1      	adds	r1, r2, r3
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc6:	f7ff ff27 	bl	8004c18 <prvInsertTimerInActiveList>
					break;
 8004dca:	e009      	b.n	8004de0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd8:	f000 fb6c 	bl	80054b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ddc:	e000      	b.n	8004de0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dde:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <prvProcessReceivedCommands+0x164>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	1d39      	adds	r1, r7, #4
 8004de6:	2200      	movs	r2, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe f95f 	bl	80030ac <xQueueReceive>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af57 	bne.w	8004ca4 <prvProcessReceivedCommands+0x8>
	}
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	3730      	adds	r7, #48	; 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000d48 	.word	0x20000d48

08004e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e0a:	e045      	b.n	8004e98 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e0c:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e16:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fd49 	bl	80028bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d12e      	bne.n	8004e98 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d90e      	bls.n	8004e6a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fd fcf2 	bl	800284c <vListInsert>
 8004e68:	e016      	b.n	8004e98 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	2100      	movs	r1, #0
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fd9d 	bl	80049b4 <xTimerGenericCommand>
 8004e7a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	603b      	str	r3, [r7, #0]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1b4      	bne.n	8004e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <prvSwitchTimerLists+0xc0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <prvSwitchTimerLists+0xbc>)
 8004eae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <prvSwitchTimerLists+0xc0>)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6013      	str	r3, [r2, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000d40 	.word	0x20000d40
 8004ec4:	20000d44 	.word	0x20000d44

08004ec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ece:	f000 f92d 	bl	800512c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <prvCheckForValidListAndQueue+0x60>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d120      	bne.n	8004f1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eda:	4814      	ldr	r0, [pc, #80]	; (8004f2c <prvCheckForValidListAndQueue+0x64>)
 8004edc:	f7fd fc68 	bl	80027b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ee0:	4813      	ldr	r0, [pc, #76]	; (8004f30 <prvCheckForValidListAndQueue+0x68>)
 8004ee2:	f7fd fc65 	bl	80027b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <prvCheckForValidListAndQueue+0x6c>)
 8004ee8:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <prvCheckForValidListAndQueue+0x64>)
 8004eea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <prvCheckForValidListAndQueue+0x70>)
 8004eee:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <prvCheckForValidListAndQueue+0x68>)
 8004ef0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <prvCheckForValidListAndQueue+0x74>)
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <prvCheckForValidListAndQueue+0x78>)
 8004efa:	2110      	movs	r1, #16
 8004efc:	200a      	movs	r0, #10
 8004efe:	f7fd fd6f 	bl	80029e0 <xQueueGenericCreateStatic>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <prvCheckForValidListAndQueue+0x60>)
 8004f06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <prvCheckForValidListAndQueue+0x60>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <prvCheckForValidListAndQueue+0x60>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	490b      	ldr	r1, [pc, #44]	; (8004f44 <prvCheckForValidListAndQueue+0x7c>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fc7e 	bl	8003818 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f1c:	f000 f936 	bl	800518c <vPortExitCritical>
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000d48 	.word	0x20000d48
 8004f2c:	20000d18 	.word	0x20000d18
 8004f30:	20000d2c 	.word	0x20000d2c
 8004f34:	20000d40 	.word	0x20000d40
 8004f38:	20000d44 	.word	0x20000d44
 8004f3c:	20000df4 	.word	0x20000df4
 8004f40:	20000d54 	.word	0x20000d54
 8004f44:	080060f8 	.word	0x080060f8

08004f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b04      	subs	r3, #4
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <pxPortInitialiseStack+0x54>)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b14      	subs	r3, #20
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b20      	subs	r3, #32
 8004f8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	08004fa1 	.word	0x08004fa1

08004fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvTaskExitError+0x54>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d00a      	beq.n	8004fca <prvTaskExitError+0x2a>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <prvTaskExitError+0x28>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	60bb      	str	r3, [r7, #8]
}
 8004fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fde:	bf00      	nop
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0fc      	beq.n	8004fe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000001c 	.word	0x2000001c
	...

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	f04e 0e0d 	orr.w	lr, lr, #13
 800501e:	4770      	bx	lr

08005020 <pxCurrentTCBConst2>:
 8005020:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005028:	4806      	ldr	r0, [pc, #24]	; (8005044 <prvPortStartFirstTask+0x1c>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	b662      	cpsie	i
 8005034:	b661      	cpsie	f
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	df00      	svc	0
 8005040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005042:	bf00      	nop
 8005044:	e000ed08 	.word	0xe000ed08

08005048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800504e:	4b32      	ldr	r3, [pc, #200]	; (8005118 <xPortStartScheduler+0xd0>)
 8005050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <xPortStartScheduler+0xd4>)
 8005074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <xPortStartScheduler+0xd8>)
 8005078:	2207      	movs	r2, #7
 800507a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507c:	e009      	b.n	8005092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <xPortStartScheduler+0xd8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	4a26      	ldr	r2, [pc, #152]	; (8005120 <xPortStartScheduler+0xd8>)
 8005086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d0ef      	beq.n	800507e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800509e:	4b20      	ldr	r3, [pc, #128]	; (8005120 <xPortStartScheduler+0xd8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1c3 0307 	rsb	r3, r3, #7
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d00a      	beq.n	80050c0 <xPortStartScheduler+0x78>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050c0:	4b17      	ldr	r3, [pc, #92]	; (8005120 <xPortStartScheduler+0xd8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <xPortStartScheduler+0xd8>)
 80050c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <xPortStartScheduler+0xd8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <xPortStartScheduler+0xd8>)
 80050d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050de:	4b11      	ldr	r3, [pc, #68]	; (8005124 <xPortStartScheduler+0xdc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a10      	ldr	r2, [pc, #64]	; (8005124 <xPortStartScheduler+0xdc>)
 80050e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <xPortStartScheduler+0xdc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0d      	ldr	r2, [pc, #52]	; (8005124 <xPortStartScheduler+0xdc>)
 80050f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f6:	f000 f8b9 	bl	800526c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <xPortStartScheduler+0xe0>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005100:	f7ff ff92 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005104:	f7fe ffb8 	bl	8004078 <vTaskSwitchContext>
	prvTaskExitError();
 8005108:	f7ff ff4a 	bl	8004fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000e400 	.word	0xe000e400
 800511c:	20000e44 	.word	0x20000e44
 8005120:	20000e48 	.word	0x20000e48
 8005124:	e000ed20 	.word	0xe000ed20
 8005128:	2000001c 	.word	0x2000001c

0800512c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	607b      	str	r3, [r7, #4]
}
 8005144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <vPortEnterCritical+0x58>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <vPortEnterCritical+0x58>)
 800514e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <vPortEnterCritical+0x58>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10f      	bne.n	8005178 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <vPortEnterCritical+0x5c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <vPortEnterCritical+0x4c>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	603b      	str	r3, [r7, #0]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <vPortEnterCritical+0x4a>
	}
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000001c 	.word	0x2000001c
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <vPortExitCritical+0x4c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <vPortExitCritical+0x24>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <vPortExitCritical+0x4c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <vPortExitCritical+0x4c>)
 80051b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <vPortExitCritical+0x4c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <vPortExitCritical+0x42>
 80051c2:	2300      	movs	r3, #0
 80051c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f383 8811 	msr	BASEPRI, r3
}
 80051cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	2000001c 	.word	0x2000001c
 80051dc:	00000000 	.word	0x00000000

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f0:	6010      	str	r0, [r2, #0]
 80051f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051fa:	f380 8811 	msr	BASEPRI, r0
 80051fe:	f7fe ff3b 	bl	8004078 <vTaskSwitchContext>
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005216:	f380 8809 	msr	PSP, r0
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	4770      	bx	lr

08005220 <pxCurrentTCBConst>:
 8005220:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7fe fe5b 	bl	8003efc <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <xPortSysTickHandler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <vPortSetupTimerInterrupt+0x30>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <vPortSetupTimerInterrupt+0x38>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <vPortSetupTimerInterrupt+0x3c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <vPortSetupTimerInterrupt+0x40>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b03      	ldr	r3, [pc, #12]	; (800529c <vPortSetupTimerInterrupt+0x30>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	e000e010 	.word	0xe000e010
 80052a0:	e000e018 	.word	0xe000e018
 80052a4:	20000010 	.word	0x20000010
 80052a8:	10624dd3 	.word	0x10624dd3
 80052ac:	e000e014 	.word	0xe000e014

080052b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052b6:	f3ef 8305 	mrs	r3, IPSR
 80052ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	d914      	bls.n	80052ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052c2:	4a16      	ldr	r2, [pc, #88]	; (800531c <vPortValidateInterruptPriority+0x6c>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <vPortValidateInterruptPriority+0x70>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	7afa      	ldrb	r2, [r7, #11]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d20a      	bcs.n	80052ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	607b      	str	r3, [r7, #4]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052ec:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <vPortValidateInterruptPriority+0x74>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <vPortValidateInterruptPriority+0x78>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d90a      	bls.n	8005312 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	603b      	str	r3, [r7, #0]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <vPortValidateInterruptPriority+0x60>
	}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	e000e3f0 	.word	0xe000e3f0
 8005320:	20000e44 	.word	0x20000e44
 8005324:	e000ed0c 	.word	0xe000ed0c
 8005328:	20000e48 	.word	0x20000e48

0800532c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005338:	f7fe fd26 	bl	8003d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800533c:	4b58      	ldr	r3, [pc, #352]	; (80054a0 <pvPortMalloc+0x174>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005344:	f000 f910 	bl	8005568 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005348:	4b56      	ldr	r3, [pc, #344]	; (80054a4 <pvPortMalloc+0x178>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 808e 	bne.w	8005472 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01d      	beq.n	8005398 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800535c:	2208      	movs	r2, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f023 0307 	bic.w	r3, r3, #7
 8005374:	3308      	adds	r3, #8
 8005376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <pvPortMalloc+0x6c>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617b      	str	r3, [r7, #20]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d069      	beq.n	8005472 <pvPortMalloc+0x146>
 800539e:	4b42      	ldr	r3, [pc, #264]	; (80054a8 <pvPortMalloc+0x17c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d864      	bhi.n	8005472 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053a8:	4b40      	ldr	r3, [pc, #256]	; (80054ac <pvPortMalloc+0x180>)
 80053aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ac:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <pvPortMalloc+0x180>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b2:	e004      	b.n	80053be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d903      	bls.n	80053d0 <pvPortMalloc+0xa4>
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f1      	bne.n	80053b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053d0:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <pvPortMalloc+0x174>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d04b      	beq.n	8005472 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2208      	movs	r2, #8
 80053e0:	4413      	add	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	2308      	movs	r3, #8
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d91f      	bls.n	800543c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <pvPortMalloc+0xf8>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	613b      	str	r3, [r7, #16]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005436:	69b8      	ldr	r0, [r7, #24]
 8005438:	f000 f8f8 	bl	800562c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <pvPortMalloc+0x17c>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <pvPortMalloc+0x17c>)
 8005448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544a:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <pvPortMalloc+0x17c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <pvPortMalloc+0x184>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d203      	bcs.n	800545e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <pvPortMalloc+0x17c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <pvPortMalloc+0x184>)
 800545c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <pvPortMalloc+0x178>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	431a      	orrs	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005472:	f7fe fc97 	bl	8003da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <pvPortMalloc+0x16a>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <pvPortMalloc+0x168>
	return pvReturn;
 8005496:	69fb      	ldr	r3, [r7, #28]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20001a54 	.word	0x20001a54
 80054a4:	20001a60 	.word	0x20001a60
 80054a8:	20001a58 	.word	0x20001a58
 80054ac:	20001a4c 	.word	0x20001a4c
 80054b0:	20001a5c 	.word	0x20001a5c

080054b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d048      	beq.n	8005558 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c6:	2308      	movs	r3, #8
 80054c8:	425b      	negs	r3, r3
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <vPortFree+0xac>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <vPortFree+0x44>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <vPortFree+0x62>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60bb      	str	r3, [r7, #8]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <vPortFree+0xac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d115      	bne.n	8005558 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <vPortFree+0xac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800553c:	f7fe fc24 	bl	8003d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <vPortFree+0xb0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4413      	add	r3, r2
 800554a:	4a06      	ldr	r2, [pc, #24]	; (8005564 <vPortFree+0xb0>)
 800554c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f000 f86c 	bl	800562c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005554:	f7fe fc26 	bl	8003da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005558:	bf00      	nop
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20001a60 	.word	0x20001a60
 8005564:	20001a58 	.word	0x20001a58

08005568 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800556e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005572:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005574:	4b27      	ldr	r3, [pc, #156]	; (8005614 <prvHeapInit+0xac>)
 8005576:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3307      	adds	r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <prvHeapInit+0xac>)
 8005598:	4413      	add	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <prvHeapInit+0xb0>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055a6:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <prvHeapInit+0xb0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055b4:	2208      	movs	r2, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <prvHeapInit+0xb4>)
 80055c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <prvHeapInit+0xb4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <prvHeapInit+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <prvHeapInit+0xb4>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <prvHeapInit+0xb8>)
 80055f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4a09      	ldr	r2, [pc, #36]	; (8005624 <prvHeapInit+0xbc>)
 80055fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <prvHeapInit+0xc0>)
 8005602:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000e4c 	.word	0x20000e4c
 8005618:	20001a4c 	.word	0x20001a4c
 800561c:	20001a54 	.word	0x20001a54
 8005620:	20001a5c 	.word	0x20001a5c
 8005624:	20001a58 	.word	0x20001a58
 8005628:	20001a60 	.word	0x20001a60

0800562c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005634:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e002      	b.n	8005640 <prvInsertBlockIntoFreeList+0x14>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d8f7      	bhi.n	800563a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4413      	add	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d108      	bne.n	800566e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	441a      	add	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d118      	bne.n	80056b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <prvInsertBlockIntoFreeList+0xac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d00d      	beq.n	80056aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e008      	b.n	80056bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <prvInsertBlockIntoFreeList+0xac>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e003      	b.n	80056bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d002      	beq.n	80056ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	20001a4c 	.word	0x20001a4c
 80056d8:	20001a54 	.word	0x20001a54

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	; (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000020 	.word	0x20000020

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	2600      	movs	r6, #0
 80056ec:	4d0c      	ldr	r5, [pc, #48]	; (8005720 <__libc_init_array+0x38>)
 80056ee:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	f000 fc9c 	bl	8006034 <_init>
 80056fc:	2600      	movs	r6, #0
 80056fe:	4d0a      	ldr	r5, [pc, #40]	; (8005728 <__libc_init_array+0x40>)
 8005700:	4c0a      	ldr	r4, [pc, #40]	; (800572c <__libc_init_array+0x44>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	080061ec 	.word	0x080061ec
 8005724:	080061ec 	.word	0x080061ec
 8005728:	080061ec 	.word	0x080061ec
 800572c:	080061f0 	.word	0x080061f0

08005730 <memcpy>:
 8005730:	440a      	add	r2, r1
 8005732:	4291      	cmp	r1, r2
 8005734:	f100 33ff 	add.w	r3, r0, #4294967295
 8005738:	d100      	bne.n	800573c <memcpy+0xc>
 800573a:	4770      	bx	lr
 800573c:	b510      	push	{r4, lr}
 800573e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005742:	4291      	cmp	r1, r2
 8005744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005748:	d1f9      	bne.n	800573e <memcpy+0xe>
 800574a:	bd10      	pop	{r4, pc}

0800574c <memset>:
 800574c:	4603      	mov	r3, r0
 800574e:	4402      	add	r2, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <siprintf>:
 800575c:	b40e      	push	{r1, r2, r3}
 800575e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005762:	b500      	push	{lr}
 8005764:	b09c      	sub	sp, #112	; 0x70
 8005766:	ab1d      	add	r3, sp, #116	; 0x74
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	9006      	str	r0, [sp, #24]
 800576c:	9107      	str	r1, [sp, #28]
 800576e:	9104      	str	r1, [sp, #16]
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <siprintf+0x38>)
 8005772:	4909      	ldr	r1, [pc, #36]	; (8005798 <siprintf+0x3c>)
 8005774:	f853 2b04 	ldr.w	r2, [r3], #4
 8005778:	9105      	str	r1, [sp, #20]
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	a902      	add	r1, sp, #8
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	f000 f868 	bl	8005854 <_svfiprintf_r>
 8005784:	2200      	movs	r2, #0
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	b01c      	add	sp, #112	; 0x70
 800578c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005790:	b003      	add	sp, #12
 8005792:	4770      	bx	lr
 8005794:	20000020 	.word	0x20000020
 8005798:	ffff0208 	.word	0xffff0208

0800579c <__ssputs_r>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	688e      	ldr	r6, [r1, #8]
 80057a2:	4682      	mov	sl, r0
 80057a4:	429e      	cmp	r6, r3
 80057a6:	460c      	mov	r4, r1
 80057a8:	4690      	mov	r8, r2
 80057aa:	461f      	mov	r7, r3
 80057ac:	d838      	bhi.n	8005820 <__ssputs_r+0x84>
 80057ae:	898a      	ldrh	r2, [r1, #12]
 80057b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057b4:	d032      	beq.n	800581c <__ssputs_r+0x80>
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	6909      	ldr	r1, [r1, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	eba5 0901 	sub.w	r9, r5, r1
 80057c0:	6965      	ldr	r5, [r4, #20]
 80057c2:	444b      	add	r3, r9
 80057c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057cc:	106d      	asrs	r5, r5, #1
 80057ce:	429d      	cmp	r5, r3
 80057d0:	bf38      	it	cc
 80057d2:	461d      	movcc	r5, r3
 80057d4:	0553      	lsls	r3, r2, #21
 80057d6:	d531      	bpl.n	800583c <__ssputs_r+0xa0>
 80057d8:	4629      	mov	r1, r5
 80057da:	f000 fb61 	bl	8005ea0 <_malloc_r>
 80057de:	4606      	mov	r6, r0
 80057e0:	b950      	cbnz	r0, 80057f8 <__ssputs_r+0x5c>
 80057e2:	230c      	movs	r3, #12
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	f8ca 3000 	str.w	r3, [sl]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	464a      	mov	r2, r9
 80057fa:	6921      	ldr	r1, [r4, #16]
 80057fc:	f7ff ff98 	bl	8005730 <memcpy>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	6126      	str	r6, [r4, #16]
 800580e:	444e      	add	r6, r9
 8005810:	6026      	str	r6, [r4, #0]
 8005812:	463e      	mov	r6, r7
 8005814:	6165      	str	r5, [r4, #20]
 8005816:	eba5 0509 	sub.w	r5, r5, r9
 800581a:	60a5      	str	r5, [r4, #8]
 800581c:	42be      	cmp	r6, r7
 800581e:	d900      	bls.n	8005822 <__ssputs_r+0x86>
 8005820:	463e      	mov	r6, r7
 8005822:	4632      	mov	r2, r6
 8005824:	4641      	mov	r1, r8
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	f000 fab8 	bl	8005d9c <memmove>
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	2000      	movs	r0, #0
 8005830:	1b9b      	subs	r3, r3, r6
 8005832:	60a3      	str	r3, [r4, #8]
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	4433      	add	r3, r6
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	e7db      	b.n	80057f4 <__ssputs_r+0x58>
 800583c:	462a      	mov	r2, r5
 800583e:	f000 fba3 	bl	8005f88 <_realloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	2800      	cmp	r0, #0
 8005846:	d1e1      	bne.n	800580c <__ssputs_r+0x70>
 8005848:	4650      	mov	r0, sl
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	f000 fac0 	bl	8005dd0 <_free_r>
 8005850:	e7c7      	b.n	80057e2 <__ssputs_r+0x46>
	...

08005854 <_svfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	4698      	mov	r8, r3
 800585a:	898b      	ldrh	r3, [r1, #12]
 800585c:	4607      	mov	r7, r0
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	460d      	mov	r5, r1
 8005862:	4614      	mov	r4, r2
 8005864:	b09d      	sub	sp, #116	; 0x74
 8005866:	d50e      	bpl.n	8005886 <_svfiprintf_r+0x32>
 8005868:	690b      	ldr	r3, [r1, #16]
 800586a:	b963      	cbnz	r3, 8005886 <_svfiprintf_r+0x32>
 800586c:	2140      	movs	r1, #64	; 0x40
 800586e:	f000 fb17 	bl	8005ea0 <_malloc_r>
 8005872:	6028      	str	r0, [r5, #0]
 8005874:	6128      	str	r0, [r5, #16]
 8005876:	b920      	cbnz	r0, 8005882 <_svfiprintf_r+0x2e>
 8005878:	230c      	movs	r3, #12
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	e0d1      	b.n	8005a26 <_svfiprintf_r+0x1d2>
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	616b      	str	r3, [r5, #20]
 8005886:	2300      	movs	r3, #0
 8005888:	9309      	str	r3, [sp, #36]	; 0x24
 800588a:	2320      	movs	r3, #32
 800588c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005890:	2330      	movs	r3, #48	; 0x30
 8005892:	f04f 0901 	mov.w	r9, #1
 8005896:	f8cd 800c 	str.w	r8, [sp, #12]
 800589a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a40 <_svfiprintf_r+0x1ec>
 800589e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a2:	4623      	mov	r3, r4
 80058a4:	469a      	mov	sl, r3
 80058a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058aa:	b10a      	cbz	r2, 80058b0 <_svfiprintf_r+0x5c>
 80058ac:	2a25      	cmp	r2, #37	; 0x25
 80058ae:	d1f9      	bne.n	80058a4 <_svfiprintf_r+0x50>
 80058b0:	ebba 0b04 	subs.w	fp, sl, r4
 80058b4:	d00b      	beq.n	80058ce <_svfiprintf_r+0x7a>
 80058b6:	465b      	mov	r3, fp
 80058b8:	4622      	mov	r2, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	4638      	mov	r0, r7
 80058be:	f7ff ff6d 	bl	800579c <__ssputs_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	f000 80aa 	beq.w	8005a1c <_svfiprintf_r+0x1c8>
 80058c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ca:	445a      	add	r2, fp
 80058cc:	9209      	str	r2, [sp, #36]	; 0x24
 80058ce:	f89a 3000 	ldrb.w	r3, [sl]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80a2 	beq.w	8005a1c <_svfiprintf_r+0x1c8>
 80058d8:	2300      	movs	r3, #0
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e2:	f10a 0a01 	add.w	sl, sl, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9307      	str	r3, [sp, #28]
 80058ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ee:	931a      	str	r3, [sp, #104]	; 0x68
 80058f0:	4654      	mov	r4, sl
 80058f2:	2205      	movs	r2, #5
 80058f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f8:	4851      	ldr	r0, [pc, #324]	; (8005a40 <_svfiprintf_r+0x1ec>)
 80058fa:	f000 fa41 	bl	8005d80 <memchr>
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	b9d8      	cbnz	r0, 800593a <_svfiprintf_r+0xe6>
 8005902:	06d0      	lsls	r0, r2, #27
 8005904:	bf44      	itt	mi
 8005906:	2320      	movmi	r3, #32
 8005908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800590c:	0711      	lsls	r1, r2, #28
 800590e:	bf44      	itt	mi
 8005910:	232b      	movmi	r3, #43	; 0x2b
 8005912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b2a      	cmp	r3, #42	; 0x2a
 800591c:	d015      	beq.n	800594a <_svfiprintf_r+0xf6>
 800591e:	4654      	mov	r4, sl
 8005920:	2000      	movs	r0, #0
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	4621      	mov	r1, r4
 800592a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592e:	3b30      	subs	r3, #48	; 0x30
 8005930:	2b09      	cmp	r3, #9
 8005932:	d94e      	bls.n	80059d2 <_svfiprintf_r+0x17e>
 8005934:	b1b0      	cbz	r0, 8005964 <_svfiprintf_r+0x110>
 8005936:	9207      	str	r2, [sp, #28]
 8005938:	e014      	b.n	8005964 <_svfiprintf_r+0x110>
 800593a:	eba0 0308 	sub.w	r3, r0, r8
 800593e:	fa09 f303 	lsl.w	r3, r9, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	46a2      	mov	sl, r4
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	e7d2      	b.n	80058f0 <_svfiprintf_r+0x9c>
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	1d19      	adds	r1, r3, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfbb      	ittet	lt
 8005956:	425b      	neglt	r3, r3
 8005958:	f042 0202 	orrlt.w	r2, r2, #2
 800595c:	9307      	strge	r3, [sp, #28]
 800595e:	9307      	strlt	r3, [sp, #28]
 8005960:	bfb8      	it	lt
 8005962:	9204      	strlt	r2, [sp, #16]
 8005964:	7823      	ldrb	r3, [r4, #0]
 8005966:	2b2e      	cmp	r3, #46	; 0x2e
 8005968:	d10c      	bne.n	8005984 <_svfiprintf_r+0x130>
 800596a:	7863      	ldrb	r3, [r4, #1]
 800596c:	2b2a      	cmp	r3, #42	; 0x2a
 800596e:	d135      	bne.n	80059dc <_svfiprintf_r+0x188>
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	3402      	adds	r4, #2
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9203      	str	r2, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfb8      	it	lt
 800597e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a44 <_svfiprintf_r+0x1f0>
 8005988:	2203      	movs	r2, #3
 800598a:	4650      	mov	r0, sl
 800598c:	7821      	ldrb	r1, [r4, #0]
 800598e:	f000 f9f7 	bl	8005d80 <memchr>
 8005992:	b140      	cbz	r0, 80059a6 <_svfiprintf_r+0x152>
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	eba0 000a 	sub.w	r0, r0, sl
 800599a:	fa03 f000 	lsl.w	r0, r3, r0
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	3401      	adds	r4, #1
 80059a2:	4303      	orrs	r3, r0
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059aa:	2206      	movs	r2, #6
 80059ac:	4826      	ldr	r0, [pc, #152]	; (8005a48 <_svfiprintf_r+0x1f4>)
 80059ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b2:	f000 f9e5 	bl	8005d80 <memchr>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d038      	beq.n	8005a2c <_svfiprintf_r+0x1d8>
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <_svfiprintf_r+0x1f8>)
 80059bc:	bb1b      	cbnz	r3, 8005a06 <_svfiprintf_r+0x1b2>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	3307      	adds	r3, #7
 80059c2:	f023 0307 	bic.w	r3, r3, #7
 80059c6:	3308      	adds	r3, #8
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059cc:	4433      	add	r3, r6
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	e767      	b.n	80058a2 <_svfiprintf_r+0x4e>
 80059d2:	460c      	mov	r4, r1
 80059d4:	2001      	movs	r0, #1
 80059d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059da:	e7a5      	b.n	8005928 <_svfiprintf_r+0xd4>
 80059dc:	2300      	movs	r3, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4619      	mov	r1, r3
 80059e4:	3401      	adds	r4, #1
 80059e6:	9305      	str	r3, [sp, #20]
 80059e8:	4620      	mov	r0, r4
 80059ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ee:	3a30      	subs	r2, #48	; 0x30
 80059f0:	2a09      	cmp	r2, #9
 80059f2:	d903      	bls.n	80059fc <_svfiprintf_r+0x1a8>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0c5      	beq.n	8005984 <_svfiprintf_r+0x130>
 80059f8:	9105      	str	r1, [sp, #20]
 80059fa:	e7c3      	b.n	8005984 <_svfiprintf_r+0x130>
 80059fc:	4604      	mov	r4, r0
 80059fe:	2301      	movs	r3, #1
 8005a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a04:	e7f0      	b.n	80059e8 <_svfiprintf_r+0x194>
 8005a06:	ab03      	add	r3, sp, #12
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	f3af 8000 	nop.w
 8005a16:	1c42      	adds	r2, r0, #1
 8005a18:	4606      	mov	r6, r0
 8005a1a:	d1d6      	bne.n	80059ca <_svfiprintf_r+0x176>
 8005a1c:	89ab      	ldrh	r3, [r5, #12]
 8005a1e:	065b      	lsls	r3, r3, #25
 8005a20:	f53f af2c 	bmi.w	800587c <_svfiprintf_r+0x28>
 8005a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a26:	b01d      	add	sp, #116	; 0x74
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	ab03      	add	r3, sp, #12
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a36:	a904      	add	r1, sp, #16
 8005a38:	f000 f87c 	bl	8005b34 <_printf_i>
 8005a3c:	e7eb      	b.n	8005a16 <_svfiprintf_r+0x1c2>
 8005a3e:	bf00      	nop
 8005a40:	080061b8 	.word	0x080061b8
 8005a44:	080061be 	.word	0x080061be
 8005a48:	080061c2 	.word	0x080061c2
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	0800579d 	.word	0x0800579d

08005a54 <_printf_common>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	4616      	mov	r6, r2
 8005a5a:	4699      	mov	r9, r3
 8005a5c:	688a      	ldr	r2, [r1, #8]
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	4607      	mov	r7, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bfb8      	it	lt
 8005a66:	4613      	movlt	r3, r2
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a6e:	460c      	mov	r4, r1
 8005a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a74:	b10a      	cbz	r2, 8005a7a <_printf_common+0x26>
 8005a76:	3301      	adds	r3, #1
 8005a78:	6033      	str	r3, [r6, #0]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	0699      	lsls	r1, r3, #26
 8005a7e:	bf42      	ittt	mi
 8005a80:	6833      	ldrmi	r3, [r6, #0]
 8005a82:	3302      	addmi	r3, #2
 8005a84:	6033      	strmi	r3, [r6, #0]
 8005a86:	6825      	ldr	r5, [r4, #0]
 8005a88:	f015 0506 	ands.w	r5, r5, #6
 8005a8c:	d106      	bne.n	8005a9c <_printf_common+0x48>
 8005a8e:	f104 0a19 	add.w	sl, r4, #25
 8005a92:	68e3      	ldr	r3, [r4, #12]
 8005a94:	6832      	ldr	r2, [r6, #0]
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	dc28      	bgt.n	8005aee <_printf_common+0x9a>
 8005a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa0:	1e13      	subs	r3, r2, #0
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	bf18      	it	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	0692      	lsls	r2, r2, #26
 8005aaa:	d42d      	bmi.n	8005b08 <_printf_common+0xb4>
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab4:	47c0      	blx	r8
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d020      	beq.n	8005afc <_printf_common+0xa8>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	68e5      	ldr	r5, [r4, #12]
 8005abe:	f003 0306 	and.w	r3, r3, #6
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	bf18      	it	ne
 8005ac6:	2500      	movne	r5, #0
 8005ac8:	6832      	ldr	r2, [r6, #0]
 8005aca:	f04f 0600 	mov.w	r6, #0
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	bf08      	it	eq
 8005ad2:	1aad      	subeq	r5, r5, r2
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	bf08      	it	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bfc4      	itt	gt
 8005ae0:	1a9b      	subgt	r3, r3, r2
 8005ae2:	18ed      	addgt	r5, r5, r3
 8005ae4:	341a      	adds	r4, #26
 8005ae6:	42b5      	cmp	r5, r6
 8005ae8:	d11a      	bne.n	8005b20 <_printf_common+0xcc>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e008      	b.n	8005b00 <_printf_common+0xac>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4652      	mov	r2, sl
 8005af2:	4649      	mov	r1, r9
 8005af4:	4638      	mov	r0, r7
 8005af6:	47c0      	blx	r8
 8005af8:	3001      	adds	r0, #1
 8005afa:	d103      	bne.n	8005b04 <_printf_common+0xb0>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7c4      	b.n	8005a92 <_printf_common+0x3e>
 8005b08:	2030      	movs	r0, #48	; 0x30
 8005b0a:	18e1      	adds	r1, r4, r3
 8005b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b16:	4422      	add	r2, r4
 8005b18:	3302      	adds	r3, #2
 8005b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b1e:	e7c5      	b.n	8005aac <_printf_common+0x58>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4622      	mov	r2, r4
 8005b24:	4649      	mov	r1, r9
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0e6      	beq.n	8005afc <_printf_common+0xa8>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7d9      	b.n	8005ae6 <_printf_common+0x92>
	...

08005b34 <_printf_i>:
 8005b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	7e0f      	ldrb	r7, [r1, #24]
 8005b3a:	4691      	mov	r9, r2
 8005b3c:	2f78      	cmp	r7, #120	; 0x78
 8005b3e:	4680      	mov	r8, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	469a      	mov	sl, r3
 8005b44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b4a:	d807      	bhi.n	8005b5c <_printf_i+0x28>
 8005b4c:	2f62      	cmp	r7, #98	; 0x62
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x32>
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	f000 80d9 	beq.w	8005d08 <_printf_i+0x1d4>
 8005b56:	2f58      	cmp	r7, #88	; 0x58
 8005b58:	f000 80a4 	beq.w	8005ca4 <_printf_i+0x170>
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b64:	e03a      	b.n	8005bdc <_printf_i+0xa8>
 8005b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6a:	2b15      	cmp	r3, #21
 8005b6c:	d8f6      	bhi.n	8005b5c <_printf_i+0x28>
 8005b6e:	a101      	add	r1, pc, #4	; (adr r1, 8005b74 <_printf_i+0x40>)
 8005b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005b5d 	.word	0x08005b5d
 8005b80:	08005b5d 	.word	0x08005b5d
 8005b84:	08005b5d 	.word	0x08005b5d
 8005b88:	08005b5d 	.word	0x08005b5d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b5d 	.word	0x08005b5d
 8005b94:	08005b5d 	.word	0x08005b5d
 8005b98:	08005b5d 	.word	0x08005b5d
 8005b9c:	08005b5d 	.word	0x08005b5d
 8005ba0:	08005cef 	.word	0x08005cef
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005cd1 	.word	0x08005cd1
 8005bac:	08005b5d 	.word	0x08005b5d
 8005bb0:	08005b5d 	.word	0x08005b5d
 8005bb4:	08005d11 	.word	0x08005d11
 8005bb8:	08005b5d 	.word	0x08005b5d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b5d 	.word	0x08005b5d
 8005bc4:	08005b5d 	.word	0x08005b5d
 8005bc8:	08005cd9 	.word	0x08005cd9
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a4      	b.n	8005d2a <_printf_i+0x1f6>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	0606      	lsls	r6, r0, #24
 8005be6:	f101 0304 	add.w	r3, r1, #4
 8005bea:	d50a      	bpl.n	8005c02 <_printf_i+0xce>
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	2e00      	cmp	r6, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xc8>
 8005bf4:	232d      	movs	r3, #45	; 0x2d
 8005bf6:	4276      	negs	r6, r6
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	230a      	movs	r3, #10
 8005bfe:	485e      	ldr	r0, [pc, #376]	; (8005d78 <_printf_i+0x244>)
 8005c00:	e019      	b.n	8005c36 <_printf_i+0x102>
 8005c02:	680e      	ldr	r6, [r1, #0]
 8005c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	bf18      	it	ne
 8005c0c:	b236      	sxthne	r6, r6
 8005c0e:	e7ef      	b.n	8005bf0 <_printf_i+0xbc>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6029      	str	r1, [r5, #0]
 8005c18:	0601      	lsls	r1, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xec>
 8005c1c:	681e      	ldr	r6, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0xf2>
 8005c20:	0646      	lsls	r6, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xe8>
 8005c24:	881e      	ldrh	r6, [r3, #0]
 8005c26:	2f6f      	cmp	r7, #111	; 0x6f
 8005c28:	bf0c      	ite	eq
 8005c2a:	2308      	moveq	r3, #8
 8005c2c:	230a      	movne	r3, #10
 8005c2e:	4852      	ldr	r0, [pc, #328]	; (8005d78 <_printf_i+0x244>)
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c36:	6865      	ldr	r5, [r4, #4]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	bfa8      	it	ge
 8005c3c:	6821      	ldrge	r1, [r4, #0]
 8005c3e:	60a5      	str	r5, [r4, #8]
 8005c40:	bfa4      	itt	ge
 8005c42:	f021 0104 	bicge.w	r1, r1, #4
 8005c46:	6021      	strge	r1, [r4, #0]
 8005c48:	b90e      	cbnz	r6, 8005c4e <_printf_i+0x11a>
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	d04d      	beq.n	8005cea <_printf_i+0x1b6>
 8005c4e:	4615      	mov	r5, r2
 8005c50:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c54:	fb03 6711 	mls	r7, r3, r1, r6
 8005c58:	5dc7      	ldrb	r7, [r0, r7]
 8005c5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c5e:	4637      	mov	r7, r6
 8005c60:	42bb      	cmp	r3, r7
 8005c62:	460e      	mov	r6, r1
 8005c64:	d9f4      	bls.n	8005c50 <_printf_i+0x11c>
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d10b      	bne.n	8005c82 <_printf_i+0x14e>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07de      	lsls	r6, r3, #31
 8005c6e:	d508      	bpl.n	8005c82 <_printf_i+0x14e>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	6861      	ldr	r1, [r4, #4]
 8005c74:	4299      	cmp	r1, r3
 8005c76:	bfde      	ittt	le
 8005c78:	2330      	movle	r3, #48	; 0x30
 8005c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c82:	1b52      	subs	r2, r2, r5
 8005c84:	6122      	str	r2, [r4, #16]
 8005c86:	464b      	mov	r3, r9
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f8cd a000 	str.w	sl, [sp]
 8005c90:	aa03      	add	r2, sp, #12
 8005c92:	f7ff fedf 	bl	8005a54 <_printf_common>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d14c      	bne.n	8005d34 <_printf_i+0x200>
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	b004      	add	sp, #16
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	4834      	ldr	r0, [pc, #208]	; (8005d78 <_printf_i+0x244>)
 8005ca6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005caa:	6829      	ldr	r1, [r5, #0]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cb2:	6029      	str	r1, [r5, #0]
 8005cb4:	061d      	lsls	r5, r3, #24
 8005cb6:	d514      	bpl.n	8005ce2 <_printf_i+0x1ae>
 8005cb8:	07df      	lsls	r7, r3, #31
 8005cba:	bf44      	itt	mi
 8005cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc0:	6023      	strmi	r3, [r4, #0]
 8005cc2:	b91e      	cbnz	r6, 8005ccc <_printf_i+0x198>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	2310      	movs	r3, #16
 8005cce:	e7af      	b.n	8005c30 <_printf_i+0xfc>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	f043 0320 	orr.w	r3, r3, #32
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	2378      	movs	r3, #120	; 0x78
 8005cda:	4828      	ldr	r0, [pc, #160]	; (8005d7c <_printf_i+0x248>)
 8005cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ce0:	e7e3      	b.n	8005caa <_printf_i+0x176>
 8005ce2:	0659      	lsls	r1, r3, #25
 8005ce4:	bf48      	it	mi
 8005ce6:	b2b6      	uxthmi	r6, r6
 8005ce8:	e7e6      	b.n	8005cb8 <_printf_i+0x184>
 8005cea:	4615      	mov	r5, r2
 8005cec:	e7bb      	b.n	8005c66 <_printf_i+0x132>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	6826      	ldr	r6, [r4, #0]
 8005cf2:	1d18      	adds	r0, r3, #4
 8005cf4:	6961      	ldr	r1, [r4, #20]
 8005cf6:	6028      	str	r0, [r5, #0]
 8005cf8:	0635      	lsls	r5, r6, #24
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	d501      	bpl.n	8005d02 <_printf_i+0x1ce>
 8005cfe:	6019      	str	r1, [r3, #0]
 8005d00:	e002      	b.n	8005d08 <_printf_i+0x1d4>
 8005d02:	0670      	lsls	r0, r6, #25
 8005d04:	d5fb      	bpl.n	8005cfe <_printf_i+0x1ca>
 8005d06:	8019      	strh	r1, [r3, #0]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	e7ba      	b.n	8005c86 <_printf_i+0x152>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	2100      	movs	r1, #0
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f82f 	bl	8005d80 <memchr>
 8005d22:	b108      	cbz	r0, 8005d28 <_printf_i+0x1f4>
 8005d24:	1b40      	subs	r0, r0, r5
 8005d26:	6060      	str	r0, [r4, #4]
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d32:	e7a8      	b.n	8005c86 <_printf_i+0x152>
 8005d34:	462a      	mov	r2, r5
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	47d0      	blx	sl
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d0ab      	beq.n	8005c9a <_printf_i+0x166>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d413      	bmi.n	8005d70 <_printf_i+0x23c>
 8005d48:	68e0      	ldr	r0, [r4, #12]
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	4298      	cmp	r0, r3
 8005d4e:	bfb8      	it	lt
 8005d50:	4618      	movlt	r0, r3
 8005d52:	e7a4      	b.n	8005c9e <_printf_i+0x16a>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4632      	mov	r2, r6
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	47d0      	blx	sl
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d09b      	beq.n	8005c9a <_printf_i+0x166>
 8005d62:	3501      	adds	r5, #1
 8005d64:	68e3      	ldr	r3, [r4, #12]
 8005d66:	9903      	ldr	r1, [sp, #12]
 8005d68:	1a5b      	subs	r3, r3, r1
 8005d6a:	42ab      	cmp	r3, r5
 8005d6c:	dcf2      	bgt.n	8005d54 <_printf_i+0x220>
 8005d6e:	e7eb      	b.n	8005d48 <_printf_i+0x214>
 8005d70:	2500      	movs	r5, #0
 8005d72:	f104 0619 	add.w	r6, r4, #25
 8005d76:	e7f5      	b.n	8005d64 <_printf_i+0x230>
 8005d78:	080061c9 	.word	0x080061c9
 8005d7c:	080061da 	.word	0x080061da

08005d80 <memchr>:
 8005d80:	4603      	mov	r3, r0
 8005d82:	b510      	push	{r4, lr}
 8005d84:	b2c9      	uxtb	r1, r1
 8005d86:	4402      	add	r2, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	d101      	bne.n	8005d92 <memchr+0x12>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e003      	b.n	8005d9a <memchr+0x1a>
 8005d92:	7804      	ldrb	r4, [r0, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	428c      	cmp	r4, r1
 8005d98:	d1f6      	bne.n	8005d88 <memchr+0x8>
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <memmove>:
 8005d9c:	4288      	cmp	r0, r1
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	eb01 0402 	add.w	r4, r1, r2
 8005da4:	d902      	bls.n	8005dac <memmove+0x10>
 8005da6:	4284      	cmp	r4, r0
 8005da8:	4623      	mov	r3, r4
 8005daa:	d807      	bhi.n	8005dbc <memmove+0x20>
 8005dac:	1e43      	subs	r3, r0, #1
 8005dae:	42a1      	cmp	r1, r4
 8005db0:	d008      	beq.n	8005dc4 <memmove+0x28>
 8005db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dba:	e7f8      	b.n	8005dae <memmove+0x12>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	4402      	add	r2, r0
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	d100      	bne.n	8005dc6 <memmove+0x2a>
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dce:	e7f7      	b.n	8005dc0 <memmove+0x24>

08005dd0 <_free_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	d040      	beq.n	8005e5a <_free_r+0x8a>
 8005dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ddc:	1f0c      	subs	r4, r1, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bfb8      	it	lt
 8005de2:	18e4      	addlt	r4, r4, r3
 8005de4:	f000 f910 	bl	8006008 <__malloc_lock>
 8005de8:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <_free_r+0x8c>)
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	b933      	cbnz	r3, 8005dfc <_free_r+0x2c>
 8005dee:	6063      	str	r3, [r4, #4]
 8005df0:	6014      	str	r4, [r2, #0]
 8005df2:	4628      	mov	r0, r5
 8005df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005df8:	f000 b90c 	b.w	8006014 <__malloc_unlock>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d908      	bls.n	8005e12 <_free_r+0x42>
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	1821      	adds	r1, r4, r0
 8005e04:	428b      	cmp	r3, r1
 8005e06:	bf01      	itttt	eq
 8005e08:	6819      	ldreq	r1, [r3, #0]
 8005e0a:	685b      	ldreq	r3, [r3, #4]
 8005e0c:	1809      	addeq	r1, r1, r0
 8005e0e:	6021      	streq	r1, [r4, #0]
 8005e10:	e7ed      	b.n	8005dee <_free_r+0x1e>
 8005e12:	461a      	mov	r2, r3
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b10b      	cbz	r3, 8005e1c <_free_r+0x4c>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d9fa      	bls.n	8005e12 <_free_r+0x42>
 8005e1c:	6811      	ldr	r1, [r2, #0]
 8005e1e:	1850      	adds	r0, r2, r1
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d10b      	bne.n	8005e3c <_free_r+0x6c>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	4401      	add	r1, r0
 8005e28:	1850      	adds	r0, r2, r1
 8005e2a:	4283      	cmp	r3, r0
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	d1e0      	bne.n	8005df2 <_free_r+0x22>
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	4401      	add	r1, r0
 8005e36:	6011      	str	r1, [r2, #0]
 8005e38:	6053      	str	r3, [r2, #4]
 8005e3a:	e7da      	b.n	8005df2 <_free_r+0x22>
 8005e3c:	d902      	bls.n	8005e44 <_free_r+0x74>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	e7d6      	b.n	8005df2 <_free_r+0x22>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	1821      	adds	r1, r4, r0
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf01      	itttt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	1809      	addeq	r1, r1, r0
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	6054      	str	r4, [r2, #4]
 8005e58:	e7cb      	b.n	8005df2 <_free_r+0x22>
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	20001a64 	.word	0x20001a64

08005e60 <sbrk_aligned>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0e      	ldr	r6, [pc, #56]	; (8005e9c <sbrk_aligned+0x3c>)
 8005e64:	460c      	mov	r4, r1
 8005e66:	6831      	ldr	r1, [r6, #0]
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b911      	cbnz	r1, 8005e72 <sbrk_aligned+0x12>
 8005e6c:	f000 f8bc 	bl	8005fe8 <_sbrk_r>
 8005e70:	6030      	str	r0, [r6, #0]
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f8b7 	bl	8005fe8 <_sbrk_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d00a      	beq.n	8005e94 <sbrk_aligned+0x34>
 8005e7e:	1cc4      	adds	r4, r0, #3
 8005e80:	f024 0403 	bic.w	r4, r4, #3
 8005e84:	42a0      	cmp	r0, r4
 8005e86:	d007      	beq.n	8005e98 <sbrk_aligned+0x38>
 8005e88:	1a21      	subs	r1, r4, r0
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f8ac 	bl	8005fe8 <_sbrk_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d101      	bne.n	8005e98 <sbrk_aligned+0x38>
 8005e94:	f04f 34ff 	mov.w	r4, #4294967295
 8005e98:	4620      	mov	r0, r4
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	20001a68 	.word	0x20001a68

08005ea0 <_malloc_r>:
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	1ccd      	adds	r5, r1, #3
 8005ea6:	f025 0503 	bic.w	r5, r5, #3
 8005eaa:	3508      	adds	r5, #8
 8005eac:	2d0c      	cmp	r5, #12
 8005eae:	bf38      	it	cc
 8005eb0:	250c      	movcc	r5, #12
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	db01      	blt.n	8005ebc <_malloc_r+0x1c>
 8005eb8:	42a9      	cmp	r1, r5
 8005eba:	d905      	bls.n	8005ec8 <_malloc_r+0x28>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec8:	4e2e      	ldr	r6, [pc, #184]	; (8005f84 <_malloc_r+0xe4>)
 8005eca:	f000 f89d 	bl	8006008 <__malloc_lock>
 8005ece:	6833      	ldr	r3, [r6, #0]
 8005ed0:	461c      	mov	r4, r3
 8005ed2:	bb34      	cbnz	r4, 8005f22 <_malloc_r+0x82>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f7ff ffc2 	bl	8005e60 <sbrk_aligned>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	4604      	mov	r4, r0
 8005ee0:	d14d      	bne.n	8005f7e <_malloc_r+0xde>
 8005ee2:	6834      	ldr	r4, [r6, #0]
 8005ee4:	4626      	mov	r6, r4
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d140      	bne.n	8005f6c <_malloc_r+0xcc>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	4631      	mov	r1, r6
 8005eee:	4638      	mov	r0, r7
 8005ef0:	eb04 0803 	add.w	r8, r4, r3
 8005ef4:	f000 f878 	bl	8005fe8 <_sbrk_r>
 8005ef8:	4580      	cmp	r8, r0
 8005efa:	d13a      	bne.n	8005f72 <_malloc_r+0xd2>
 8005efc:	6821      	ldr	r1, [r4, #0]
 8005efe:	3503      	adds	r5, #3
 8005f00:	1a6d      	subs	r5, r5, r1
 8005f02:	f025 0503 	bic.w	r5, r5, #3
 8005f06:	3508      	adds	r5, #8
 8005f08:	2d0c      	cmp	r5, #12
 8005f0a:	bf38      	it	cc
 8005f0c:	250c      	movcc	r5, #12
 8005f0e:	4638      	mov	r0, r7
 8005f10:	4629      	mov	r1, r5
 8005f12:	f7ff ffa5 	bl	8005e60 <sbrk_aligned>
 8005f16:	3001      	adds	r0, #1
 8005f18:	d02b      	beq.n	8005f72 <_malloc_r+0xd2>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	442b      	add	r3, r5
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	e00e      	b.n	8005f40 <_malloc_r+0xa0>
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	1b52      	subs	r2, r2, r5
 8005f26:	d41e      	bmi.n	8005f66 <_malloc_r+0xc6>
 8005f28:	2a0b      	cmp	r2, #11
 8005f2a:	d916      	bls.n	8005f5a <_malloc_r+0xba>
 8005f2c:	1961      	adds	r1, r4, r5
 8005f2e:	42a3      	cmp	r3, r4
 8005f30:	6025      	str	r5, [r4, #0]
 8005f32:	bf18      	it	ne
 8005f34:	6059      	strne	r1, [r3, #4]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	bf08      	it	eq
 8005f3a:	6031      	streq	r1, [r6, #0]
 8005f3c:	5162      	str	r2, [r4, r5]
 8005f3e:	604b      	str	r3, [r1, #4]
 8005f40:	4638      	mov	r0, r7
 8005f42:	f104 060b 	add.w	r6, r4, #11
 8005f46:	f000 f865 	bl	8006014 <__malloc_unlock>
 8005f4a:	f026 0607 	bic.w	r6, r6, #7
 8005f4e:	1d23      	adds	r3, r4, #4
 8005f50:	1af2      	subs	r2, r6, r3
 8005f52:	d0b6      	beq.n	8005ec2 <_malloc_r+0x22>
 8005f54:	1b9b      	subs	r3, r3, r6
 8005f56:	50a3      	str	r3, [r4, r2]
 8005f58:	e7b3      	b.n	8005ec2 <_malloc_r+0x22>
 8005f5a:	6862      	ldr	r2, [r4, #4]
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	bf0c      	ite	eq
 8005f60:	6032      	streq	r2, [r6, #0]
 8005f62:	605a      	strne	r2, [r3, #4]
 8005f64:	e7ec      	b.n	8005f40 <_malloc_r+0xa0>
 8005f66:	4623      	mov	r3, r4
 8005f68:	6864      	ldr	r4, [r4, #4]
 8005f6a:	e7b2      	b.n	8005ed2 <_malloc_r+0x32>
 8005f6c:	4634      	mov	r4, r6
 8005f6e:	6876      	ldr	r6, [r6, #4]
 8005f70:	e7b9      	b.n	8005ee6 <_malloc_r+0x46>
 8005f72:	230c      	movs	r3, #12
 8005f74:	4638      	mov	r0, r7
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	f000 f84c 	bl	8006014 <__malloc_unlock>
 8005f7c:	e7a1      	b.n	8005ec2 <_malloc_r+0x22>
 8005f7e:	6025      	str	r5, [r4, #0]
 8005f80:	e7de      	b.n	8005f40 <_malloc_r+0xa0>
 8005f82:	bf00      	nop
 8005f84:	20001a64 	.word	0x20001a64

08005f88 <_realloc_r>:
 8005f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	4614      	mov	r4, r2
 8005f90:	460e      	mov	r6, r1
 8005f92:	b921      	cbnz	r1, 8005f9e <_realloc_r+0x16>
 8005f94:	4611      	mov	r1, r2
 8005f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	f7ff bf81 	b.w	8005ea0 <_malloc_r>
 8005f9e:	b92a      	cbnz	r2, 8005fac <_realloc_r+0x24>
 8005fa0:	f7ff ff16 	bl	8005dd0 <_free_r>
 8005fa4:	4625      	mov	r5, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fac:	f000 f838 	bl	8006020 <_malloc_usable_size_r>
 8005fb0:	4284      	cmp	r4, r0
 8005fb2:	4607      	mov	r7, r0
 8005fb4:	d802      	bhi.n	8005fbc <_realloc_r+0x34>
 8005fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fba:	d812      	bhi.n	8005fe2 <_realloc_r+0x5a>
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f7ff ff6e 	bl	8005ea0 <_malloc_r>
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d0ed      	beq.n	8005fa6 <_realloc_r+0x1e>
 8005fca:	42bc      	cmp	r4, r7
 8005fcc:	4622      	mov	r2, r4
 8005fce:	4631      	mov	r1, r6
 8005fd0:	bf28      	it	cs
 8005fd2:	463a      	movcs	r2, r7
 8005fd4:	f7ff fbac 	bl	8005730 <memcpy>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f7ff fef8 	bl	8005dd0 <_free_r>
 8005fe0:	e7e1      	b.n	8005fa6 <_realloc_r+0x1e>
 8005fe2:	4635      	mov	r5, r6
 8005fe4:	e7df      	b.n	8005fa6 <_realloc_r+0x1e>
	...

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	2300      	movs	r3, #0
 8005fec:	4d05      	ldr	r5, [pc, #20]	; (8006004 <_sbrk_r+0x1c>)
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fd42 	bl	8000a7c <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20001a6c 	.word	0x20001a6c

08006008 <__malloc_lock>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__malloc_lock+0x8>)
 800600a:	f000 b811 	b.w	8006030 <__retarget_lock_acquire_recursive>
 800600e:	bf00      	nop
 8006010:	20001a70 	.word	0x20001a70

08006014 <__malloc_unlock>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__malloc_unlock+0x8>)
 8006016:	f000 b80c 	b.w	8006032 <__retarget_lock_release_recursive>
 800601a:	bf00      	nop
 800601c:	20001a70 	.word	0x20001a70

08006020 <_malloc_usable_size_r>:
 8006020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006024:	1f18      	subs	r0, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	bfbc      	itt	lt
 800602a:	580b      	ldrlt	r3, [r1, r0]
 800602c:	18c0      	addlt	r0, r0, r3
 800602e:	4770      	bx	lr

08006030 <__retarget_lock_acquire_recursive>:
 8006030:	4770      	bx	lr

08006032 <__retarget_lock_release_recursive>:
 8006032:	4770      	bx	lr

08006034 <_init>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr

08006040 <_fini>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr
