
BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a18  08005a18  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005a18  08005a18  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a18  08005a18  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  20000020  08005a40  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a04  08005a40  00021a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011045  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  0003108e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00033978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032dd  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e53  00000000  00000000  000389c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e44f  00000000  00000000  00049818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  000d7cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08005850 	.word	0x08005850

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08005850 	.word	0x08005850

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd48 	bl	8000c2c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd3f 	bl	8000c2c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08005868 	.word	0x08005868
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 ffec 	bl	800142c <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000040 	.word	0x20000040
 8000460:	20000044 	.word	0x20000044

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb12 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f87e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8e6 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f8b6 	bl	80006bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("BTN don't push");
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <main+0xb8>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fe6c 	bl	8002244 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <main+0xbc>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ffa5 	bl	80024c0 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <main+0xc0>)
 800057a:	6013      	str	r3, [r2, #0]
  prevSemaphoreHandle = osSemaphoreNew(1, 1, NULL);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2001      	movs	r0, #1
 8000582:	f001 ff9d 	bl	80024c0 <osSemaphoreNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <main+0xc4>)
 800058a:	6013      	str	r3, [r2, #0]
  switchSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <main+0xbc>)
 800058e:	2100      	movs	r1, #0
 8000590:	2001      	movs	r0, #1
 8000592:	f001 ff95 	bl	80024c0 <osSemaphoreNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <main+0xc8>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a1a      	ldr	r2, [pc, #104]	; (8000608 <main+0xcc>)
 800059e:	2100      	movs	r1, #0
 80005a0:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0xd0>)
 80005a2:	f001 feb5 	bl	8002310 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <main+0xd4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0xd8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0xdc>)
 80005b2:	f001 fead 	bl	8002310 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a18      	ldr	r2, [pc, #96]	; (800061c <main+0xe0>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <main+0xe4>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <main+0xe8>)
 80005c2:	f001 fea5 	bl	8002310 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <main+0xec>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTaskBTN, NULL, &holdLED_attributes);
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <main+0xf0>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <main+0xf4>)
 80005d2:	f001 fe9d 	bl	8002310 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <main+0xf8>)
 80005da:	6013      	str	r3, [r2, #0]
  holdSwitchHandle = osThreadNew(LCDTaskSwitch, NULL, &SwitchTask_attributes);
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <main+0xfc>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4816      	ldr	r0, [pc, #88]	; (800063c <main+0x100>)
 80005e2:	f001 fe95 	bl	8002310 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <main+0x104>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe5c 	bl	80022a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xb4>
 80005f2:	bf00      	nop
 80005f4:	080058d0 	.word	0x080058d0
 80005f8:	080059f0 	.word	0x080059f0
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	200000a4 	.word	0x200000a4
 8000604:	200000a0 	.word	0x200000a0
 8000608:	0800593c 	.word	0x0800593c
 800060c:	080007d1 	.word	0x080007d1
 8000610:	20000098 	.word	0x20000098
 8000614:	08005960 	.word	0x08005960
 8000618:	080007e1 	.word	0x080007e1
 800061c:	200000a8 	.word	0x200000a8
 8000620:	08005984 	.word	0x08005984
 8000624:	0800096d 	.word	0x0800096d
 8000628:	200000ac 	.word	0x200000ac
 800062c:	080059a8 	.word	0x080059a8
 8000630:	0800097d 	.word	0x0800097d
 8000634:	200000b0 	.word	0x200000b0
 8000638:	080059cc 	.word	0x080059cc
 800063c:	08000901 	.word	0x08000901
 8000640:	200000b4 	.word	0x200000b4

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b090      	sub	sp, #64	; 0x40
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f8f4 	bl	8005840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f9dc 	bl	8001a38 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000686:	f000 f9a3 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc4a 	bl	8001f3c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f98f 	bl	80009d0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	; 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f000 fd53 	bl	80011a4 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f964 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000044 	.word	0x20000044
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xac>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xac>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xac>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xac>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xac>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_GPIO_Init+0xac>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4819      	ldr	r0, [pc, #100]	; (80007c8 <MX_GPIO_Init+0xb0>)
 8000764:	f000 fd05 	bl	8001172 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xb0>)
 8000782:	f000 fb5b 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800078a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4619      	mov	r1, r3
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0xb4>)
 800079c:	f000 fb4e 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xb4>)
 80007b6:	f000 fb41 	bl	8000e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 fe43 	bl	8002464 <osDelay>
 80007de:	e7fb      	b.n	80007d8 <StartDefaultTask+0x8>

080007e0 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    uint8_t last_stateSwitch = GPIO_PIN_RESET; // Исходное состояние - кнопка отпущена
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
    uint8_t last_stateBTN = GPIO_PIN_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73bb      	strb	r3, [r7, #14]
    for(;;)
    {

        uint8_t current_stateSwitch = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80007f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f4:	483b      	ldr	r0, [pc, #236]	; (80008e4 <buttonTask+0x104>)
 80007f6:	f000 fca5 	bl	8001144 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	737b      	strb	r3, [r7, #13]
        uint8_t current_stateBTN = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000802:	4838      	ldr	r0, [pc, #224]	; (80008e4 <buttonTask+0x104>)
 8000804:	f000 fc9e 	bl	8001144 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	733b      	strb	r3, [r7, #12]
        // Устанавливаем курсор на нужную позицию (пример: 13-й столбец, 3-я строка)

        HD44780_SetCursor(0,1);
 800080c:	2101      	movs	r1, #1
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fd38 	bl	8000284 <HD44780_SetCursor>

        switch(osSemaphoreGetCount(switchSemaphoreHandle)){
 8000814:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <buttonTask+0x108>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f001 ffab 	bl	8002774 <osSemaphoreGetCount>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <buttonTask+0x4a>
 8000824:	2b01      	cmp	r3, #1
 8000826:	d004      	beq.n	8000832 <buttonTask+0x52>
 8000828:	e007      	b.n	800083a <buttonTask+0x5a>
case 0:

	HD44780_PrintStr("0");
 800082a:	4830      	ldr	r0, [pc, #192]	; (80008ec <buttonTask+0x10c>)
 800082c:	f7ff fd9b 	bl	8000366 <HD44780_PrintStr>
	break;
 8000830:	e007      	b.n	8000842 <buttonTask+0x62>

case 1:

	HD44780_PrintStr("1");
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <buttonTask+0x110>)
 8000834:	f7ff fd97 	bl	8000366 <HD44780_PrintStr>
	break;
 8000838:	e003      	b.n	8000842 <buttonTask+0x62>

default:

	HD44780_PrintStr("x");
 800083a:	482e      	ldr	r0, [pc, #184]	; (80008f4 <buttonTask+0x114>)
 800083c:	f7ff fd93 	bl	8000366 <HD44780_PrintStr>
	break;
 8000840:	bf00      	nop

}

        switch(osSemaphoreGetCount(buttonSemaphoreHandle)){
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <buttonTask+0x118>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f001 ff94 	bl	8002774 <osSemaphoreGetCount>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <buttonTask+0x78>
 8000852:	2b01      	cmp	r3, #1
 8000854:	d004      	beq.n	8000860 <buttonTask+0x80>
 8000856:	e007      	b.n	8000868 <buttonTask+0x88>
   case 0:

   	HD44780_PrintStr("0");
 8000858:	4824      	ldr	r0, [pc, #144]	; (80008ec <buttonTask+0x10c>)
 800085a:	f7ff fd84 	bl	8000366 <HD44780_PrintStr>
   	break;
 800085e:	e007      	b.n	8000870 <buttonTask+0x90>

   case 1:

   	HD44780_PrintStr("1");
 8000860:	4823      	ldr	r0, [pc, #140]	; (80008f0 <buttonTask+0x110>)
 8000862:	f7ff fd80 	bl	8000366 <HD44780_PrintStr>
   	break;
 8000866:	e003      	b.n	8000870 <buttonTask+0x90>

   default:

   	HD44780_PrintStr("x");
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <buttonTask+0x114>)
 800086a:	f7ff fd7c 	bl	8000366 <HD44780_PrintStr>
   	break;
 800086e:	bf00      	nop

   }
        HD44780_PrintStr("-");
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <buttonTask+0x11c>)
 8000872:	f7ff fd78 	bl	8000366 <HD44780_PrintStr>


        if(current_stateSwitch == GPIO_PIN_SET)
 8000876:	7b7b      	ldrb	r3, [r7, #13]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d103      	bne.n	8000884 <buttonTask+0xa4>
        {
            HD44780_PrintStr("1"); // Вывод при положении 1
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <buttonTask+0x110>)
 800087e:	f7ff fd72 	bl	8000366 <HD44780_PrintStr>
 8000882:	e002      	b.n	800088a <buttonTask+0xaa>
        }
        else
        {
            HD44780_PrintStr("0"); // Вывод при положении 0
 8000884:	4819      	ldr	r0, [pc, #100]	; (80008ec <buttonTask+0x10c>)
 8000886:	f7ff fd6e 	bl	8000366 <HD44780_PrintStr>

        }

        // Обработка изменения состояния
        if(current_stateSwitch != last_stateSwitch)
 800088a:	7b7a      	ldrb	r2, [r7, #13]
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	429a      	cmp	r2, r3
 8000890:	d009      	beq.n	80008a6 <buttonTask+0xc6>
        {
            if(current_stateSwitch == GPIO_PIN_RESET)
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d104      	bne.n	80008a2 <buttonTask+0xc2>
            {
                osSemaphoreRelease(switchSemaphoreHandle);// семафор сбрасывается(увеличивается на единицу)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <buttonTask+0x108>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f001 ff11 	bl	80026c4 <osSemaphoreRelease>
            }

            last_stateSwitch = current_stateSwitch;
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	73fb      	strb	r3, [r7, #15]
        }
        osDelay(50);
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f001 fddc 	bl	8002464 <osDelay>


        if(current_stateBTN == GPIO_PIN_SET)
 80008ac:	7b3b      	ldrb	r3, [r7, #12]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d103      	bne.n	80008ba <buttonTask+0xda>
                {
                    HD44780_PrintStr("1"); // Вывод при положении 1
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <buttonTask+0x110>)
 80008b4:	f7ff fd57 	bl	8000366 <HD44780_PrintStr>
 80008b8:	e002      	b.n	80008c0 <buttonTask+0xe0>
                }
                else
                {
                    HD44780_PrintStr("0"); // Вывод при положении 0
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <buttonTask+0x10c>)
 80008bc:	f7ff fd53 	bl	8000366 <HD44780_PrintStr>
                }

                // Обработка изменения состояния
                if(current_stateBTN != last_stateBTN)
 80008c0:	7b3a      	ldrb	r2, [r7, #12]
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d009      	beq.n	80008dc <buttonTask+0xfc>
                {
                    if(current_stateBTN == GPIO_PIN_RESET)
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <buttonTask+0xf8>
                    {
                        osSemaphoreRelease(buttonSemaphoreHandle);
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <buttonTask+0x118>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fef6 	bl	80026c4 <osSemaphoreRelease>
                    }

                    last_stateBTN = current_stateBTN;
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	73bb      	strb	r3, [r7, #14]
                }


        osDelay(50); // Задержка для стабильности опроса
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f001 fdc1 	bl	8002464 <osDelay>
    {
 80008e2:	e785      	b.n	80007f0 <buttonTask+0x10>
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	080058e0 	.word	0x080058e0
 80008f0:	080058e4 	.word	0x080058e4
 80008f4:	080058e8 	.word	0x080058e8
 80008f8:	2000009c 	.word	0x2000009c
 80008fc:	080058ec 	.word	0x080058ec

08000900 <LCDTaskSwitch>:
    }
}

void LCDTaskSwitch(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	for(;;)
		{
		HD44780_SetCursor(13,1);
 8000908:	2101      	movs	r1, #1
 800090a:	200d      	movs	r0, #13
 800090c:	f7ff fcba 	bl	8000284 <HD44780_SetCursor>
		HD44780_PrintStr("AAA");
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <LCDTaskSwitch+0x5c>)
 8000912:	f7ff fd28 	bl	8000366 <HD44780_PrintStr>
		    if(osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY) == osOK)
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <LCDTaskSwitch+0x60>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f04f 31ff 	mov.w	r1, #4294967295
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fe6a 	bl	80025f8 <osSemaphoreAcquire>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d111      	bne.n	800094e <LCDTaskSwitch+0x4e>
		    {


		           HD44780_Clear();
 800092a:	f7ff fc95 	bl	8000258 <HD44780_Clear>
		            HD44780_SetCursor(0,0);
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fca7 	bl	8000284 <HD44780_SetCursor>
		            HD44780_PrintStr("Switch press");
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <LCDTaskSwitch+0x64>)
 8000938:	f7ff fd15 	bl	8000366 <HD44780_PrintStr>
	                osDelay(2000);
 800093c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000940:	f001 fd90 	bl	8002464 <osDelay>

		            // Освобождаем prevSemaphoreHandle после отсчета
		            osSemaphoreRelease(switchSemaphoreHandle);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LCDTaskSwitch+0x60>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f001 febb 	bl	80026c4 <osSemaphoreRelease>

		    }
		    osDelay(50);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f001 fd88 	bl	8002464 <osDelay>
		    HD44780_PrintStr("BBB");
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <LCDTaskSwitch+0x68>)
 8000956:	f7ff fd06 	bl	8000366 <HD44780_PrintStr>
		HD44780_SetCursor(13,1);
 800095a:	e7d5      	b.n	8000908 <LCDTaskSwitch+0x8>
 800095c:	080058f0 	.word	0x080058f0
 8000960:	200000a0 	.word	0x200000a0
 8000964:	080058f4 	.word	0x080058f4
 8000968:	08005904 	.word	0x08005904

0800096c <ledTask>:
		}
}

void ledTask(void *argument)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
    for(;;)
 8000978:	e7fe      	b.n	8000978 <ledTask+0xc>
	...

0800097c <lcdTaskBTN>:
    }
    osDelay(50);
}

void lcdTaskBTN(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	for(;;)
	{


	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <lcdTaskBTN+0x48>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fe33 	bl	80025f8 <osSemaphoreAcquire>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d111      	bne.n	80009bc <lcdTaskBTN+0x40>
	    {


	           HD44780_Clear();
 8000998:	f7ff fc5e 	bl	8000258 <HD44780_Clear>
	            HD44780_SetCursor(0,0);
 800099c:	2100      	movs	r1, #0
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fc70 	bl	8000284 <HD44780_SetCursor>
	            HD44780_PrintStr("BTN press");
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <lcdTaskBTN+0x4c>)
 80009a6:	f7ff fcde 	bl	8000366 <HD44780_PrintStr>
                osDelay(2000);
 80009aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ae:	f001 fd59 	bl	8002464 <osDelay>

	            // Освобождаем prevSemaphoreHandle после отсчета
	            osSemaphoreRelease(prevSemaphoreHandle);
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <lcdTaskBTN+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fe84 	bl	80026c4 <osSemaphoreRelease>

	    }
	    osDelay(50);
 80009bc:	2032      	movs	r0, #50	; 0x32
 80009be:	f001 fd51 	bl	8002464 <osDelay>
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 80009c2:	e7df      	b.n	8000984 <lcdTaskBTN+0x8>
 80009c4:	2000009c 	.word	0x2000009c
 80009c8:	08005908 	.word	0x08005908
 80009cc:	200000a4 	.word	0x200000a4

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x4c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f000 f9e6 	bl	8000dea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_I2C_MspInit+0x90>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d132      	bne.n	8000ab2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6a:	2312      	movs	r3, #18
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <HAL_I2C_MspInit+0x98>)
 8000a7a:	f000 f9df 	bl	8000e3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_I2C_MspInit+0x9c>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <HAL_I2C_MspInit+0x9c>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_I2C_MspInit+0x94>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40010000 	.word	0x40010000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 f87b 	bl	8000bf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000afe:	f003 fda9 	bl	8004654 <xTaskGetSchedulerState>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d001      	beq.n	8000b0c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b08:	f004 fc0e 	bl	8005328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b42:	f7ff ffe5 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f004 fe49 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fcf7 	bl	800053c <main>
  bx lr
 8000b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b58:	08005a20 	.word	0x08005a20
  ldr r2, =_sbss
 8000b5c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b60:	20001a04 	.word	0x20001a04

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x28>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x28>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f92b 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff ff2a 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f935 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f90b 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000010 	.word	0x20000010
 8000bec:	20000018 	.word	0x20000018
 8000bf0:	20000014 	.word	0x20000014

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x20>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000018 	.word	0x20000018
 8000c14:	200000b8 	.word	0x200000b8

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	200000b8 	.word	0x200000b8

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff fff0 	bl	8000c18 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffe0 	bl	8000c18 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000018 	.word	0x20000018

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff90 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff49 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff90 	bl	8000d2c <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5f 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b08b      	sub	sp, #44	; 0x2c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e169      	b.n	8001124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e50:	2201      	movs	r2, #1
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8158 	bne.w	800111e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4a9a      	ldr	r2, [pc, #616]	; (80010dc <HAL_GPIO_Init+0x2a0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d05e      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
 8000e78:	4a98      	ldr	r2, [pc, #608]	; (80010dc <HAL_GPIO_Init+0x2a0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d875      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000e7e:	4a98      	ldr	r2, [pc, #608]	; (80010e0 <HAL_GPIO_Init+0x2a4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d058      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
 8000e84:	4a96      	ldr	r2, [pc, #600]	; (80010e0 <HAL_GPIO_Init+0x2a4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d86f      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000e8a:	4a96      	ldr	r2, [pc, #600]	; (80010e4 <HAL_GPIO_Init+0x2a8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d052      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
 8000e90:	4a94      	ldr	r2, [pc, #592]	; (80010e4 <HAL_GPIO_Init+0x2a8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d869      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000e96:	4a94      	ldr	r2, [pc, #592]	; (80010e8 <HAL_GPIO_Init+0x2ac>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d04c      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
 8000e9c:	4a92      	ldr	r2, [pc, #584]	; (80010e8 <HAL_GPIO_Init+0x2ac>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d863      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000ea2:	4a92      	ldr	r2, [pc, #584]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d046      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
 8000ea8:	4a90      	ldr	r2, [pc, #576]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d85d      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d82a      	bhi.n	8000f08 <HAL_GPIO_Init+0xcc>
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d859      	bhi.n	8000f6a <HAL_GPIO_Init+0x12e>
 8000eb6:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <HAL_GPIO_Init+0x80>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000f37 	.word	0x08000f37
 8000ec0:	08000f11 	.word	0x08000f11
 8000ec4:	08000f23 	.word	0x08000f23
 8000ec8:	08000f65 	.word	0x08000f65
 8000ecc:	08000f6b 	.word	0x08000f6b
 8000ed0:	08000f6b 	.word	0x08000f6b
 8000ed4:	08000f6b 	.word	0x08000f6b
 8000ed8:	08000f6b 	.word	0x08000f6b
 8000edc:	08000f6b 	.word	0x08000f6b
 8000ee0:	08000f6b 	.word	0x08000f6b
 8000ee4:	08000f6b 	.word	0x08000f6b
 8000ee8:	08000f6b 	.word	0x08000f6b
 8000eec:	08000f6b 	.word	0x08000f6b
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f6b 	.word	0x08000f6b
 8000ef8:	08000f6b 	.word	0x08000f6b
 8000efc:	08000f6b 	.word	0x08000f6b
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f2d 	.word	0x08000f2d
 8000f08:	4a79      	ldr	r2, [pc, #484]	; (80010f0 <HAL_GPIO_Init+0x2b4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f0e:	e02c      	b.n	8000f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e029      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e024      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	3308      	adds	r3, #8
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e01f      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	330c      	adds	r3, #12
 8000f32:	623b      	str	r3, [r7, #32]
          break;
 8000f34:	e01a      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	623b      	str	r3, [r7, #32]
          break;
 8000f42:	e013      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d105      	bne.n	8000f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	611a      	str	r2, [r3, #16]
          break;
 8000f56:	e009      	b.n	8000f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	615a      	str	r2, [r3, #20]
          break;
 8000f62:	e003      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x130>
          break;
 8000f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2bff      	cmp	r3, #255	; 0xff
 8000f70:	d801      	bhi.n	8000f76 <HAL_GPIO_Init+0x13a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	e001      	b.n	8000f7a <HAL_GPIO_Init+0x13e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2bff      	cmp	r3, #255	; 0xff
 8000f80:	d802      	bhi.n	8000f88 <HAL_GPIO_Init+0x14c>
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	e002      	b.n	8000f8e <HAL_GPIO_Init+0x152>
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	3b08      	subs	r3, #8
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	210f      	movs	r1, #15
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	6a39      	ldr	r1, [r7, #32]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80b1 	beq.w	800111e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a4c      	ldr	r2, [pc, #304]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2bc>)
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a40      	ldr	r2, [pc, #256]	; (80010fc <HAL_GPIO_Init+0x2c0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1ec>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3f      	ldr	r2, [pc, #252]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1e8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3d      	ldr	r2, [pc, #244]	; (8001108 <HAL_GPIO_Init+0x2cc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1e0>
 8001018:	2303      	movs	r3, #3
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 800101c:	2304      	movs	r3, #4
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001028:	2300      	movs	r3, #0
 800102a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800103a:	492f      	ldr	r1, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x2bc>)
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_GPIO_Init+0x2d0>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	492c      	ldr	r1, [pc, #176]	; (800110c <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_GPIO_Init+0x2d0>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	4928      	ldr	r1, [pc, #160]	; (800110c <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <HAL_GPIO_Init+0x2d0>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4922      	ldr	r1, [pc, #136]	; (800110c <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_GPIO_Init+0x2d0>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	491e      	ldr	r1, [pc, #120]	; (800110c <HAL_GPIO_Init+0x2d0>)
 8001094:	4013      	ands	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	4918      	ldr	r1, [pc, #96]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4914      	ldr	r1, [pc, #80]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010bc:	4013      	ands	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d021      	beq.n	8001110 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <HAL_GPIO_Init+0x2d0>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60cb      	str	r3, [r1, #12]
 80010d8:	e021      	b.n	800111e <HAL_GPIO_Init+0x2e2>
 80010da:	bf00      	nop
 80010dc:	10320000 	.word	0x10320000
 80010e0:	10310000 	.word	0x10310000
 80010e4:	10220000 	.word	0x10220000
 80010e8:	10210000 	.word	0x10210000
 80010ec:	10120000 	.word	0x10120000
 80010f0:	10110000 	.word	0x10110000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
 8001108:	40011400 	.word	0x40011400
 800110c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	43db      	mvns	r3, r3
 8001118:	4909      	ldr	r1, [pc, #36]	; (8001140 <HAL_GPIO_Init+0x304>)
 800111a:	4013      	ands	r3, r2
 800111c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	3301      	adds	r3, #1
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	f47f ae8e 	bne.w	8000e50 <HAL_GPIO_Init+0x14>
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	372c      	adds	r7, #44	; 0x2c
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]
 800117e:	4613      	mov	r3, r2
 8001180:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001182:	787b      	ldrb	r3, [r7, #1]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800118e:	e003      	b.n	8001198 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	041a      	lsls	r2, r3, #16
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e12b      	b.n	800140e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fc2e 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0201 	bic.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001208:	f000 ffea 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a81      	ldr	r2, [pc, #516]	; (8001418 <HAL_I2C_Init+0x274>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d807      	bhi.n	8001228 <HAL_I2C_Init+0x84>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_I2C_Init+0x278>)
 800121c:	4293      	cmp	r3, r2
 800121e:	bf94      	ite	ls
 8001220:	2301      	movls	r3, #1
 8001222:	2300      	movhi	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	e006      	b.n	8001236 <HAL_I2C_Init+0x92>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a7d      	ldr	r2, [pc, #500]	; (8001420 <HAL_I2C_Init+0x27c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	bf94      	ite	ls
 8001230:	2301      	movls	r3, #1
 8001232:	2300      	movhi	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0e7      	b.n	800140e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4a78      	ldr	r2, [pc, #480]	; (8001424 <HAL_I2C_Init+0x280>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	430a      	orrs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a6a      	ldr	r2, [pc, #424]	; (8001418 <HAL_I2C_Init+0x274>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d802      	bhi.n	8001278 <HAL_I2C_Init+0xd4>
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3301      	adds	r3, #1
 8001276:	e009      	b.n	800128c <HAL_I2C_Init+0xe8>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800127e:	fb02 f303 	mul.w	r3, r2, r3
 8001282:	4a69      	ldr	r2, [pc, #420]	; (8001428 <HAL_I2C_Init+0x284>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	3301      	adds	r3, #1
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	430b      	orrs	r3, r1
 8001292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800129e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	495c      	ldr	r1, [pc, #368]	; (8001418 <HAL_I2C_Init+0x274>)
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d819      	bhi.n	80012e0 <HAL_I2C_Init+0x13c>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e59      	subs	r1, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012c0:	400b      	ands	r3, r1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HAL_I2C_Init+0x138>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e59      	subs	r1, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012da:	e051      	b.n	8001380 <HAL_I2C_Init+0x1dc>
 80012dc:	2304      	movs	r3, #4
 80012de:	e04f      	b.n	8001380 <HAL_I2C_Init+0x1dc>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d111      	bne.n	800130c <HAL_I2C_Init+0x168>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1e58      	subs	r0, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	e012      	b.n	8001332 <HAL_I2C_Init+0x18e>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e58      	subs	r0, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	0099      	lsls	r1, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Init+0x196>
 8001336:	2301      	movs	r3, #1
 8001338:	e022      	b.n	8001380 <HAL_I2C_Init+0x1dc>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10e      	bne.n	8001360 <HAL_I2C_Init+0x1bc>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1e58      	subs	r0, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6859      	ldr	r1, [r3, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	440b      	add	r3, r1
 8001350:	fbb0 f3f3 	udiv	r3, r0, r3
 8001354:	3301      	adds	r3, #1
 8001356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135e:	e00f      	b.n	8001380 <HAL_I2C_Init+0x1dc>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e58      	subs	r0, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	0099      	lsls	r1, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	fbb0 f3f3 	udiv	r3, r0, r3
 8001376:	3301      	adds	r3, #1
 8001378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	4313      	orrs	r3, r2
 8001386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6911      	ldr	r1, [r2, #16]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68d2      	ldr	r2, [r2, #12]
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	000186a0 	.word	0x000186a0
 800141c:	001e847f 	.word	0x001e847f
 8001420:	003d08ff 	.word	0x003d08ff
 8001424:	431bde83 	.word	0x431bde83
 8001428:	10624dd3 	.word	0x10624dd3

0800142c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af02      	add	r7, sp, #8
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	461a      	mov	r2, r3
 8001438:	460b      	mov	r3, r1
 800143a:	817b      	strh	r3, [r7, #10]
 800143c:	4613      	mov	r3, r2
 800143e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff fbea 	bl	8000c18 <HAL_GetTick>
 8001444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b20      	cmp	r3, #32
 8001450:	f040 80e0 	bne.w	8001614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2319      	movs	r3, #25
 800145a:	2201      	movs	r2, #1
 800145c:	4970      	ldr	r1, [pc, #448]	; (8001620 <HAL_I2C_Master_Transmit+0x1f4>)
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f964 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800146a:	2302      	movs	r3, #2
 800146c:	e0d3      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_I2C_Master_Transmit+0x50>
 8001478:	2302      	movs	r3, #2
 800147a:	e0cc      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d007      	beq.n	80014a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	893a      	ldrh	r2, [r7, #8]
 80014d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_I2C_Master_Transmit+0x1f8>)
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014e4:	8979      	ldrh	r1, [r7, #10]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f89c 	bl	8001628 <I2C_MasterRequestWrite>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e08d      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001510:	e066      	b.n	80015e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	6a39      	ldr	r1, [r7, #32]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f9de 	bl	80018d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00d      	beq.n	800153e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2b04      	cmp	r3, #4
 8001528:	d107      	bne.n	800153a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e06b      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b04      	cmp	r3, #4
 800157a:	d11b      	bne.n	80015b4 <HAL_I2C_Master_Transmit+0x188>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	6a39      	ldr	r1, [r7, #32]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f9ce 	bl	800195a <I2C_WaitOnBTFFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00d      	beq.n	80015e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d107      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e01a      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d194      	bne.n	8001512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
  }
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	00100002 	.word	0x00100002
 8001624:	ffff0000 	.word	0xffff0000

08001628 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af02      	add	r7, sp, #8
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	460b      	mov	r3, r1
 8001636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d006      	beq.n	8001652 <I2C_MasterRequestWrite+0x2a>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d003      	beq.n	8001652 <I2C_MasterRequestWrite+0x2a>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001650:	d108      	bne.n	8001664 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00b      	b.n	800167c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	2b12      	cmp	r3, #18
 800166a:	d107      	bne.n	800167c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f84f 	bl	800172c <I2C_WaitOnFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a2:	d103      	bne.n	80016ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e035      	b.n	800171c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b8:	d108      	bne.n	80016cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016ba:	897b      	ldrh	r3, [r7, #10]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	e01b      	b.n	8001704 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	11db      	asrs	r3, r3, #7
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0306 	and.w	r3, r3, #6
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f063 030f 	orn	r3, r3, #15
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <I2C_MasterRequestWrite+0xfc>)
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f875 	bl	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e010      	b.n	800171c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016fa:	897b      	ldrh	r3, [r7, #10]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <I2C_MasterRequestWrite+0x100>)
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f865 	bl	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	00010008 	.word	0x00010008
 8001728:	00010002 	.word	0x00010002

0800172c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800173c:	e025      	b.n	800178a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d021      	beq.n	800178a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001746:	f7ff fa67 	bl	8000c18 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d302      	bcc.n	800175c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d116      	bne.n	800178a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e023      	b.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10d      	bne.n	80017b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4013      	ands	r3, r2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	e00c      	b.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4013      	ands	r3, r2
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d0b6      	beq.n	800173e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017e8:	e051      	b.n	800188e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f8:	d123      	bne.n	8001842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001808:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001812:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e046      	b.n	80018d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d021      	beq.n	800188e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184a:	f7ff f9e5 	bl	8000c18 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d302      	bcc.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d116      	bne.n	800188e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2220      	movs	r2, #32
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e020      	b.n	80018d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10c      	bne.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4013      	ands	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e00b      	b.n	80018ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	43da      	mvns	r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4013      	ands	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d18d      	bne.n	80017ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e4:	e02d      	b.n	8001942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f878 	bl	80019dc <I2C_IsAcknowledgeFailed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e02d      	b.n	8001952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d021      	beq.n	8001942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fe:	f7ff f98b 	bl	8000c18 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d116      	bne.n	8001942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e007      	b.n	8001952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d1ca      	bne.n	80018e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001966:	e02d      	b.n	80019c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f837 	bl	80019dc <I2C_IsAcknowledgeFailed>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e02d      	b.n	80019d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d021      	beq.n	80019c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001980:	f7ff f94a 	bl	8000c18 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	429a      	cmp	r2, r3
 800198e:	d302      	bcc.n	8001996 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d116      	bne.n	80019c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e007      	b.n	80019d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d1ca      	bne.n	8001968 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d11b      	bne.n	8001a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f043 0204 	orr.w	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e272      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8087 	beq.w	8001b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a58:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d00c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a64:	4b8f      	ldr	r3, [pc, #572]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d112      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5e>
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d10b      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7e:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d06c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x12c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d168      	bne.n	8001b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e24c      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x76>
 8001aa0:	4b80      	ldr	r3, [pc, #512]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e02e      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7a      	ldr	r2, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a77      	ldr	r2, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xbc>
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a71      	ldr	r2, [pc, #452]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6e      	ldr	r2, [pc, #440]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001af4:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f880 	bl	8000c18 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f87c 	bl	8000c18 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e200      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe4>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f86c 	bl	8000c18 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f868 	bl	8000c18 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1ec      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x10c>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b7e:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x18c>
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1c0      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4939      	ldr	r1, [pc, #228]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f821 	bl	8000c18 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f81d 	bl	8000c18 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a1      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4927      	ldr	r1, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f800 	bl	8000c18 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7fe fffc 	bl	8000c18 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e180      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03a      	beq.n	8001cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d019      	beq.n	8001c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffe0 	bl	8000c18 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7fe ffdc 	bl	8000c18 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e160      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f000 fac4 	bl	8002208 <RCC_Delay>
 8001c80:	e01c      	b.n	8001cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe ffc6 	bl	8000c18 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	e00f      	b.n	8001cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7fe ffc2 	bl	8000c18 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d908      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e146      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	42420000 	.word	0x42420000
 8001cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	4b92      	ldr	r3, [pc, #584]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e9      	bne.n	8001c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a6 	beq.w	8001e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a87      	ldr	r2, [pc, #540]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b85      	ldr	r3, [pc, #532]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b82      	ldr	r3, [pc, #520]	; (8001f00 <HAL_RCC_OscConfig+0x4c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d02:	4b7f      	ldr	r3, [pc, #508]	; (8001f00 <HAL_RCC_OscConfig+0x4c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7e      	ldr	r2, [pc, #504]	; (8001f00 <HAL_RCC_OscConfig+0x4c8>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe ff83 	bl	8000c18 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7fe ff7f 	bl	8000c18 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e103      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4c8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x312>
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a6e      	ldr	r2, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	e02d      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x334>
 8001d52:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a69      	ldr	r2, [pc, #420]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a66      	ldr	r2, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	e01c      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x356>
 8001d74:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a60      	ldr	r2, [pc, #384]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a5d      	ldr	r2, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a5a      	ldr	r2, [pc, #360]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7fe ff33 	bl	8000c18 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7fe ff2f 	bl	8000c18 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0b1      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ee      	beq.n	8001db6 <HAL_RCC_OscConfig+0x37e>
 8001dd8:	e014      	b.n	8001e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe ff1d 	bl	8000c18 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ff19 	bl	8000c18 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e09b      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	4b40      	ldr	r3, [pc, #256]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ee      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8087 	beq.w	8001f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d061      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d146      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe feed 	bl	8000c18 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe fee9 	bl	8000c18 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e06d      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4921      	ldr	r1, [pc, #132]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a19      	ldr	r1, [r3, #32]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	491b      	ldr	r1, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe febd 	bl	8000c18 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7fe feb9 	bl	8000c18 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e03d      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46a>
 8001ec0:	e035      	b.n	8001f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fea6 	bl	8000c18 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe fea2 	bl	8000c18 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e026      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x498>
 8001eee:	e01e      	b.n	8001f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e019      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x500>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0d0      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4965      	ldr	r1, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e073      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7fe fdf4 	bl	8000c18 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe fdf0 	bl	8000c18 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490a      	ldr	r1, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1cc>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1d0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fd52 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	08005a00 	.word	0x08005a00
 8002108:	20000010 	.word	0x20000010
 800210c:	20000014 	.word	0x20000014

08002110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b490      	push	{r4, r7}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_GetSysClockFreq+0xac>)
 8002118:	1d3c      	adds	r4, r7, #4
 800211a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800211c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002120:	f240 2301 	movw	r3, #513	; 0x201
 8002124:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x40>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x46>
 800214e:	e02b      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002152:	623b      	str	r3, [r7, #32]
      break;
 8002154:	e02b      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3328      	adds	r3, #40	; 0x28
 8002160:	443b      	add	r3, r7
 8002162:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002166:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d012      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0c5b      	lsrs	r3, r3, #17
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	3328      	adds	r3, #40	; 0x28
 800217e:	443b      	add	r3, r7
 8002180:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002184:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800218a:	fb03 f202 	mul.w	r2, r3, r2
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e004      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	623b      	str	r3, [r7, #32]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	623b      	str	r3, [r7, #32]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6a3b      	ldr	r3, [r7, #32]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc90      	pop	{r4, r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	08005914 	.word	0x08005914
 80021c0:	40021000 	.word	0x40021000
 80021c4:	007a1200 	.word	0x007a1200
 80021c8:	003d0900 	.word	0x003d0900

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_RCC_GetHCLKFreq+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000010 	.word	0x20000010

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff2 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08005a10 	.word	0x08005a10

08002208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <RCC_Delay+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <RCC_Delay+0x38>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0a5b      	lsrs	r3, r3, #9
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002224:	bf00      	nop
  }
  while (Delay --);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <RCC_Delay+0x1c>
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000010 	.word	0x20000010
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800224a:	f3ef 8305 	mrs	r3, IPSR
 800224e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002250:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002256:	f3ef 8310 	mrs	r3, PRIMASK
 800225a:	607b      	str	r3, [r7, #4]
  return(result);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <osKernelInitialize+0x32>
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <osKernelInitialize+0x60>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d109      	bne.n	800227e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800226a:	f3ef 8311 	mrs	r3, BASEPRI
 800226e:	603b      	str	r3, [r7, #0]
  return(result);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002276:	f06f 0305 	mvn.w	r3, #5
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00c      	b.n	8002298 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <osKernelInitialize+0x60>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <osKernelInitialize+0x60>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e002      	b.n	8002298 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	200000bc 	.word	0x200000bc

080022a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ae:	f3ef 8305 	mrs	r3, IPSR
 80022b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80022b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ba:	f3ef 8310 	mrs	r3, PRIMASK
 80022be:	607b      	str	r3, [r7, #4]
  return(result);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <osKernelStart+0x32>
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <osKernelStart+0x64>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d109      	bne.n	80022e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022ce:	f3ef 8311 	mrs	r3, BASEPRI
 80022d2:	603b      	str	r3, [r7, #0]
  return(result);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80022da:	f06f 0305 	mvn.w	r3, #5
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e00e      	b.n	8002300 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <osKernelStart+0x64>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d107      	bne.n	80022fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <osKernelStart+0x64>)
 80022ec:	2202      	movs	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022f0:	f001 fd64 	bl	8003dbc <vTaskStartScheduler>
      stat = osOK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e002      	b.n	8002300 <osKernelStart+0x58>
    } else {
      stat = osError;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200000bc 	.word	0x200000bc

08002310 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b092      	sub	sp, #72	; 0x48
 8002314:	af04      	add	r7, sp, #16
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002320:	f3ef 8305 	mrs	r3, IPSR
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 8094 	bne.w	8002456 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232e:	f3ef 8310 	mrs	r3, PRIMASK
 8002332:	623b      	str	r3, [r7, #32]
  return(result);
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 808d 	bne.w	8002456 <osThreadNew+0x146>
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <osThreadNew+0x150>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d106      	bne.n	8002352 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002344:	f3ef 8311 	mrs	r3, BASEPRI
 8002348:	61fb      	str	r3, [r7, #28]
  return(result);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8082 	bne.w	8002456 <osThreadNew+0x146>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d07e      	beq.n	8002456 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800235c:	2318      	movs	r3, #24
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002360:	2300      	movs	r3, #0
 8002362:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002364:	f107 031b 	add.w	r3, r7, #27
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d045      	beq.n	8002402 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <osThreadNew+0x74>
        name = attr->name;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <osThreadNew+0x9a>
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	2b38      	cmp	r3, #56	; 0x38
 800239c:	d805      	bhi.n	80023aa <osThreadNew+0x9a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <osThreadNew+0x9e>
        return (NULL);
 80023aa:	2300      	movs	r3, #0
 80023ac:	e054      	b.n	8002458 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00e      	beq.n	80023e4 <osThreadNew+0xd4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b5b      	cmp	r3, #91	; 0x5b
 80023cc:	d90a      	bls.n	80023e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <osThreadNew+0xd4>
        mem = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	e010      	b.n	8002406 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10c      	bne.n	8002406 <osThreadNew+0xf6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <osThreadNew+0xf6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <osThreadNew+0xf6>
          mem = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002400:	e001      	b.n	8002406 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	2b01      	cmp	r3, #1
 800240a:	d110      	bne.n	800242e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002414:	9202      	str	r2, [sp, #8]
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 fafe 	bl	8003a24 <xTaskCreateStatic>
 8002428:	4603      	mov	r3, r0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e013      	b.n	8002456 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d110      	bne.n	8002456 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	b29a      	uxth	r2, r3
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f001 fb48 	bl	8003adc <xTaskCreate>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <osThreadNew+0x146>
          hTask = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002456:	697b      	ldr	r3, [r7, #20]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3738      	adds	r7, #56	; 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200000bc 	.word	0x200000bc

08002464 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800246c:	f3ef 8305 	mrs	r3, IPSR
 8002470:	613b      	str	r3, [r7, #16]
  return(result);
 8002472:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002478:	f3ef 8310 	mrs	r3, PRIMASK
 800247c:	60fb      	str	r3, [r7, #12]
  return(result);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <osDelay+0x34>
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <osDelay+0x58>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d109      	bne.n	80024a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800248c:	f3ef 8311 	mrs	r3, BASEPRI
 8002490:	60bb      	str	r3, [r7, #8]
  return(result);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <osDelay+0x3c>
    stat = osErrorISR;
 8002498:	f06f 0305 	mvn.w	r3, #5
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e007      	b.n	80024b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 fc52 	bl	8003d54 <vTaskDelay>
    }
  }

  return (stat);
 80024b0:	697b      	ldr	r3, [r7, #20]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200000bc 	.word	0x200000bc

080024c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d0:	f3ef 8305 	mrs	r3, IPSR
 80024d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80024d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 8086 	bne.w	80025ea <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024de:	f3ef 8310 	mrs	r3, PRIMASK
 80024e2:	617b      	str	r3, [r7, #20]
  return(result);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d17f      	bne.n	80025ea <osSemaphoreNew+0x12a>
 80024ea:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <osSemaphoreNew+0x134>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d105      	bne.n	80024fe <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024f2:	f3ef 8311 	mrs	r3, BASEPRI
 80024f6:	613b      	str	r3, [r7, #16]
  return(result);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d175      	bne.n	80025ea <osSemaphoreNew+0x12a>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d072      	beq.n	80025ea <osSemaphoreNew+0x12a>
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d86e      	bhi.n	80025ea <osSemaphoreNew+0x12a>
    mem = -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <osSemaphoreNew+0x6e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b4f      	cmp	r3, #79	; 0x4f
 8002526:	d902      	bls.n	800252e <osSemaphoreNew+0x6e>
        mem = 1;
 8002528:	2301      	movs	r3, #1
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	e00c      	b.n	8002548 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <osSemaphoreNew+0x88>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <osSemaphoreNew+0x88>
          mem = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	e001      	b.n	8002548 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d04c      	beq.n	80025ea <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d128      	bne.n	80025a8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10a      	bne.n	8002572 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2203      	movs	r2, #3
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2001      	movs	r0, #1
 800256a:	f000 fa7f 	bl	8002a6c <xQueueGenericCreateStatic>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24
 8002570:	e005      	b.n	800257e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002572:	2203      	movs	r2, #3
 8002574:	2100      	movs	r1, #0
 8002576:	2001      	movs	r0, #1
 8002578:	f000 faef 	bl	8002b5a <xQueueGenericCreate>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d022      	beq.n	80025ca <osSemaphoreNew+0x10a>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01f      	beq.n	80025ca <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800258a:	2300      	movs	r3, #0
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002592:	f000 fbad 	bl	8002cf0 <xQueueGenericSend>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d016      	beq.n	80025ca <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259e:	f001 f870 	bl	8003682 <vQueueDelete>
            hSemaphore = NULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e010      	b.n	80025ca <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb30 	bl	8002c1c <xQueueCreateCountingSemaphoreStatic>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24
 80025be:	e004      	b.n	80025ca <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fb61 	bl	8002c8a <xQueueCreateCountingSemaphore>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <osSemaphoreNew+0x11e>
          name = attr->name;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e001      	b.n	80025e2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80025e2:	69f9      	ldr	r1, [r7, #28]
 80025e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025e6:	f001 f997 	bl	8003918 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200000bc 	.word	0x200000bc

080025f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002610:	f06f 0303 	mvn.w	r3, #3
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e04b      	b.n	80026b0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002618:	f3ef 8305 	mrs	r3, IPSR
 800261c:	617b      	str	r3, [r7, #20]
  return(result);
 800261e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002624:	f3ef 8310 	mrs	r3, PRIMASK
 8002628:	613b      	str	r3, [r7, #16]
  return(result);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <osSemaphoreAcquire+0x4c>
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <osSemaphoreAcquire+0xc4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d128      	bne.n	800268a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002638:	f3ef 8311 	mrs	r3, BASEPRI
 800263c:	60fb      	str	r3, [r7, #12]
  return(result);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d022      	beq.n	800268a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800264a:	f06f 0303 	mvn.w	r3, #3
 800264e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002650:	e02d      	b.n	80026ae <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	461a      	mov	r2, r3
 800265c:	2100      	movs	r1, #0
 800265e:	69b8      	ldr	r0, [r7, #24]
 8002660:	f000 ff56 	bl	8003510 <xQueueReceiveFromISR>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d003      	beq.n	8002672 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800266a:	f06f 0302 	mvn.w	r3, #2
 800266e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002670:	e01d      	b.n	80026ae <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01a      	beq.n	80026ae <osSemaphoreAcquire+0xb6>
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <osSemaphoreAcquire+0xc8>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002688:	e011      	b.n	80026ae <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	f000 fe33 	bl	80032f8 <xQueueSemaphoreTake>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00b      	beq.n	80026b0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800269e:	f06f 0301 	mvn.w	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e004      	b.n	80026b0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80026a6:	f06f 0302 	mvn.w	r3, #2
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	e000      	b.n	80026b0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80026ae:	bf00      	nop
      }
    }
  }

  return (stat);
 80026b0:	69fb      	ldr	r3, [r7, #28]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200000bc 	.word	0x200000bc
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80026da:	f06f 0303 	mvn.w	r3, #3
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e03e      	b.n	8002760 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e2:	f3ef 8305 	mrs	r3, IPSR
 80026e6:	617b      	str	r3, [r7, #20]
  return(result);
 80026e8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ee:	f3ef 8310 	mrs	r3, PRIMASK
 80026f2:	613b      	str	r3, [r7, #16]
  return(result);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <osSemaphoreRelease+0x4a>
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <osSemaphoreRelease+0xa8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d120      	bne.n	8002744 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002702:	f3ef 8311 	mrs	r3, BASEPRI
 8002706:	60fb      	str	r3, [r7, #12]
  return(result);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01a      	beq.n	8002744 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4619      	mov	r1, r3
 8002718:	69b8      	ldr	r0, [r7, #24]
 800271a:	f000 fc7f 	bl	800301c <xQueueGiveFromISR>
 800271e:	4603      	mov	r3, r0
 8002720:	2b01      	cmp	r3, #1
 8002722:	d003      	beq.n	800272c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8002724:	f06f 0302 	mvn.w	r3, #2
 8002728:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800272a:	e018      	b.n	800275e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <osSemaphoreRelease+0x9a>
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <osSemaphoreRelease+0xac>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002742:	e00c      	b.n	800275e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	69b8      	ldr	r0, [r7, #24]
 800274c:	f000 fad0 	bl	8002cf0 <xQueueGenericSend>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d004      	beq.n	8002760 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002756:	f06f 0302 	mvn.w	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e000      	b.n	8002760 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800275e:	bf00      	nop
    }
  }

  return (stat);
 8002760:	69fb      	ldr	r3, [r7, #28]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200000bc 	.word	0x200000bc
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <osSemaphoreGetCount+0x18>
    count = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e01e      	b.n	80027ca <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800278c:	f3ef 8305 	mrs	r3, IPSR
 8002790:	617b      	str	r3, [r7, #20]
  return(result);
 8002792:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10f      	bne.n	80027b8 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002798:	f3ef 8310 	mrs	r3, PRIMASK
 800279c:	613b      	str	r3, [r7, #16]
  return(result);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <osSemaphoreGetCount+0x44>
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <osSemaphoreGetCount+0x60>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d10a      	bne.n	80027c2 <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ac:	f3ef 8311 	mrs	r3, BASEPRI
 80027b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80027b8:	69b8      	ldr	r0, [r7, #24]
 80027ba:	f000 ff47 	bl	800364c <uxQueueMessagesWaitingFromISR>
 80027be:	61f8      	str	r0, [r7, #28]
 80027c0:	e003      	b.n	80027ca <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80027c2:	69b8      	ldr	r0, [r7, #24]
 80027c4:	f000 ff24 	bl	8003610 <uxQueueMessagesWaiting>
 80027c8:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 80027ca:	69fb      	ldr	r3, [r7, #28]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200000bc 	.word	0x200000bc

080027d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a06      	ldr	r2, [pc, #24]	; (8002800 <vApplicationGetIdleTaskMemory+0x28>)
 80027e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <vApplicationGetIdleTaskMemory+0x2c>)
 80027ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	200000c0 	.word	0x200000c0
 8002804:	2000011c 	.word	0x2000011c

08002808 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a07      	ldr	r2, [pc, #28]	; (8002834 <vApplicationGetTimerTaskMemory+0x2c>)
 8002818:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <vApplicationGetTimerTaskMemory+0x30>)
 800281e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000031c 	.word	0x2000031c
 8002838:	20000378 	.word	0x20000378

0800283c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f103 0208 	add.w	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0208 	add.w	r2, r3, #8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 0208 	add.w	r2, r3, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d103      	bne.n	80028f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e00c      	b.n	8002912 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3308      	adds	r3, #8
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e002      	b.n	8002906 <vListInsert+0x2e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d2f6      	bcs.n	8002900 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6852      	ldr	r2, [r2, #4]
 8002968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d103      	bne.n	800297c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029c6:	f002 fc31 	bl	800522c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	441a      	add	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	3b01      	subs	r3, #1
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	441a      	add	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d114      	bne.n	8002a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01a      	beq.n	8002a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3310      	adds	r3, #16
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fc51 	bl	80042d0 <xTaskRemoveFromEventList>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <xQueueGenericReset+0xcc>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	e009      	b.n	8002a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fef6 	bl	800283c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3324      	adds	r3, #36	; 0x24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fef1 	bl	800283c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a5a:	f002 fc17 	bl	800528c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aae:	bf00      	nop
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <xQueueGenericCreateStatic+0x52>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <xQueueGenericCreateStatic+0x56>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueGenericCreateStatic+0x58>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	623b      	str	r3, [r7, #32]
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <xQueueGenericCreateStatic+0x7e>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <xQueueGenericCreateStatic+0x82>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <xQueueGenericCreateStatic+0x84>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	61fb      	str	r3, [r7, #28]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b0a:	2350      	movs	r3, #80	; 0x50
 8002b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d00a      	beq.n	8002b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61bb      	str	r3, [r7, #24]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f843 	bl	8002bd6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3730      	adds	r7, #48	; 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b08a      	sub	sp, #40	; 0x28
 8002b5e:	af02      	add	r7, sp, #8
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	613b      	str	r3, [r7, #16]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e004      	b.n	8002b9a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3350      	adds	r3, #80	; 0x50
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fc44 	bl	800542c <pvPortMalloc>
 8002ba4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00f      	beq.n	8002bcc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	3350      	adds	r3, #80	; 0x50
 8002bb0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bba:	79fa      	ldrb	r2, [r7, #7]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f805 	bl	8002bd6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
	}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e002      	b.n	8002bf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c04:	2101      	movs	r1, #1
 8002c06:	69b8      	ldr	r0, [r7, #24]
 8002c08:	f7ff fec8 	bl	800299c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	61bb      	str	r3, [r7, #24]
}
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d90a      	bls.n	8002c62 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	617b      	str	r3, [r7, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff fefd 	bl	8002a6c <xQueueGenericCreateStatic>
 8002c72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c80:	69fb      	ldr	r3, [r7, #28]
	}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	613b      	str	r3, [r7, #16]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d90a      	bls.n	8002cce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	60fb      	str	r3, [r7, #12]
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cce:	2202      	movs	r2, #2
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ff41 	bl	8002b5a <xQueueGenericCreate>
 8002cd8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ce6:	697b      	ldr	r3, [r7, #20]
	}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSend+0x32>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <xQueueGenericSend+0x40>
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <xQueueGenericSend+0x44>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <xQueueGenericSend+0x46>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xQueueGenericSend+0x60>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x6e>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x72>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x74>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7e:	f001 fc69 	bl	8004654 <xTaskGetSchedulerState>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <xQueueGenericSend+0x9e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0xa2>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0xa4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSend+0xbe>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	61fb      	str	r3, [r7, #28]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dae:	f002 fa3d 	bl	800522c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <xQueueGenericSend+0xd4>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d129      	bne.n	8002e18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f000 fc94 	bl	80036f6 <prvCopyDataToQueue>
 8002dce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fa77 	bl	80042d0 <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	e00a      	b.n	8002e10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e10:	f002 fa3c 	bl	800528c <vPortExitCritical>
				return pdPASS;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e063      	b.n	8002ee0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e1e:	f002 fa35 	bl	800528c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e05c      	b.n	8002ee0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fab1 	bl	8004398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e3a:	f002 fa27 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e3e:	f001 f823 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e42:	f002 f9f3 	bl	800522c <vPortEnterCritical>
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d103      	bne.n	8002e5c <xQueueGenericSend+0x16c>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x182>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e72:	f002 fa0b 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e76:	1d3a      	adds	r2, r7, #4
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 faa0 	bl	80043c4 <xTaskCheckForTimeOut>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d124      	bne.n	8002ed4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8c:	f000 fd2b 	bl	80038e6 <prvIsQueueFull>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	3310      	adds	r3, #16
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f9c6 	bl	8004230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea6:	f000 fcb6 	bl	8003816 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f000 fffb 	bl	8003ea4 <xTaskResumeAll>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f af7c 	bne.w	8002dae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	e772      	b.n	8002dae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fca4 	bl	8003816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ece:	f000 ffe9 	bl	8003ea4 <xTaskResumeAll>
 8002ed2:	e76c      	b.n	8002dae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fc9e 	bl	8003816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eda:	f000 ffe3 	bl	8003ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ede:	2300      	movs	r3, #0
		}
	}
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3738      	adds	r7, #56	; 0x38
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <xQueueGenericSendFromISR+0x3c>
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xQueueGenericSendFromISR+0x40>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <xQueueGenericSendFromISR+0x42>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	623b      	str	r3, [r7, #32]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSendFromISR+0x6a>
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericSendFromISR+0x6e>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericSendFromISR+0x70>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	61fb      	str	r3, [r7, #28]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f76:	f002 fa1b 	bl	80053b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	61ba      	str	r2, [r7, #24]
 8002f90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xQueueGenericSendFromISR+0xbc>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d12c      	bne.n	8003002 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb8:	f000 fb9d 	bl	80036f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d112      	bne.n	8002fec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	3324      	adds	r3, #36	; 0x24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 f97c 	bl	80042d0 <xTaskRemoveFromEventList>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e007      	b.n	8002ffc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	b25a      	sxtb	r2, r3
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003000:	e001      	b.n	8003006 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003014:	4618      	mov	r0, r3
 8003016:	3738      	adds	r7, #56	; 0x38
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	; 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
}
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <xQueueGiveFromISR+0x48>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	61fb      	str	r3, [r7, #28]
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <xQueueGiveFromISR+0x58>
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <xQueueGiveFromISR+0x5c>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <xQueueGiveFromISR+0x5e>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <xQueueGiveFromISR+0x78>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	61bb      	str	r3, [r7, #24]
}
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003094:	f002 f98c 	bl	80053b0 <vPortValidateInterruptPriority>
	__asm volatile
 8003098:	f3ef 8211 	mrs	r2, BASEPRI
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	617a      	str	r2, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80030b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d22b      	bcs.n	800311c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d112      	bne.n	8003106 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	3324      	adds	r3, #36	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f8ef 	bl	80042d0 <xTaskRemoveFromEventList>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e007      	b.n	8003116 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310a:	3301      	adds	r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	b25a      	sxtb	r2, r3
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003116:	2301      	movs	r3, #1
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	e001      	b.n	8003120 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f383 8811 	msr	BASEPRI, r3
}
 800312a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800312e:	4618      	mov	r0, r3
 8003130:	3738      	adds	r7, #56	; 0x38
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xQueueReceive+0x30>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <xQueueReceive+0x3e>
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueReceive+0x42>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueReceive+0x44>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueReceive+0x5e>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61fb      	str	r3, [r7, #28]
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003196:	f001 fa5d 	bl	8004654 <xTaskGetSchedulerState>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <xQueueReceive+0x6e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <xQueueReceive+0x72>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueReceive+0x74>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueReceive+0x8e>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61bb      	str	r3, [r7, #24]
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031c6:	f002 f831 	bl	800522c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01f      	beq.n	8003216 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 faf6 	bl	80037ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00f      	beq.n	800320e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	3310      	adds	r3, #16
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f86c 	bl	80042d0 <xTaskRemoveFromEventList>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <xQueueReceive+0x1bc>)
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800320e:	f002 f83d 	bl	800528c <vPortExitCritical>
				return pdPASS;
 8003212:	2301      	movs	r3, #1
 8003214:	e069      	b.n	80032ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800321c:	f002 f836 	bl	800528c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003220:	2300      	movs	r3, #0
 8003222:	e062      	b.n	80032ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	4618      	mov	r0, r3
 8003230:	f001 f8b2 	bl	8004398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003234:	2301      	movs	r3, #1
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003238:	f002 f828 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800323c:	f000 fe24 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003240:	f001 fff4 	bl	800522c <vPortEnterCritical>
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324a:	b25b      	sxtb	r3, r3
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d103      	bne.n	800325a <xQueueReceive+0x122>
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003260:	b25b      	sxtb	r3, r3
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d103      	bne.n	8003270 <xQueueReceive+0x138>
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003270:	f002 f80c 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003274:	1d3a      	adds	r2, r7, #4
 8003276:	f107 0310 	add.w	r3, r7, #16
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f8a1 	bl	80043c4 <xTaskCheckForTimeOut>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d123      	bne.n	80032d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328a:	f000 fb16 	bl	80038ba <prvIsQueueEmpty>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 ffc7 	bl	8004230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a4:	f000 fab7 	bl	8003816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032a8:	f000 fdfc 	bl	8003ea4 <xTaskResumeAll>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d189      	bne.n	80031c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <xQueueReceive+0x1bc>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	e780      	b.n	80031c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c6:	f000 faa6 	bl	8003816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ca:	f000 fdeb 	bl	8003ea4 <xTaskResumeAll>
 80032ce:	e77a      	b.n	80031c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d2:	f000 faa0 	bl	8003816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032d6:	f000 fde5 	bl	8003ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032dc:	f000 faed 	bl	80038ba <prvIsQueueEmpty>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f43f af6f 	beq.w	80031c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3730      	adds	r7, #48	; 0x30
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	623b      	str	r3, [r7, #32]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	61fb      	str	r3, [r7, #28]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003348:	f001 f984 	bl	8004654 <xTaskGetSchedulerState>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <xQueueSemaphoreTake+0x60>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <xQueueSemaphoreTake+0x64>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <xQueueSemaphoreTake+0x66>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61bb      	str	r3, [r7, #24]
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003378:	f001 ff58 	bl	800522c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d024      	beq.n	80033d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	1e5a      	subs	r2, r3, #1
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003398:	f001 fadc 	bl	8004954 <pvTaskIncrementMutexHeldCount>
 800339c:	4602      	mov	r2, r0
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	3310      	adds	r3, #16
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff8e 	bl	80042d0 <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033ba:	4b54      	ldr	r3, [pc, #336]	; (800350c <xQueueSemaphoreTake+0x214>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ca:	f001 ff5f 	bl	800528c <vPortExitCritical>
				return pdPASS;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e097      	b.n	8003502 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	617b      	str	r3, [r7, #20]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033f4:	f001 ff4a 	bl	800528c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e082      	b.n	8003502 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	4618      	mov	r0, r3
 8003408:	f000 ffc6 	bl	8004398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003410:	f001 ff3c 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003414:	f000 fd38 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003418:	f001 ff08 	bl	800522c <vPortEnterCritical>
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003422:	b25b      	sxtb	r3, r3
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d103      	bne.n	8003432 <xQueueSemaphoreTake+0x13a>
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <xQueueSemaphoreTake+0x150>
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003448:	f001 ff20 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800344c:	463a      	mov	r2, r7
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ffb5 	bl	80043c4 <xTaskCheckForTimeOut>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d132      	bne.n	80034c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003462:	f000 fa2a 	bl	80038ba <prvIsQueueEmpty>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d026      	beq.n	80034ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003474:	f001 feda 	bl	800522c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f907 	bl	8004690 <xTaskPriorityInherit>
 8003482:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003484:	f001 ff02 	bl	800528c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	3324      	adds	r3, #36	; 0x24
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fecd 	bl	8004230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003498:	f000 f9bd 	bl	8003816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800349c:	f000 fd02 	bl	8003ea4 <xTaskResumeAll>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f af68 	bne.w	8003378 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <xQueueSemaphoreTake+0x214>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	e75e      	b.n	8003378 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034bc:	f000 f9ab 	bl	8003816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034c0:	f000 fcf0 	bl	8003ea4 <xTaskResumeAll>
 80034c4:	e758      	b.n	8003378 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034c8:	f000 f9a5 	bl	8003816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034cc:	f000 fcea 	bl	8003ea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d2:	f000 f9f2 	bl	80038ba <prvIsQueueEmpty>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f43f af4d 	beq.w	8003378 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80034e4:	f001 fea2 	bl	800522c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ea:	f000 f8ed 	bl	80036c8 <prvGetDisinheritPriorityAfterTimeout>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f9a6 	bl	8004848 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034fc:	f001 fec6 	bl	800528c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003502:	4618      	mov	r0, r3
 8003504:	3738      	adds	r7, #56	; 0x38
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	; 0x38
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	623b      	str	r3, [r7, #32]
}
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <xQueueReceiveFromISR+0x3a>
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <xQueueReceiveFromISR+0x3e>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <xQueueReceiveFromISR+0x40>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	61fb      	str	r3, [r7, #28]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800356a:	f001 ff21 	bl	80053b0 <vPortValidateInterruptPriority>
	__asm volatile
 800356e:	f3ef 8211 	mrs	r2, BASEPRI
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	61ba      	str	r2, [r7, #24]
 8003584:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003586:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02f      	beq.n	80035f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a4:	f000 f911 	bl	80037ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d112      	bne.n	80035e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	3310      	adds	r3, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fe82 	bl	80042d0 <xTaskRemoveFromEventList>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035e4:	3301      	adds	r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	b25a      	sxtb	r2, r3
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80035f0:	2301      	movs	r3, #1
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
 80035f4:	e001      	b.n	80035fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f383 8811 	msr	BASEPRI, r3
}
 8003604:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003608:	4618      	mov	r0, r3
 800360a:	3738      	adds	r7, #56	; 0x38
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	60bb      	str	r3, [r7, #8]
}
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003634:	f001 fdfa 	bl	800522c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800363e:	f001 fe25 	bl	800528c <vPortExitCritical>

	return uxReturn;
 8003642:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60bb      	str	r3, [r7, #8]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8003676:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <vQueueDelete+0x28>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60bb      	str	r3, [r7, #8]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f95c 	bl	8003968 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f001 ff7a 	bl	80055b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e001      	b.n	80036ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036ea:	68fb      	ldr	r3, [r7, #12]
	}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d14d      	bne.n	80037b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f823 	bl	800476c <xTaskPriorityDisinherit>
 8003726:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	e043      	b.n	80037b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6898      	ldr	r0, [r3, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	461a      	mov	r2, r3
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	f002 f86f 	bl	8005824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	441a      	add	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d32b      	bcc.n	80037b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e026      	b.n	80037b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68d8      	ldr	r0, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	461a      	mov	r2, r3
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	f002 f855 	bl	8005824 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	425b      	negs	r3, r3
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d207      	bcs.n	80037a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	425b      	negs	r3, r3
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d105      	bne.n	80037b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037c0:	697b      	ldr	r3, [r7, #20]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d018      	beq.n	800380e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d303      	bcc.n	80037fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	461a      	mov	r2, r3
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f002 f80b 	bl	8005824 <memcpy>
	}
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800381e:	f001 fd05 	bl	800522c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003828:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800382a:	e011      	b.n	8003850 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fd49 	bl	80042d0 <xTaskRemoveFromEventList>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003844:	f000 fe20 	bl	8004488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	3b01      	subs	r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	dce9      	bgt.n	800382c <prvUnlockQueue+0x16>
 8003858:	e000      	b.n	800385c <prvUnlockQueue+0x46>
					break;
 800385a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003864:	f001 fd12 	bl	800528c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003868:	f001 fce0 	bl	800522c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003872:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003874:	e011      	b.n	800389a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3310      	adds	r3, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fd24 	bl	80042d0 <xTaskRemoveFromEventList>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800388e:	f000 fdfb 	bl	8004488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	3b01      	subs	r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800389a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dce9      	bgt.n	8003876 <prvUnlockQueue+0x60>
 80038a2:	e000      	b.n	80038a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038ae:	f001 fced 	bl	800528c <vPortExitCritical>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038c2:	f001 fcb3 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038ce:	2301      	movs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e001      	b.n	80038d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d8:	f001 fcd8 	bl	800528c <vPortExitCritical>

	return xReturn;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ee:	f001 fc9d 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d102      	bne.n	8003904 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e001      	b.n	8003908 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003908:	f001 fcc0 	bl	800528c <vPortExitCritical>

	return xReturn;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e014      	b.n	8003952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <vQueueAddToRegistry+0x4c>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003934:	490b      	ldr	r1, [pc, #44]	; (8003964 <vQueueAddToRegistry+0x4c>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <vQueueAddToRegistry+0x4c>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800394a:	e006      	b.n	800395a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b07      	cmp	r3, #7
 8003956:	d9e7      	bls.n	8003928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	20000778 	.word	0x20000778

08003968 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e016      	b.n	80039a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003976:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <vQueueUnregisterQueue+0x50>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d10b      	bne.n	800399e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003986:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <vQueueUnregisterQueue+0x50>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2100      	movs	r1, #0
 800398c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003990:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <vQueueUnregisterQueue+0x50>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
				break;
 800399c:	e006      	b.n	80039ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d9e5      	bls.n	8003976 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000778 	.word	0x20000778

080039bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039cc:	f001 fc2e 	bl	800522c <vPortEnterCritical>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d103      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x2a>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d103      	bne.n	80039fc <vQueueWaitForMessageRestricted+0x40>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	f001 fc46 	bl	800528c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fc31 	bl	8004278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff fefd 	bl	8003816 <prvUnlockQueue>
	}
 8003a1c:	bf00      	nop
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af04      	add	r7, sp, #16
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	623b      	str	r3, [r7, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xTaskCreateStatic+0x46>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a6a:	235c      	movs	r3, #92	; 0x5c
 8003a6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b5c      	cmp	r3, #92	; 0x5c
 8003a72:	d00a      	beq.n	8003a8a <xTaskCreateStatic+0x66>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01e      	beq.n	8003ace <xTaskCreateStatic+0xaa>
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01b      	beq.n	8003ace <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9303      	str	r3, [sp, #12]
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f850 	bl	8003b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac8:	f000 f8d4 	bl	8003c74 <prvAddNewTaskToReadyList>
 8003acc:	e001      	b.n	8003ad2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ad2:	697b      	ldr	r3, [r7, #20]
	}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fc9b 	bl	800542c <pvPortMalloc>
 8003af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003afe:	205c      	movs	r0, #92	; 0x5c
 8003b00:	f001 fc94 	bl	800542c <pvPortMalloc>
 8003b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
 8003b12:	e005      	b.n	8003b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f001 fd4d 	bl	80055b4 <vPortFree>
 8003b1a:	e001      	b.n	8003b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d017      	beq.n	8003b56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f80e 	bl	8003b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b4a:	69f8      	ldr	r0, [r7, #28]
 8003b4c:	f000 f892 	bl	8003c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e002      	b.n	8003b5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b088      	sub	sp, #32
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	21a5      	movs	r1, #165	; 0xa5
 8003b80:	f001 fe5e 	bl	8005840 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	617b      	str	r3, [r7, #20]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e012      	b.n	8003bea <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	7819      	ldrb	r1, [r3, #0]
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3334      	adds	r3, #52	; 0x34
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d9e9      	bls.n	8003bc4 <prvInitialiseNewTask+0x5e>
 8003bf0:	e000      	b.n	8003bf4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003bf2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	2b37      	cmp	r3, #55	; 0x37
 8003c00:	d901      	bls.n	8003c06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c02:	2337      	movs	r3, #55	; 0x37
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2200      	movs	r2, #0
 8003c16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fe2c 	bl	800287a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	3318      	adds	r3, #24
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fe27 	bl	800287a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	69b8      	ldr	r0, [r7, #24]
 8003c56:	f001 f9f7 	bl	8005048 <pxPortInitialiseStack>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c7c:	f001 fad6 	bl	800522c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c92:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d110      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ca0:	f000 fc16 	bl	80044d0 <prvInitialiseTaskLists>
 8003ca4:	e00d      	b.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <prvAddNewTaskToReadyList+0xcc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cae:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d802      	bhi.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <prvAddNewTaskToReadyList+0xd0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <prvAddNewTaskToReadyList+0xd0>)
 8003cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <prvAddNewTaskToReadyList+0xd0>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <prvAddNewTaskToReadyList+0xd4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d903      	bls.n	8003ce8 <prvAddNewTaskToReadyList+0x74>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <prvAddNewTaskToReadyList+0xd4>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <prvAddNewTaskToReadyList+0xd8>)
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fe fdc7 	bl	8002892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d04:	f001 fac2 	bl	800528c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <prvAddNewTaskToReadyList+0xcc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d207      	bcs.n	8003d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <prvAddNewTaskToReadyList+0xdc>)
 8003d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000c8c 	.word	0x20000c8c
 8003d3c:	200007b8 	.word	0x200007b8
 8003d40:	20000c98 	.word	0x20000c98
 8003d44:	20000ca8 	.word	0x20000ca8
 8003d48:	20000c94 	.word	0x20000c94
 8003d4c:	200007bc 	.word	0x200007bc
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <vTaskDelay+0x60>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <vTaskDelay+0x30>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60bb      	str	r3, [r7, #8]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d84:	f000 f880 	bl	8003e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d88:	2100      	movs	r1, #0
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fdf6 	bl	800497c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d90:	f000 f888 	bl	8003ea4 <xTaskResumeAll>
 8003d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <vTaskDelay+0x64>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000cb4 	.word	0x20000cb4
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dca:	463a      	mov	r2, r7
 8003dcc:	1d39      	adds	r1, r7, #4
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fd00 	bl	80027d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	460a      	mov	r2, r1
 8003dea:	4921      	ldr	r1, [pc, #132]	; (8003e70 <vTaskStartScheduler+0xb4>)
 8003dec:	4821      	ldr	r0, [pc, #132]	; (8003e74 <vTaskStartScheduler+0xb8>)
 8003dee:	f7ff fe19 	bl	8003a24 <xTaskCreateStatic>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <vTaskStartScheduler+0xbc>)
 8003df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <vTaskStartScheduler+0xbc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e001      	b.n	8003e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e10:	f000 fe08 	bl	8004a24 <xTimerCreateTimerTask>
 8003e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d116      	bne.n	8003e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <vTaskStartScheduler+0xc0>)
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <vTaskStartScheduler+0xc4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <vTaskStartScheduler+0xc8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e44:	f001 f980 	bl	8005148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e48:	e00e      	b.n	8003e68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d10a      	bne.n	8003e68 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <vTaskStartScheduler+0xaa>
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	08005924 	.word	0x08005924
 8003e74:	080044a1 	.word	0x080044a1
 8003e78:	20000cb0 	.word	0x20000cb0
 8003e7c:	20000cac 	.word	0x20000cac
 8003e80:	20000c98 	.word	0x20000c98
 8003e84:	20000c90 	.word	0x20000c90

08003e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <vTaskSuspendAll+0x18>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <vTaskSuspendAll+0x18>)
 8003e94:	6013      	str	r3, [r2, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000cb4 	.word	0x20000cb4

08003ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eb2:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <xTaskResumeAll+0x118>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	603b      	str	r3, [r7, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ed0:	f001 f9ac 	bl	800522c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <xTaskResumeAll+0x118>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <xTaskResumeAll+0x118>)
 8003edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ede:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <xTaskResumeAll+0x118>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d162      	bne.n	8003fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <xTaskResumeAll+0x11c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d05e      	beq.n	8003fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eee:	e02f      	b.n	8003f50 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ef0:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <xTaskResumeAll+0x120>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3318      	adds	r3, #24
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fd23 	bl	8002948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fd1e 	bl	8002948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <xTaskResumeAll+0x124>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d903      	bls.n	8003f20 <xTaskResumeAll+0x7c>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	; (8003fc8 <xTaskResumeAll+0x124>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <xTaskResumeAll+0x128>)
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fe fcab 	bl	8002892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <xTaskResumeAll+0x12c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <xTaskResumeAll+0x130>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <xTaskResumeAll+0x120>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1cb      	bne.n	8003ef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f5e:	f000 fb55 	bl	800460c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <xTaskResumeAll+0x134>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f6e:	f000 f845 	bl	8003ffc <xTaskIncrementTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <xTaskResumeAll+0x130>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f1      	bne.n	8003f6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <xTaskResumeAll+0x134>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <xTaskResumeAll+0x130>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <xTaskResumeAll+0x138>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fac:	f001 f96e 	bl	800528c <vPortExitCritical>

	return xAlreadyYielded;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000cb4 	.word	0x20000cb4
 8003fc0:	20000c8c 	.word	0x20000c8c
 8003fc4:	20000c4c 	.word	0x20000c4c
 8003fc8:	20000c94 	.word	0x20000c94
 8003fcc:	200007bc 	.word	0x200007bc
 8003fd0:	200007b8 	.word	0x200007b8
 8003fd4:	20000ca0 	.word	0x20000ca0
 8003fd8:	20000c9c 	.word	0x20000c9c
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <xTaskGetTickCount+0x18>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fec:	687b      	ldr	r3, [r7, #4]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000c90 	.word	0x20000c90

08003ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <xTaskIncrementTick+0x150>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 808e 	bne.w	800412c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <xTaskIncrementTick+0x154>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004018:	4a4d      	ldr	r2, [pc, #308]	; (8004150 <xTaskIncrementTick+0x154>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d120      	bne.n	8004066 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <xTaskIncrementTick+0x158>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <xTaskIncrementTick+0x48>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	603b      	str	r3, [r7, #0]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <xTaskIncrementTick+0x46>
 8004044:	4b43      	ldr	r3, [pc, #268]	; (8004154 <xTaskIncrementTick+0x158>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b43      	ldr	r3, [pc, #268]	; (8004158 <xTaskIncrementTick+0x15c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a41      	ldr	r2, [pc, #260]	; (8004154 <xTaskIncrementTick+0x158>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4a41      	ldr	r2, [pc, #260]	; (8004158 <xTaskIncrementTick+0x15c>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b40      	ldr	r3, [pc, #256]	; (800415c <xTaskIncrementTick+0x160>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a3f      	ldr	r2, [pc, #252]	; (800415c <xTaskIncrementTick+0x160>)
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	f000 fad3 	bl	800460c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004066:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <xTaskIncrementTick+0x164>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d34e      	bcc.n	800410e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004070:	4b38      	ldr	r3, [pc, #224]	; (8004154 <xTaskIncrementTick+0x158>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <xTaskIncrementTick+0x82>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xTaskIncrementTick+0x84>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <xTaskIncrementTick+0x164>)
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	601a      	str	r2, [r3, #0]
					break;
 800408c:	e03f      	b.n	800410e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <xTaskIncrementTick+0x158>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d203      	bcs.n	80040ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040a6:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <xTaskIncrementTick+0x164>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6013      	str	r3, [r2, #0]
						break;
 80040ac:	e02f      	b.n	800410e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fc48 	bl	8002948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3318      	adds	r3, #24
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fc3f 	bl	8002948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <xTaskIncrementTick+0x168>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <xTaskIncrementTick+0xe2>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <xTaskIncrementTick+0x168>)
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <xTaskIncrementTick+0x16c>)
 80040ec:	441a      	add	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7fe fbcc 	bl	8002892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <xTaskIncrementTick+0x170>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d3b3      	bcc.n	8004070 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410c:	e7b0      	b.n	8004070 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800410e:	4b17      	ldr	r3, [pc, #92]	; (800416c <xTaskIncrementTick+0x170>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4914      	ldr	r1, [pc, #80]	; (8004168 <xTaskIncrementTick+0x16c>)
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d907      	bls.n	8004136 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004126:	2301      	movs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e004      	b.n	8004136 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <xTaskIncrementTick+0x174>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <xTaskIncrementTick+0x174>)
 8004134:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <xTaskIncrementTick+0x178>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004142:	697b      	ldr	r3, [r7, #20]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000cb4 	.word	0x20000cb4
 8004150:	20000c90 	.word	0x20000c90
 8004154:	20000c44 	.word	0x20000c44
 8004158:	20000c48 	.word	0x20000c48
 800415c:	20000ca4 	.word	0x20000ca4
 8004160:	20000cac 	.word	0x20000cac
 8004164:	20000c94 	.word	0x20000c94
 8004168:	200007bc 	.word	0x200007bc
 800416c:	200007b8 	.word	0x200007b8
 8004170:	20000c9c 	.word	0x20000c9c
 8004174:	20000ca0 	.word	0x20000ca0

08004178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <vTaskSwitchContext+0xa4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <vTaskSwitchContext+0xa8>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800418c:	e041      	b.n	8004212 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <vTaskSwitchContext+0xa8>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <vTaskSwitchContext+0xac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e010      	b.n	80041be <vTaskSwitchContext+0x46>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <vTaskSwitchContext+0x3e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	491a      	ldr	r1, [pc, #104]	; (8004228 <vTaskSwitchContext+0xb0>)
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0e4      	beq.n	800419c <vTaskSwitchContext+0x24>
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4a12      	ldr	r2, [pc, #72]	; (8004228 <vTaskSwitchContext+0xb0>)
 80041de:	4413      	add	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	3308      	adds	r3, #8
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d104      	bne.n	8004202 <vTaskSwitchContext+0x8a>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <vTaskSwitchContext+0xb4>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4a05      	ldr	r2, [pc, #20]	; (8004224 <vTaskSwitchContext+0xac>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6013      	str	r3, [r2, #0]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	20000cb4 	.word	0x20000cb4
 8004220:	20000ca0 	.word	0x20000ca0
 8004224:	20000c94 	.word	0x20000c94
 8004228:	200007bc 	.word	0x200007bc
 800422c:	200007b8 	.word	0x200007b8

08004230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <vTaskPlaceOnEventList+0x44>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3318      	adds	r3, #24
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fe fb3a 	bl	80028d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004264:	2101      	movs	r1, #1
 8004266:	6838      	ldr	r0, [r7, #0]
 8004268:	f000 fb88 	bl	800497c <prvAddCurrentTaskToDelayedList>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200007b8 	.word	0x200007b8

08004278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	617b      	str	r3, [r7, #20]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <vTaskPlaceOnEventListRestricted+0x54>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4619      	mov	r1, r3
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7fe faf2 	bl	8002892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	68b8      	ldr	r0, [r7, #8]
 80042be:	f000 fb5d 	bl	800497c <prvAddCurrentTaskToDelayedList>
	}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200007b8 	.word	0x200007b8

080042d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60fb      	str	r3, [r7, #12]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	3318      	adds	r3, #24
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fb21 	bl	8002948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <xTaskRemoveFromEventList+0xb0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11d      	bne.n	800434a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3304      	adds	r3, #4
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fb18 	bl	8002948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <xTaskRemoveFromEventList+0xb4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d903      	bls.n	800432c <xTaskRemoveFromEventList+0x5c>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <xTaskRemoveFromEventList+0xb4>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <xTaskRemoveFromEventList+0xb8>)
 800433a:	441a      	add	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe faa5 	bl	8002892 <vListInsertEnd>
 8004348:	e005      	b.n	8004356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3318      	adds	r3, #24
 800434e:	4619      	mov	r1, r3
 8004350:	480e      	ldr	r0, [pc, #56]	; (800438c <xTaskRemoveFromEventList+0xbc>)
 8004352:	f7fe fa9e 	bl	8002892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <xTaskRemoveFromEventList+0xc0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d905      	bls.n	8004370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <xTaskRemoveFromEventList+0xc4>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e001      	b.n	8004374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000cb4 	.word	0x20000cb4
 8004384:	20000c94 	.word	0x20000c94
 8004388:	200007bc 	.word	0x200007bc
 800438c:	20000c4c 	.word	0x20000c4c
 8004390:	200007b8 	.word	0x200007b8
 8004394:	20000ca0 	.word	0x20000ca0

08004398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <vTaskInternalSetTimeOutState+0x24>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <vTaskInternalSetTimeOutState+0x28>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	605a      	str	r2, [r3, #4]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000ca4 	.word	0x20000ca4
 80043c0:	20000c90 	.word	0x20000c90

080043c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	613b      	str	r3, [r7, #16]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004406:	f000 ff11 	bl	800522c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <xTaskCheckForTimeOut+0xbc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d102      	bne.n	800442a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	e023      	b.n	8004472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <xTaskCheckForTimeOut+0xc0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d007      	beq.n	8004446 <xTaskCheckForTimeOut+0x82>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e015      	b.n	8004472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	d20b      	bcs.n	8004468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff9b 	bl	8004398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e004      	b.n	8004472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004472:	f000 ff0b 	bl	800528c <vPortExitCritical>

	return xReturn;
 8004476:	69fb      	ldr	r3, [r7, #28]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000c90 	.word	0x20000c90
 8004484:	20000ca4 	.word	0x20000ca4

08004488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <vTaskMissedYield+0x14>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000ca0 	.word	0x20000ca0

080044a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044a8:	f000 f852 	bl	8004550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <prvIdleTask+0x28>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d9f9      	bls.n	80044a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <prvIdleTask+0x2c>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044c4:	e7f0      	b.n	80044a8 <prvIdleTask+0x8>
 80044c6:	bf00      	nop
 80044c8:	200007bc 	.word	0x200007bc
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	e00c      	b.n	80044f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a12      	ldr	r2, [pc, #72]	; (8004530 <prvInitialiseTaskLists+0x60>)
 80044e8:	4413      	add	r3, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9a6 	bl	800283c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3301      	adds	r3, #1
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b37      	cmp	r3, #55	; 0x37
 80044fa:	d9ef      	bls.n	80044dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044fc:	480d      	ldr	r0, [pc, #52]	; (8004534 <prvInitialiseTaskLists+0x64>)
 80044fe:	f7fe f99d 	bl	800283c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <prvInitialiseTaskLists+0x68>)
 8004504:	f7fe f99a 	bl	800283c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004508:	480c      	ldr	r0, [pc, #48]	; (800453c <prvInitialiseTaskLists+0x6c>)
 800450a:	f7fe f997 	bl	800283c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800450e:	480c      	ldr	r0, [pc, #48]	; (8004540 <prvInitialiseTaskLists+0x70>)
 8004510:	f7fe f994 	bl	800283c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004514:	480b      	ldr	r0, [pc, #44]	; (8004544 <prvInitialiseTaskLists+0x74>)
 8004516:	f7fe f991 	bl	800283c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvInitialiseTaskLists+0x78>)
 800451c:	4a05      	ldr	r2, [pc, #20]	; (8004534 <prvInitialiseTaskLists+0x64>)
 800451e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvInitialiseTaskLists+0x7c>)
 8004522:	4a05      	ldr	r2, [pc, #20]	; (8004538 <prvInitialiseTaskLists+0x68>)
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200007bc 	.word	0x200007bc
 8004534:	20000c1c 	.word	0x20000c1c
 8004538:	20000c30 	.word	0x20000c30
 800453c:	20000c4c 	.word	0x20000c4c
 8004540:	20000c60 	.word	0x20000c60
 8004544:	20000c78 	.word	0x20000c78
 8004548:	20000c44 	.word	0x20000c44
 800454c:	20000c48 	.word	0x20000c48

08004550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004556:	e019      	b.n	800458c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004558:	f000 fe68 	bl	800522c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <prvCheckTasksWaitingTermination+0x50>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f9ed 	bl	8002948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <prvCheckTasksWaitingTermination+0x54>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3b01      	subs	r3, #1
 8004574:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <prvCheckTasksWaitingTermination+0x54>)
 8004576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <prvCheckTasksWaitingTermination+0x58>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3b01      	subs	r3, #1
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <prvCheckTasksWaitingTermination+0x58>)
 8004580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004582:	f000 fe83 	bl	800528c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f810 	bl	80045ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <prvCheckTasksWaitingTermination+0x58>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e1      	bne.n	8004558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000c60 	.word	0x20000c60
 80045a4:	20000c8c 	.word	0x20000c8c
 80045a8:	20000c74 	.word	0x20000c74

080045ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fff6 	bl	80055b4 <vPortFree>
				vPortFree( pxTCB );
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fff3 	bl	80055b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045ce:	e018      	b.n	8004602 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d103      	bne.n	80045e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 ffea 	bl	80055b4 <vPortFree>
	}
 80045e0:	e00f      	b.n	8004602 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d00a      	beq.n	8004602 <prvDeleteTCB+0x56>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <prvDeleteTCB+0x54>
	}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <prvResetNextTaskUnblockTime+0x40>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <prvResetNextTaskUnblockTime+0x14>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <prvResetNextTaskUnblockTime+0x16>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvResetNextTaskUnblockTime+0x44>)
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800462e:	e008      	b.n	8004642 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <prvResetNextTaskUnblockTime+0x40>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4a04      	ldr	r2, [pc, #16]	; (8004650 <prvResetNextTaskUnblockTime+0x44>)
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	20000c44 	.word	0x20000c44
 8004650:	20000cac 	.word	0x20000cac

08004654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <xTaskGetSchedulerState+0x34>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004662:	2301      	movs	r3, #1
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	e008      	b.n	800467a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <xTaskGetSchedulerState+0x38>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004670:	2302      	movs	r3, #2
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e001      	b.n	800467a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800467a:	687b      	ldr	r3, [r7, #4]
	}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000c98 	.word	0x20000c98
 800468c:	20000cb4 	.word	0x20000cb4

08004690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d056      	beq.n	8004754 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <xTaskPriorityInherit+0xd0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d246      	bcs.n	8004742 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db06      	blt.n	80046ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046bc:	4b28      	ldr	r3, [pc, #160]	; (8004760 <xTaskPriorityInherit+0xd0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6959      	ldr	r1, [r3, #20]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <xTaskPriorityInherit+0xd4>)
 80046dc:	4413      	add	r3, r2
 80046de:	4299      	cmp	r1, r3
 80046e0:	d101      	bne.n	80046e6 <xTaskPriorityInherit+0x56>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <xTaskPriorityInherit+0x58>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe f929 	bl	8002948 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <xTaskPriorityInherit+0xd0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <xTaskPriorityInherit+0xd8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <xTaskPriorityInherit+0x84>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a15      	ldr	r2, [pc, #84]	; (8004768 <xTaskPriorityInherit+0xd8>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a10      	ldr	r2, [pc, #64]	; (8004764 <xTaskPriorityInherit+0xd4>)
 8004722:	441a      	add	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe f8b1 	bl	8002892 <vListInsertEnd>
 8004730:	e004      	b.n	800473c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <xTaskPriorityInherit+0xd0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e008      	b.n	8004754 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <xTaskPriorityInherit+0xd0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d201      	bcs.n	8004754 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004750:	2301      	movs	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004754:	68fb      	ldr	r3, [r7, #12]
	}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200007b8 	.word	0x200007b8
 8004764:	200007bc 	.word	0x200007bc
 8004768:	20000c94 	.word	0x20000c94

0800476c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d056      	beq.n	8004830 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004782:	4b2e      	ldr	r3, [pc, #184]	; (800483c <xTaskPriorityDisinherit+0xd0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d00a      	beq.n	80047a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d02c      	beq.n	8004830 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d128      	bne.n	8004830 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f8b0 	bl	8002948 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTaskPriorityDisinherit+0xd4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d903      	bls.n	8004810 <xTaskPriorityDisinherit+0xa4>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <xTaskPriorityDisinherit+0xd4>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4a09      	ldr	r2, [pc, #36]	; (8004844 <xTaskPriorityDisinherit+0xd8>)
 800481e:	441a      	add	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe f833 	bl	8002892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004830:	697b      	ldr	r3, [r7, #20]
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200007b8 	.word	0x200007b8
 8004840:	20000c94 	.word	0x20000c94
 8004844:	200007bc 	.word	0x200007bc

08004848 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d06f      	beq.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d902      	bls.n	800488e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e002      	b.n	8004894 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d050      	beq.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d14b      	bne.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10a      	bne.n	80048c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db04      	blt.n	80048e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048f6:	4413      	add	r3, r2
 80048f8:	4299      	cmp	r1, r3
 80048fa:	d101      	bne.n	8004900 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01c      	beq.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f81c 	bl	8002948 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d903      	bls.n	8004924 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4a0b      	ldr	r2, [pc, #44]	; (8004950 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4a06      	ldr	r2, [pc, #24]	; (800494c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004932:	441a      	add	r2, r3
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fd ffa9 	bl	8002892 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004940:	bf00      	nop
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200007b8 	.word	0x200007b8
 800494c:	200007bc 	.word	0x200007bc
 8004950:	20000c94 	.word	0x20000c94

08004954 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <pvTaskIncrementMutexHeldCount+0x24>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <pvTaskIncrementMutexHeldCount+0x24>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004966:	3201      	adds	r2, #1
 8004968:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <pvTaskIncrementMutexHeldCount+0x24>)
 800496c:	681b      	ldr	r3, [r3, #0]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	200007b8 	.word	0x200007b8

0800497c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800498c:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd ffd8 	bl	8002948 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d10a      	bne.n	80049b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4819      	ldr	r0, [pc, #100]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80049b0:	f7fd ff6f 	bl	8002892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049b4:	e026      	b.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4413      	add	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d209      	bcs.n	80049e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fd ff7c 	bl	80028d8 <vListInsert>
}
 80049e0:	e010      	b.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fd ff72 	bl	80028d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d202      	bcs.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6013      	str	r3, [r2, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000c90 	.word	0x20000c90
 8004a10:	200007b8 	.word	0x200007b8
 8004a14:	20000c78 	.word	0x20000c78
 8004a18:	20000c48 	.word	0x20000c48
 8004a1c:	20000c44 	.word	0x20000c44
 8004a20:	20000cac 	.word	0x20000cac

08004a24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a2e:	f000 facb 	bl	8004fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <xTimerCreateTimerTask+0x80>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a42:	1d3a      	adds	r2, r7, #4
 8004a44:	f107 0108 	add.w	r1, r7, #8
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fedb 	bl	8002808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	9202      	str	r2, [sp, #8]
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	460a      	mov	r2, r1
 8004a64:	4910      	ldr	r1, [pc, #64]	; (8004aa8 <xTimerCreateTimerTask+0x84>)
 8004a66:	4811      	ldr	r0, [pc, #68]	; (8004aac <xTimerCreateTimerTask+0x88>)
 8004a68:	f7fe ffdc 	bl	8003a24 <xTaskCreateStatic>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <xTimerCreateTimerTask+0x8c>)
 8004a70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <xTimerCreateTimerTask+0x8c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	613b      	str	r3, [r7, #16]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a9a:	697b      	ldr	r3, [r7, #20]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000ce8 	.word	0x20000ce8
 8004aa8:	0800592c 	.word	0x0800592c
 8004aac:	08004bd1 	.word	0x08004bd1
 8004ab0:	20000cec 	.word	0x20000cec

08004ab4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	623b      	str	r3, [r7, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <xTimerGenericCommand+0x98>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02a      	beq.n	8004b40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	dc18      	bgt.n	8004b2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004afc:	f7ff fdaa 	bl	8004654 <xTaskGetSchedulerState>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d109      	bne.n	8004b1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <xTimerGenericCommand+0x98>)
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f107 0110 	add.w	r1, r7, #16
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	f7fe f8ed 	bl	8002cf0 <xQueueGenericSend>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24
 8004b18:	e012      	b.n	8004b40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <xTimerGenericCommand+0x98>)
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	f107 0110 	add.w	r1, r7, #16
 8004b22:	2300      	movs	r3, #0
 8004b24:	2200      	movs	r2, #0
 8004b26:	f7fe f8e3 	bl	8002cf0 <xQueueGenericSend>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b2c:	e008      	b.n	8004b40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <xTimerGenericCommand+0x98>)
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	f107 0110 	add.w	r1, r7, #16
 8004b36:	2300      	movs	r3, #0
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	f7fe f9d7 	bl	8002eec <xQueueGenericSendFromISR>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000ce8 	.word	0x20000ce8

08004b50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <prvProcessExpiredTimer+0x7c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd feed 	bl	8002948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d122      	bne.n	8004bbc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	18d1      	adds	r1, r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f000 f8c8 	bl	8004d18 <prvInsertTimerInActiveList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	2300      	movs	r3, #0
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	2100      	movs	r1, #0
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	f7ff ff8b 	bl	8004ab4 <xTimerGenericCommand>
 8004b9e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60fb      	str	r3, [r7, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	6978      	ldr	r0, [r7, #20]
 8004bc2:	4798      	blx	r3
}
 8004bc4:	bf00      	nop
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000ce0 	.word	0x20000ce0

08004bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bd8:	f107 0308 	add.w	r3, r7, #8
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f857 	bl	8004c90 <prvGetNextExpireTime>
 8004be2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4619      	mov	r1, r3
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f803 	bl	8004bf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bee:	f000 f8d5 	bl	8004d9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bf2:	e7f1      	b.n	8004bd8 <prvTimerTask+0x8>

08004bf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bfe:	f7ff f943 	bl	8003e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f866 	bl	8004cd8 <prvSampleTimeNow>
 8004c0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d130      	bne.n	8004c76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <prvProcessTimerOrBlockTask+0x3c>
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d806      	bhi.n	8004c30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c22:	f7ff f93f 	bl	8003ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff91 	bl	8004b50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c2e:	e024      	b.n	8004c7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <prvProcessTimerOrBlockTask+0x90>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <prvProcessTimerOrBlockTask+0x94>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	f7fe feb1 	bl	80039bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c5a:	f7ff f923 	bl	8003ea4 <xTaskResumeAll>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <prvProcessTimerOrBlockTask+0x98>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
}
 8004c74:	e001      	b.n	8004c7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c76:	f7ff f915 	bl	8003ea4 <xTaskResumeAll>
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000ce4 	.word	0x20000ce4
 8004c88:	20000ce8 	.word	0x20000ce8
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <prvGetNextExpireTime+0x44>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d105      	bne.n	8004cc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <prvGetNextExpireTime+0x44>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e001      	b.n	8004cc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000ce0 	.word	0x20000ce0

08004cd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ce0:	f7ff f97e 	bl	8003fe0 <xTaskGetTickCount>
 8004ce4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <prvSampleTimeNow+0x3c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d205      	bcs.n	8004cfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cf0:	f000 f908 	bl	8004f04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d02:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <prvSampleTimeNow+0x3c>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000cf0 	.word	0x20000cf0

08004d18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d812      	bhi.n	8004d64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e01b      	b.n	8004d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d52:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <prvInsertTimerInActiveList+0x7c>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fd fdbb 	bl	80028d8 <vListInsert>
 8004d62:	e012      	b.n	8004d8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d206      	bcs.n	8004d7a <prvInsertTimerInActiveList+0x62>
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d302      	bcc.n	8004d7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e007      	b.n	8004d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <prvInsertTimerInActiveList+0x80>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7fd fda7 	bl	80028d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000ce4 	.word	0x20000ce4
 8004d98:	20000ce0 	.word	0x20000ce0

08004d9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004da2:	e09d      	b.n	8004ee0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da18      	bge.n	8004ddc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004daa:	1d3b      	adds	r3, r7, #4
 8004dac:	3304      	adds	r3, #4
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fb      	str	r3, [r7, #28]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd2:	6850      	ldr	r0, [r2, #4]
 8004dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db7d      	blt.n	8004ede <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	3304      	adds	r3, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd fda8 	bl	8002948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df8:	463b      	mov	r3, r7
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ff6c 	bl	8004cd8 <prvSampleTimeNow>
 8004e00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	d86b      	bhi.n	8004ee0 <prvProcessReceivedCommands+0x144>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <prvProcessReceivedCommands+0x74>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e39 	.word	0x08004e39
 8004e1c:	08004ee1 	.word	0x08004ee1
 8004e20:	08004e95 	.word	0x08004e95
 8004e24:	08004ecd 	.word	0x08004ecd
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e39 	.word	0x08004e39
 8004e30:	08004ee1 	.word	0x08004ee1
 8004e34:	08004e95 	.word	0x08004e95
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	18d1      	adds	r1, r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e46:	f7ff ff67 	bl	8004d18 <prvInsertTimerInActiveList>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d047      	beq.n	8004ee0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d13f      	bne.n	8004ee0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e72:	f7ff fe1f 	bl	8004ab4 <xTimerGenericCommand>
 8004e76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d130      	bne.n	8004ee0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	61bb      	str	r3, [r7, #24]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	617b      	str	r3, [r7, #20]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	18d1      	adds	r1, r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec6:	f7ff ff27 	bl	8004d18 <prvInsertTimerInActiveList>
					break;
 8004eca:	e009      	b.n	8004ee0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed8:	f000 fb6c 	bl	80055b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004edc:	e000      	b.n	8004ee0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ede:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <prvProcessReceivedCommands+0x164>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1d39      	adds	r1, r7, #4
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe f925 	bl	8003138 <xQueueReceive>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f47f af57 	bne.w	8004da4 <prvProcessReceivedCommands+0x8>
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000ce8 	.word	0x20000ce8

08004f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f0a:	e045      	b.n	8004f98 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f0c:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f16:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fd fd0f 	bl	8002948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d12e      	bne.n	8004f98 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d90e      	bls.n	8004f6a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fd fcb8 	bl	80028d8 <vListInsert>
 8004f68:	e016      	b.n	8004f98 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	2100      	movs	r1, #0
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fd9d 	bl	8004ab4 <xTimerGenericCommand>
 8004f7a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	603b      	str	r3, [r7, #0]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1b4      	bne.n	8004f0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvSwitchTimerLists+0xbc>)
 8004fae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6013      	str	r3, [r2, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000ce0 	.word	0x20000ce0
 8004fc4:	20000ce4 	.word	0x20000ce4

08004fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fce:	f000 f92d 	bl	800522c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d120      	bne.n	800501c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fda:	4814      	ldr	r0, [pc, #80]	; (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	f7fd fc2e 	bl	800283c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe0:	4813      	ldr	r0, [pc, #76]	; (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004fe2:	f7fd fc2b 	bl	800283c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <prvCheckForValidListAndQueue+0x6c>)
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <prvCheckForValidListAndQueue+0x70>)
 8004fee:	4a10      	ldr	r2, [pc, #64]	; (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <prvCheckForValidListAndQueue+0x74>)
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <prvCheckForValidListAndQueue+0x78>)
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	f7fd fd35 	bl	8002a6c <xQueueGenericCreateStatic>
 8005002:	4603      	mov	r3, r0
 8005004:	4a08      	ldr	r2, [pc, #32]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005006:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	490b      	ldr	r1, [pc, #44]	; (8005044 <prvCheckForValidListAndQueue+0x7c>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fc7e 	bl	8003918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800501c:	f000 f936 	bl	800528c <vPortExitCritical>
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000ce8 	.word	0x20000ce8
 800502c:	20000cb8 	.word	0x20000cb8
 8005030:	20000ccc 	.word	0x20000ccc
 8005034:	20000ce0 	.word	0x20000ce0
 8005038:	20000ce4 	.word	0x20000ce4
 800503c:	20000d94 	.word	0x20000d94
 8005040:	20000cf4 	.word	0x20000cf4
 8005044:	08005934 	.word	0x08005934

08005048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b04      	subs	r3, #4
 8005058:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b04      	subs	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b04      	subs	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005078:	4a08      	ldr	r2, [pc, #32]	; (800509c <pxPortInitialiseStack+0x54>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b14      	subs	r3, #20
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b20      	subs	r3, #32
 800508e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	080050a1 	.word	0x080050a1

080050a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <prvTaskExitError+0x54>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d00a      	beq.n	80050ca <prvTaskExitError+0x2a>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	60fb      	str	r3, [r7, #12]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <prvTaskExitError+0x28>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60bb      	str	r3, [r7, #8]
}
 80050dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050de:	bf00      	nop
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0fc      	beq.n	80050e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000001c 	.word	0x2000001c
	...

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	f04e 0e0d 	orr.w	lr, lr, #13
 800511e:	4770      	bx	lr

08005120 <pxCurrentTCBConst2>:
 8005120:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005128:	4806      	ldr	r0, [pc, #24]	; (8005144 <prvPortStartFirstTask+0x1c>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	b662      	cpsie	i
 8005134:	b661      	cpsie	f
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	df00      	svc	0
 8005140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005142:	bf00      	nop
 8005144:	e000ed08 	.word	0xe000ed08

08005148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800514e:	4b32      	ldr	r3, [pc, #200]	; (8005218 <xPortStartScheduler+0xd0>)
 8005150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <xPortStartScheduler+0xd4>)
 8005174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005176:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <xPortStartScheduler+0xd8>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517c:	e009      	b.n	8005192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800517e:	4b28      	ldr	r3, [pc, #160]	; (8005220 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <xPortStartScheduler+0xd8>)
 8005186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d0ef      	beq.n	800517e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <xPortStartScheduler+0xd8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00a      	beq.n	80051c0 <xPortStartScheduler+0x78>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <xPortStartScheduler+0xd8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <xPortStartScheduler+0xd8>)
 80051c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <xPortStartScheduler+0xd8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <xPortStartScheduler+0xd8>)
 80051d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <xPortStartScheduler+0xdc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <xPortStartScheduler+0xdc>)
 80051e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <xPortStartScheduler+0xdc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <xPortStartScheduler+0xdc>)
 80051f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f6:	f000 f8b9 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <xPortStartScheduler+0xe0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005200:	f7ff ff92 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005204:	f7fe ffb8 	bl	8004178 <vTaskSwitchContext>
	prvTaskExitError();
 8005208:	f7ff ff4a 	bl	80050a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	e000e400 	.word	0xe000e400
 800521c:	20000de4 	.word	0x20000de4
 8005220:	20000de8 	.word	0x20000de8
 8005224:	e000ed20 	.word	0xe000ed20
 8005228:	2000001c 	.word	0x2000001c

0800522c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <vPortEnterCritical+0x58>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <vPortEnterCritical+0x58>)
 800524e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <vPortEnterCritical+0x58>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10f      	bne.n	8005278 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <vPortEnterCritical+0x5c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <vPortEnterCritical+0x4c>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <vPortEnterCritical+0x4a>
	}
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	2000001c 	.word	0x2000001c
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <vPortExitCritical+0x4c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <vPortExitCritical+0x24>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <vPortExitCritical+0x4c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <vPortExitCritical+0x4c>)
 80052b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <vPortExitCritical+0x4c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <vPortExitCritical+0x42>
 80052c2:	2300      	movs	r3, #0
 80052c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f383 8811 	msr	BASEPRI, r3
}
 80052cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	2000001c 	.word	0x2000001c
 80052dc:	00000000 	.word	0x00000000

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f0:	6010      	str	r0, [r2, #0]
 80052f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052fa:	f380 8811 	msr	BASEPRI, r0
 80052fe:	f7fe ff3b 	bl	8004178 <vTaskSwitchContext>
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8811 	msr	BASEPRI, r0
 800530a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005316:	f380 8809 	msr	PSP, r0
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	4770      	bx	lr

08005320 <pxCurrentTCBConst>:
 8005320:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7fe fe5b 	bl	8003ffc <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <xPortSysTickHandler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortSetupTimerInterrupt+0x30>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <vPortSetupTimerInterrupt+0x38>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <vPortSetupTimerInterrupt+0x40>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b03      	ldr	r3, [pc, #12]	; (800539c <vPortSetupTimerInterrupt+0x30>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	e000e018 	.word	0xe000e018
 80053a4:	20000010 	.word	0x20000010
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	e000e014 	.word	0xe000e014

080053b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053b6:	f3ef 8305 	mrs	r3, IPSR
 80053ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d914      	bls.n	80053ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <vPortValidateInterruptPriority+0x6c>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053cc:	4b14      	ldr	r3, [pc, #80]	; (8005420 <vPortValidateInterruptPriority+0x70>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	7afa      	ldrb	r2, [r7, #11]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d20a      	bcs.n	80053ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	607b      	str	r3, [r7, #4]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <vPortValidateInterruptPriority+0x74>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <vPortValidateInterruptPriority+0x78>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d90a      	bls.n	8005412 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	603b      	str	r3, [r7, #0]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <vPortValidateInterruptPriority+0x60>
	}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	e000e3f0 	.word	0xe000e3f0
 8005420:	20000de4 	.word	0x20000de4
 8005424:	e000ed0c 	.word	0xe000ed0c
 8005428:	20000de8 	.word	0x20000de8

0800542c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005438:	f7fe fd26 	bl	8003e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800543c:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <pvPortMalloc+0x174>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005444:	f000 f910 	bl	8005668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005448:	4b56      	ldr	r3, [pc, #344]	; (80055a4 <pvPortMalloc+0x178>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 808e 	bne.w	8005572 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01d      	beq.n	8005498 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800545c:	2208      	movs	r2, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d014      	beq.n	8005498 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f023 0307 	bic.w	r3, r3, #7
 8005474:	3308      	adds	r3, #8
 8005476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <pvPortMalloc+0x6c>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	617b      	str	r3, [r7, #20]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d069      	beq.n	8005572 <pvPortMalloc+0x146>
 800549e:	4b42      	ldr	r3, [pc, #264]	; (80055a8 <pvPortMalloc+0x17c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d864      	bhi.n	8005572 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054a8:	4b40      	ldr	r3, [pc, #256]	; (80055ac <pvPortMalloc+0x180>)
 80054aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054ac:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <pvPortMalloc+0x180>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b2:	e004      	b.n	80054be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <pvPortMalloc+0xa4>
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f1      	bne.n	80054b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054d0:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <pvPortMalloc+0x174>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d04b      	beq.n	8005572 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2208      	movs	r2, #8
 80054e0:	4413      	add	r3, r2
 80054e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	2308      	movs	r3, #8
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d91f      	bls.n	800553c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <pvPortMalloc+0xf8>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	613b      	str	r3, [r7, #16]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005536:	69b8      	ldr	r0, [r7, #24]
 8005538:	f000 f8f8 	bl	800572c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <pvPortMalloc+0x17c>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <pvPortMalloc+0x17c>)
 8005548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <pvPortMalloc+0x17c>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <pvPortMalloc+0x184>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d203      	bcs.n	800555e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <pvPortMalloc+0x17c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <pvPortMalloc+0x184>)
 800555c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <pvPortMalloc+0x178>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	431a      	orrs	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005572:	f7fe fc97 	bl	8003ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <pvPortMalloc+0x16a>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <pvPortMalloc+0x168>
	return pvReturn;
 8005596:	69fb      	ldr	r3, [r7, #28]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	200019f4 	.word	0x200019f4
 80055a4:	20001a00 	.word	0x20001a00
 80055a8:	200019f8 	.word	0x200019f8
 80055ac:	200019ec 	.word	0x200019ec
 80055b0:	200019fc 	.word	0x200019fc

080055b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d048      	beq.n	8005658 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055c6:	2308      	movs	r3, #8
 80055c8:	425b      	negs	r3, r3
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <vPortFree+0xac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortFree+0x44>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60fb      	str	r3, [r7, #12]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <vPortFree+0x62>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60bb      	str	r3, [r7, #8]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <vPortFree+0xac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d019      	beq.n	8005658 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d115      	bne.n	8005658 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <vPortFree+0xac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800563c:	f7fe fc24 	bl	8003e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <vPortFree+0xb0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4413      	add	r3, r2
 800564a:	4a06      	ldr	r2, [pc, #24]	; (8005664 <vPortFree+0xb0>)
 800564c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f000 f86c 	bl	800572c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005654:	f7fe fc26 	bl	8003ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20001a00 	.word	0x20001a00
 8005664:	200019f8 	.word	0x200019f8

08005668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800566e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <prvHeapInit+0xac>)
 8005676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3307      	adds	r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <prvHeapInit+0xac>)
 8005698:	4413      	add	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <prvHeapInit+0xb0>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <prvHeapInit+0xb0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056b4:	2208      	movs	r2, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <prvHeapInit+0xb4>)
 80056c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <prvHeapInit+0xb4>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <prvHeapInit+0xb8>)
 80056f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <prvHeapInit+0xbc>)
 80056fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <prvHeapInit+0xc0>)
 8005702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000dec 	.word	0x20000dec
 8005718:	200019ec 	.word	0x200019ec
 800571c:	200019f4 	.word	0x200019f4
 8005720:	200019fc 	.word	0x200019fc
 8005724:	200019f8 	.word	0x200019f8
 8005728:	20001a00 	.word	0x20001a00

0800572c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <prvInsertBlockIntoFreeList+0x14>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8f7      	bhi.n	800573a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d118      	bne.n	80057b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d00d      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e008      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e003      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d002      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr
 80057d4:	200019ec 	.word	0x200019ec
 80057d8:	200019f4 	.word	0x200019f4

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	2600      	movs	r6, #0
 80057e0:	4d0c      	ldr	r5, [pc, #48]	; (8005814 <__libc_init_array+0x38>)
 80057e2:	4c0d      	ldr	r4, [pc, #52]	; (8005818 <__libc_init_array+0x3c>)
 80057e4:	1b64      	subs	r4, r4, r5
 80057e6:	10a4      	asrs	r4, r4, #2
 80057e8:	42a6      	cmp	r6, r4
 80057ea:	d109      	bne.n	8005800 <__libc_init_array+0x24>
 80057ec:	f000 f830 	bl	8005850 <_init>
 80057f0:	2600      	movs	r6, #0
 80057f2:	4d0a      	ldr	r5, [pc, #40]	; (800581c <__libc_init_array+0x40>)
 80057f4:	4c0a      	ldr	r4, [pc, #40]	; (8005820 <__libc_init_array+0x44>)
 80057f6:	1b64      	subs	r4, r4, r5
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	42a6      	cmp	r6, r4
 80057fc:	d105      	bne.n	800580a <__libc_init_array+0x2e>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	f855 3b04 	ldr.w	r3, [r5], #4
 8005804:	4798      	blx	r3
 8005806:	3601      	adds	r6, #1
 8005808:	e7ee      	b.n	80057e8 <__libc_init_array+0xc>
 800580a:	f855 3b04 	ldr.w	r3, [r5], #4
 800580e:	4798      	blx	r3
 8005810:	3601      	adds	r6, #1
 8005812:	e7f2      	b.n	80057fa <__libc_init_array+0x1e>
 8005814:	08005a18 	.word	0x08005a18
 8005818:	08005a18 	.word	0x08005a18
 800581c:	08005a18 	.word	0x08005a18
 8005820:	08005a1c 	.word	0x08005a1c

08005824 <memcpy>:
 8005824:	440a      	add	r2, r1
 8005826:	4291      	cmp	r1, r2
 8005828:	f100 33ff 	add.w	r3, r0, #4294967295
 800582c:	d100      	bne.n	8005830 <memcpy+0xc>
 800582e:	4770      	bx	lr
 8005830:	b510      	push	{r4, lr}
 8005832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005836:	4291      	cmp	r1, r2
 8005838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583c:	d1f9      	bne.n	8005832 <memcpy+0xe>
 800583e:	bd10      	pop	{r4, pc}

08005840 <memset>:
 8005840:	4603      	mov	r3, r0
 8005842:	4402      	add	r2, r0
 8005844:	4293      	cmp	r3, r2
 8005846:	d100      	bne.n	800584a <memset+0xa>
 8005848:	4770      	bx	lr
 800584a:	f803 1b01 	strb.w	r1, [r3], #1
 800584e:	e7f9      	b.n	8005844 <memset+0x4>

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
