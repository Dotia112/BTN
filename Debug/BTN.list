
BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080059b0  080059b0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059b0  080059b0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080059b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e0  20000020  080059d8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a00  080059d8  00021a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110c3  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  0003110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000339f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032dd  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e69  00000000  00000000  00038a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e488  00000000  00000000  000498be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7d46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e5c  00000000  00000000  000d7d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080057e0 	.word	0x080057e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080057e0 	.word	0x080057e0

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f9a5 	bl	80004e0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd10 	bl	8000bbc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f963 	bl	800046c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd07 	bl	8000bbc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f94b 	bl	800044a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f9ba 	bl	8000530 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f944 	bl	800044a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f9b3 	bl	8000530 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f93d 	bl	800044a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f9ac 	bl	8000530 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f936 	bl	800044a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f9a6 	bl	8000530 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ee 	bl	80003d0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f895 	bl	8000328 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8dc 	bl	80003d0 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f988 	bl	8000530 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f896 	bl	8000354 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f892 	bl	8000354 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f83c 	bl	80002ac <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f8b7 	bl	80003d0 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f963 	bl	8000530 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_ClearRow>:
void HD44780_ClearRow(uint8_t row)
{
 800026e:	b580      	push	{r7, lr}
 8000270:	b084      	sub	sp, #16
 8000272:	af00      	add	r7, sp, #0
 8000274:	4603      	mov	r3, r0
 8000276:	71fb      	strb	r3, [r7, #7]
    HD44780_SetCursor(0, row);  // Перемещаем курсор в начало строки
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4619      	mov	r1, r3
 800027c:	2000      	movs	r0, #0
 800027e:	f000 f821 	bl	80002c4 <HD44780_SetCursor>

    // Заполняем строку пробелами (предполагая 16 символов в строке)
    for(uint8_t i = 0; i < 16; i++) {
 8000282:	2300      	movs	r3, #0
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e005      	b.n	8000294 <HD44780_ClearRow+0x26>
        SendChar(' ');
 8000288:	2020      	movs	r0, #32
 800028a:	f000 f8af 	bl	80003ec <SendChar>
    for(uint8_t i = 0; i < 16; i++) {
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	3301      	adds	r3, #1
 8000292:	73fb      	strb	r3, [r7, #15]
 8000294:	7bfb      	ldrb	r3, [r7, #15]
 8000296:	2b0f      	cmp	r3, #15
 8000298:	d9f6      	bls.n	8000288 <HD44780_ClearRow+0x1a>
    }

    HD44780_SetCursor(0, row);  // Возвращаем курсор в начало строки
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4619      	mov	r1, r3
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f810 	bl	80002c4 <HD44780_SetCursor>
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <HD44780_Home>:
void HD44780_Home()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80002b0:	2002      	movs	r0, #2
 80002b2:	f000 f88d 	bl	80003d0 <SendCommand>
  DelayUS(2000);
 80002b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ba:	f000 f939 	bl	8000530 <DelayUS>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b087      	sub	sp, #28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	460a      	mov	r2, r1
 80002ce:	71fb      	strb	r3, [r7, #7]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <HD44780_SetCursor+0x5c>)
 80002d6:	f107 0408 	add.w	r4, r7, #8
 80002da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <HD44780_SetCursor+0x60>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d303      	bcc.n	80002f2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HD44780_SetCursor+0x60>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3318      	adds	r3, #24
 80002f8:	443b      	add	r3, r7
 80002fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4413      	add	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	b25b      	sxtb	r3, r3
 8000308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800030c:	b25b      	sxtb	r3, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f85d 	bl	80003d0 <SendCommand>
}
 8000316:	bf00      	nop
 8000318:	371c      	adds	r7, #28
 800031a:	46bd      	mov	sp, r7
 800031c:	bd90      	pop	{r4, r7, pc}
 800031e:	bf00      	nop
 8000320:	080057f8 	.word	0x080057f8
 8000324:	2000003f 	.word	0x2000003f

08000328 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <HD44780_Display+0x28>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HD44780_Display+0x28>)
 8000338:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <HD44780_Display+0x28>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f843 	bl	80003d0 <SendCommand>
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	2000003d 	.word	0x2000003d

08000354 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	00db      	lsls	r3, r3, #3
 800036c:	b25b      	sxtb	r3, r3
 800036e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000372:	b25b      	sxtb	r3, r3
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f82a 	bl	80003d0 <SendCommand>
  for (int i=0; i<8; i++)
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	e009      	b.n	8000396 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f82e 	bl	80003ec <SendChar>
  for (int i=0; i<8; i++)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	3301      	adds	r3, #1
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b07      	cmp	r3, #7
 800039a:	ddf2      	ble.n	8000382 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80003ae:	e006      	b.n	80003be <HD44780_PrintStr+0x18>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f817 	bl	80003ec <SendChar>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1f4      	bne.n	80003b0 <HD44780_PrintStr+0xa>
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f812 	bl	8000408 <Send>
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f804 	bl	8000408 <Send>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	460a      	mov	r2, r1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	4613      	mov	r3, r2
 8000416:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000426:	7bfa      	ldrb	r2, [r7, #15]
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	4313      	orrs	r3, r2
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f80b 	bl	800044a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000434:	7bba      	ldrb	r2, [r7, #14]
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f804 	bl	800044a <Write4Bits>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f808 	bl	800046c <ExpanderWrite>
  PulseEnable(value);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f820 	bl	80004a4 <PulseEnable>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af02      	add	r7, sp, #8
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <ExpanderWrite+0x30>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4313      	orrs	r3, r2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000482:	f107 020f 	add.w	r2, r7, #15
 8000486:	230a      	movs	r3, #10
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2301      	movs	r3, #1
 800048c:	2170      	movs	r1, #112	; 0x70
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <ExpanderWrite+0x34>)
 8000490:	f000 ff94 	bl	80013bc <HAL_I2C_Master_Transmit>
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000040 	.word	0x20000040
 80004a0:	20000044 	.word	0x20000044

080004a4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffd8 	bl	800046c <ExpanderWrite>
  DelayUS(20);
 80004bc:	2014      	movs	r0, #20
 80004be:	f000 f837 	bl	8000530 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f023 0304 	bic.w	r3, r3, #4
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ffce 	bl	800046c <ExpanderWrite>
  DelayUS(20);
 80004d0:	2014      	movs	r0, #20
 80004d2:	f000 f82d 	bl	8000530 <DelayUS>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <DelayInit>:

static void DelayInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <DelayInit+0x48>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <DelayInit+0x48>)
 80004ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ee:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <DelayInit+0x48>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <DelayInit+0x48>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <DelayInit+0x4c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <DelayInit+0x4c>)
 8000502:	f023 0301 	bic.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <DelayInit+0x4c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <DelayInit+0x4c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <DelayInit+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800051a:	bf00      	nop
  __ASM volatile ("NOP");
 800051c:	bf00      	nop
  __ASM volatile ("NOP");
 800051e:	bf00      	nop
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	e000edf0 	.word	0xe000edf0
 800052c:	e0001000 	.word	0xe0001000

08000530 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000530:	b480      	push	{r7}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <DelayUS+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <DelayUS+0x44>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	0c9a      	lsrs	r2, r3, #18
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <DelayUS+0x48>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <DelayUS+0x48>)
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	429a      	cmp	r2, r3
 8000562:	d8f6      	bhi.n	8000552 <DelayUS+0x22>
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	20000010 	.word	0x20000010
 8000574:	431bde83 	.word	0x431bde83
 8000578:	e0001000 	.word	0xe0001000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 faba 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f87c 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8e4 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058c:	f000 f8b4 	bl	80006f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff fddd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000596:	f7ff fe5f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff fe91 	bl	80002c4 <HD44780_SetCursor>
 HD44780_PrintStr("BTN don't press");
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <main+0xb4>)
 80005a4:	f7ff feff 	bl	80003a6 <HD44780_PrintStr>
  HD44780_SetCursor(0,1);
 80005a8:	2101      	movs	r1, #1
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff fe8a 	bl	80002c4 <HD44780_SetCursor>
   HD44780_PrintStr("Switch don't press");
 80005b0:	4820      	ldr	r0, [pc, #128]	; (8000634 <main+0xb8>)
 80005b2:	f7ff fef8 	bl	80003a6 <HD44780_PrintStr>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b6:	f001 fe0d 	bl	80021d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <main+0xbc>)
 80005bc:	2100      	movs	r1, #0
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 ff46 	bl	8002450 <osSemaphoreNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <main+0xc0>)
 80005c8:	6013      	str	r3, [r2, #0]
  switchSemaphoreHandle = osSemaphoreNew(1, 0, &switchSemaphore_attributes);
 80005ca:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <main+0xc4>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 ff3e 	bl	8002450 <osSemaphoreNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <main+0xc8>)
 80005d8:	6013      	str	r3, [r2, #0]
  blockSemaphoreHandle = osSemaphoreNew(1, 0, &blockSemaphore_attributes);
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <main+0xcc>)
 80005dc:	2100      	movs	r1, #0
 80005de:	2001      	movs	r0, #1
 80005e0:	f001 ff36 	bl	8002450 <osSemaphoreNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <main+0xd0>)
 80005e8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <main+0xd4>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0xd8>)
 80005f0:	f001 fe56 	bl	80022a0 <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <main+0xdc>)
 80005f8:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <main+0xe0>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <main+0xe4>)
 8000600:	f001 fe4e 	bl	80022a0 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <main+0xe8>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
//LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTaskBTN, NULL, &holdLED_attributes);
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <main+0xec>)
 800060c:	2100      	movs	r1, #0
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <main+0xf0>)
 8000610:	f001 fe46 	bl	80022a0 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <main+0xf4>)
 8000618:	6013      	str	r3, [r2, #0]
  holdSwitchHandle = osThreadNew(LCDTaskSwitch, NULL, &SwitchTask_attributes);
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <main+0xf8>)
 800061c:	2100      	movs	r1, #0
 800061e:	4816      	ldr	r0, [pc, #88]	; (8000678 <main+0xfc>)
 8000620:	f001 fe3e 	bl	80022a0 <osThreadNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <main+0x100>)
 8000628:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062a:	f001 fe05 	bl	8002238 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xb2>
 8000630:	08005870 	.word	0x08005870
 8000634:	08005880 	.word	0x08005880
 8000638:	08005968 	.word	0x08005968
 800063c:	2000009c 	.word	0x2000009c
 8000640:	08005978 	.word	0x08005978
 8000644:	200000a0 	.word	0x200000a0
 8000648:	08005988 	.word	0x08005988
 800064c:	200000a4 	.word	0x200000a4
 8000650:	080058d8 	.word	0x080058d8
 8000654:	0800080d 	.word	0x0800080d
 8000658:	20000098 	.word	0x20000098
 800065c:	080058fc 	.word	0x080058fc
 8000660:	0800081d 	.word	0x0800081d
 8000664:	200000a8 	.word	0x200000a8
 8000668:	08005920 	.word	0x08005920
 800066c:	080008fd 	.word	0x080008fd
 8000670:	200000ac 	.word	0x200000ac
 8000674:	08005944 	.word	0x08005944
 8000678:	0800089d 	.word	0x0800089d
 800067c:	200000b0 	.word	0x200000b0

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 f89e 	bl	80057d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f986 	bl	80019c8 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006c2:	f000 f94d 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fbf4 	bl	8001ecc <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f939 	bl	8000960 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	; 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f000 fcfd 	bl	8001134 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f90e 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000044 	.word	0x20000044
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_GPIO_Init+0xac>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <MX_GPIO_Init+0xac>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_GPIO_Init+0xac>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xac>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xac>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xac>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4819      	ldr	r0, [pc, #100]	; (8000804 <MX_GPIO_Init+0xb0>)
 80007a0:	f000 fcaf 	bl	8001102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2302      	movs	r3, #2
 80007b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_GPIO_Init+0xb0>)
 80007be:	f000 fb05 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0xb4>)
 80007d8:	f000 faf8 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0xb4>)
 80007f2:	f000 faeb 	bl	8000dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	40011000 	.word	0x40011000
 8000808:	40010c00 	.word	0x40010c00

0800080c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f001 fded 	bl	80023f4 <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x8>

0800081c <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

    uint8_t last_stateSwitch = GPIO_PIN_RESET; // Исходное состояние - кнопка отпущена
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]
    uint8_t last_stateBTN = GPIO_PIN_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	73bb      	strb	r3, [r7, #14]
    //osSemaphoreRelease(switchSemaphoreHandle);
    //osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY);
    for(;;)
    {

        uint8_t current_stateBTN = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800082c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <buttonTask+0x74>)
 8000832:	f000 fc4f 	bl	80010d4 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	737b      	strb	r3, [r7, #13]
        // Устанавливаем курсор на нужную позицию (пример: 13-й столбец, 3-я строка)


        	// Обработка изменения состояния
        		uint8_t current_stateSwitch = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <buttonTask+0x74>)
 8000840:	f000 fc48 	bl	80010d4 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	733b      	strb	r3, [r7, #12]

    	        if(current_stateSwitch != last_stateSwitch)
 8000848:	7b3a      	ldrb	r2, [r7, #12]
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	429a      	cmp	r2, r3
 800084e:	d009      	beq.n	8000864 <buttonTask+0x48>
    	        {

    	            if(current_stateSwitch == GPIO_PIN_RESET)
 8000850:	7b3b      	ldrb	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d104      	bne.n	8000860 <buttonTask+0x44>
    	            {

    	            	//osSemaphoreRelease(switchSemaphoreHandle);// семафор сбрасывается(увеличивается на единицу)
    	            	osSemaphoreRelease(switchSemaphoreHandle);
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <buttonTask+0x78>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fefa 	bl	8002654 <osSemaphoreRelease>
    	            	//return;
    	            }

    	            last_stateSwitch = current_stateSwitch;
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	73fb      	strb	r3, [r7, #15]
    	        }

    	        osDelay(50);
 8000864:	2032      	movs	r0, #50	; 0x32
 8000866:	f001 fdc5 	bl	80023f4 <osDelay>

    	                // Обработка изменения состояния кнопки
    	                if(current_stateBTN != last_stateBTN)
 800086a:	7b7a      	ldrb	r2, [r7, #13]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	429a      	cmp	r2, r3
 8000870:	d009      	beq.n	8000886 <buttonTask+0x6a>
    	                {
    	                    if(current_stateBTN == GPIO_PIN_RESET)
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <buttonTask+0x66>
    	                    {
    	                        osSemaphoreRelease(buttonSemaphoreHandle);
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <buttonTask+0x7c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fee9 	bl	8002654 <osSemaphoreRelease>
    	                    }

    	                    last_stateBTN = current_stateBTN;
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	73bb      	strb	r3, [r7, #14]
    	                }



        osDelay(50); // Задержка для стабильности опроса
 8000886:	2032      	movs	r0, #50	; 0x32
 8000888:	f001 fdb4 	bl	80023f4 <osDelay>
    {
 800088c:	e7ce      	b.n	800082c <buttonTask+0x10>
 800088e:	bf00      	nop
 8000890:	40010c00 	.word	0x40010c00
 8000894:	200000a0 	.word	0x200000a0
 8000898:	2000009c 	.word	0x2000009c

0800089c <LCDTaskSwitch>:
    }
}

void LCDTaskSwitch(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	for(;;)
		{

		    if(osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY) == osOK)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <LCDTaskSwitch+0x54>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fe6b 	bl	8002588 <osSemaphoreAcquire>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f5      	bne.n	80008a4 <LCDTaskSwitch+0x8>
		    {

		          HD44780_ClearRow(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fcd8 	bl	800026e <HD44780_ClearRow>
		          HD44780_SetCursor(0,1);
 80008be:	2101      	movs	r1, #1
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fcff 	bl	80002c4 <HD44780_SetCursor>
		          HD44780_PrintStr("Switch press");
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <LCDTaskSwitch+0x58>)
 80008c8:	f7ff fd6d 	bl	80003a6 <HD44780_PrintStr>
		          osDelay(2000);
 80008cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d0:	f001 fd90 	bl	80023f4 <osDelay>
		    	   HD44780_SetCursor(0,1);
 80008d4:	2101      	movs	r1, #1
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fcf4 	bl	80002c4 <HD44780_SetCursor>
		    	   HD44780_PrintStr("Switch don't press");
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <LCDTaskSwitch+0x5c>)
 80008de:	f7ff fd62 	bl	80003a6 <HD44780_PrintStr>
		    	   osSemaphoreAcquire(switchSemaphoreHandle, 0);
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <LCDTaskSwitch+0x54>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fe4d 	bl	8002588 <osSemaphoreAcquire>
		    if(osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY) == osOK)
 80008ee:	e7d9      	b.n	80008a4 <LCDTaskSwitch+0x8>
 80008f0:	200000a0 	.word	0x200000a0
 80008f4:	08005894 	.word	0x08005894
 80008f8:	08005880 	.word	0x08005880

080008fc <lcdTaskBTN>:
    }
    osDelay(50);
}

void lcdTaskBTN(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	for(;;)
	{

	    //if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
	    if(osSemaphoreGetCount(buttonSemaphoreHandle)==1)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <lcdTaskBTN+0x58>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fefb 	bl	8002704 <osSemaphoreGetCount>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d11a      	bne.n	800094a <lcdTaskBTN+0x4e>
	    {
	    	    //osSemaphoreRelease(blockSemaphoreHandle);
	            HD44780_ClearRow(0);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fcaa 	bl	800026e <HD44780_ClearRow>
	            HD44780_SetCursor(0,0);
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fcd1 	bl	80002c4 <HD44780_SetCursor>
	            HD44780_PrintStr("BTN press");
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <lcdTaskBTN+0x5c>)
 8000924:	f7ff fd3f 	bl	80003a6 <HD44780_PrintStr>
                osDelay(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800092c:	f001 fd62 	bl	80023f4 <osDelay>
                HD44780_SetCursor(0,0);
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff fcc6 	bl	80002c4 <HD44780_SetCursor>
	            HD44780_PrintStr("BTN don't press");
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <lcdTaskBTN+0x60>)
 800093a:	f7ff fd34 	bl	80003a6 <HD44780_PrintStr>
		    	osSemaphoreAcquire(buttonSemaphoreHandle, 0);
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <lcdTaskBTN+0x58>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fe1f 	bl	8002588 <osSemaphoreAcquire>


	    }
	    osDelay(50);
 800094a:	2032      	movs	r0, #50	; 0x32
 800094c:	f001 fd52 	bl	80023f4 <osDelay>
	    if(osSemaphoreGetCount(buttonSemaphoreHandle)==1)
 8000950:	e7d8      	b.n	8000904 <lcdTaskBTN+0x8>
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c
 8000958:	080058a4 	.word	0x080058a4
 800095c:	08005870 	.word	0x08005870

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f000 f9e6 	bl	8000d7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_I2C_MspInit+0x90>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d132      	bne.n	8000a42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	2312      	movs	r3, #18
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <HAL_I2C_MspInit+0x98>)
 8000a0a:	f000 f9df 	bl	8000dcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_I2C_MspInit+0x9c>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_I2C_MspInit+0x9c>)
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_I2C_MspInit+0x94>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40010000 	.word	0x40010000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f87b 	bl	8000b84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a8e:	f003 fda9 	bl	80045e4 <xTaskGetSchedulerState>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d001      	beq.n	8000a9c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a98:	f004 fc0e 	bl	80052b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad2:	f7ff ffe5 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f004 fe49 	bl	800576c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fd4f 	bl	800057c <main>
  bx lr
 8000ade:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000ae8:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 8000aec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000af0:	20001a00 	.word	0x20001a00

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f92b 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff ff2a 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f935 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f90b 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	20000018 	.word	0x20000018
 8000b80:	20000014 	.word	0x20000014

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	200000b4 	.word	0x200000b4

08000ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	200000b4 	.word	0x200000b4

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff fff0 	bl	8000ba8 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffe0 	bl	8000ba8 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000018 	.word	0x20000018

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff90 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff49 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff5e 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffb0 	bl	8000d20 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e169      	b.n	80010b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de0:	2201      	movs	r2, #1
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8158 	bne.w	80010ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a9a      	ldr	r2, [pc, #616]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d05e      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e08:	4a98      	ldr	r2, [pc, #608]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d875      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e0e:	4a98      	ldr	r2, [pc, #608]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d058      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e14:	4a96      	ldr	r2, [pc, #600]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d86f      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e1a:	4a96      	ldr	r2, [pc, #600]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d052      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e20:	4a94      	ldr	r2, [pc, #592]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d869      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e26:	4a94      	ldr	r2, [pc, #592]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d04c      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a92      	ldr	r2, [pc, #584]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d863      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e32:	4a92      	ldr	r2, [pc, #584]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d046      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e38:	4a90      	ldr	r2, [pc, #576]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d85d      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d82a      	bhi.n	8000e98 <HAL_GPIO_Init+0xcc>
 8000e42:	2b12      	cmp	r3, #18
 8000e44:	d859      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <HAL_GPIO_Init+0x80>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000ec7 	.word	0x08000ec7
 8000e50:	08000ea1 	.word	0x08000ea1
 8000e54:	08000eb3 	.word	0x08000eb3
 8000e58:	08000ef5 	.word	0x08000ef5
 8000e5c:	08000efb 	.word	0x08000efb
 8000e60:	08000efb 	.word	0x08000efb
 8000e64:	08000efb 	.word	0x08000efb
 8000e68:	08000efb 	.word	0x08000efb
 8000e6c:	08000efb 	.word	0x08000efb
 8000e70:	08000efb 	.word	0x08000efb
 8000e74:	08000efb 	.word	0x08000efb
 8000e78:	08000efb 	.word	0x08000efb
 8000e7c:	08000efb 	.word	0x08000efb
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000efb 	.word	0x08000efb
 8000e88:	08000efb 	.word	0x08000efb
 8000e8c:	08000efb 	.word	0x08000efb
 8000e90:	08000ea9 	.word	0x08000ea9
 8000e94:	08000ebd 	.word	0x08000ebd
 8000e98:	4a79      	ldr	r2, [pc, #484]	; (8001080 <HAL_GPIO_Init+0x2b4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9e:	e02c      	b.n	8000efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e029      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e024      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e01f      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e01a      	b.n	8000efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e013      	b.n	8000efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	611a      	str	r2, [r3, #16]
          break;
 8000ee6:	e009      	b.n	8000efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	615a      	str	r2, [r3, #20]
          break;
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x130>
          break;
 8000efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d801      	bhi.n	8000f06 <HAL_GPIO_Init+0x13a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	e001      	b.n	8000f0a <HAL_GPIO_Init+0x13e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d802      	bhi.n	8000f18 <HAL_GPIO_Init+0x14c>
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x152>
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	3b08      	subs	r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	210f      	movs	r1, #15
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	6a39      	ldr	r1, [r7, #32]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80b1 	beq.w	80010ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_GPIO_Init+0x2bc>)
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_GPIO_Init+0x2c0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3f      	ldr	r2, [pc, #252]	; (8001090 <HAL_GPIO_Init+0x2c4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3d      	ldr	r2, [pc, #244]	; (8001098 <HAL_GPIO_Init+0x2cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1e0>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2bc>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	492c      	ldr	r1, [pc, #176]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4928      	ldr	r1, [pc, #160]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4922      	ldr	r1, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	491e      	ldr	r1, [pc, #120]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001024:	4013      	ands	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	4918      	ldr	r1, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4914      	ldr	r1, [pc, #80]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d021      	beq.n	80010a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
 8001068:	e021      	b.n	80010ae <HAL_GPIO_Init+0x2e2>
 800106a:	bf00      	nop
 800106c:	10320000 	.word	0x10320000
 8001070:	10310000 	.word	0x10310000
 8001074:	10220000 	.word	0x10220000
 8001078:	10210000 	.word	0x10210000
 800107c:	10120000 	.word	0x10120000
 8001080:	10110000 	.word	0x10110000
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	40011400 	.word	0x40011400
 800109c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_GPIO_Init+0x304>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <HAL_GPIO_Init+0x304>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3301      	adds	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f ae8e 	bne.w	8000de0 <HAL_GPIO_Init+0x14>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	; 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001112:	787b      	ldrb	r3, [r7, #1]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111e:	e003      	b.n	8001128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	041a      	lsls	r2, r3, #16
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
	...

08001134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e12b      	b.n	800139e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fc2e 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001198:	f000 ffea 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800119c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a81      	ldr	r2, [pc, #516]	; (80013a8 <HAL_I2C_Init+0x274>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d807      	bhi.n	80011b8 <HAL_I2C_Init+0x84>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4a80      	ldr	r2, [pc, #512]	; (80013ac <HAL_I2C_Init+0x278>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bf94      	ite	ls
 80011b0:	2301      	movls	r3, #1
 80011b2:	2300      	movhi	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	e006      	b.n	80011c6 <HAL_I2C_Init+0x92>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a7d      	ldr	r2, [pc, #500]	; (80013b0 <HAL_I2C_Init+0x27c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0e7      	b.n	800139e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4a78      	ldr	r2, [pc, #480]	; (80013b4 <HAL_I2C_Init+0x280>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a6a      	ldr	r2, [pc, #424]	; (80013a8 <HAL_I2C_Init+0x274>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d802      	bhi.n	8001208 <HAL_I2C_Init+0xd4>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3301      	adds	r3, #1
 8001206:	e009      	b.n	800121c <HAL_I2C_Init+0xe8>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_I2C_Init+0x284>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	3301      	adds	r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	430b      	orrs	r3, r1
 8001222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800122e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	495c      	ldr	r1, [pc, #368]	; (80013a8 <HAL_I2C_Init+0x274>)
 8001238:	428b      	cmp	r3, r1
 800123a:	d819      	bhi.n	8001270 <HAL_I2C_Init+0x13c>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1e59      	subs	r1, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fbb1 f3f3 	udiv	r3, r1, r3
 800124a:	1c59      	adds	r1, r3, #1
 800124c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001250:	400b      	ands	r3, r1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_I2C_Init+0x138>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1e59      	subs	r1, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	3301      	adds	r3, #1
 8001266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126a:	e051      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 800126c:	2304      	movs	r3, #4
 800126e:	e04f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_I2C_Init+0x168>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e012      	b.n	80012c2 <HAL_I2C_Init+0x18e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Init+0x196>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e022      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <HAL_I2C_Init+0x1bc>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1e58      	subs	r0, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	440b      	add	r3, r1
 80012e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	e00f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	0099      	lsls	r1, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800133e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6911      	ldr	r1, [r2, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	430b      	orrs	r3, r1
 8001352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	000186a0 	.word	0x000186a0
 80013ac:	001e847f 	.word	0x001e847f
 80013b0:	003d08ff 	.word	0x003d08ff
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	10624dd3 	.word	0x10624dd3

080013bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	461a      	mov	r2, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	817b      	strh	r3, [r7, #10]
 80013cc:	4613      	mov	r3, r2
 80013ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fbea 	bl	8000ba8 <HAL_GetTick>
 80013d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b20      	cmp	r3, #32
 80013e0:	f040 80e0 	bne.w	80015a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2319      	movs	r3, #25
 80013ea:	2201      	movs	r2, #1
 80013ec:	4970      	ldr	r1, [pc, #448]	; (80015b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f964 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	e0d3      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_I2C_Master_Transmit+0x50>
 8001408:	2302      	movs	r3, #2
 800140a:	e0cc      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d007      	beq.n	8001432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2221      	movs	r2, #33	; 0x21
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2210      	movs	r2, #16
 800144e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	893a      	ldrh	r2, [r7, #8]
 8001462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001474:	8979      	ldrh	r1, [r7, #10]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6a3a      	ldr	r2, [r7, #32]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f89c 	bl	80015b8 <I2C_MasterRequestWrite>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e08d      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014a0:	e066      	b.n	8001570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	6a39      	ldr	r1, [r7, #32]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f9de 	bl	8001868 <I2C_WaitOnTXEFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d107      	bne.n	80014ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e06b      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b04      	cmp	r3, #4
 800150a:	d11b      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x188>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d017      	beq.n	8001544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	6a39      	ldr	r1, [r7, #32]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f9ce 	bl	80018ea <I2C_WaitOnBTFFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b04      	cmp	r3, #4
 800155a:	d107      	bne.n	800156c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e01a      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d194      	bne.n	80014a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e000      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	00100002 	.word	0x00100002
 80015b4:	ffff0000 	.word	0xffff0000

080015b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	460b      	mov	r3, r1
 80015c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d006      	beq.n	80015e2 <I2C_MasterRequestWrite+0x2a>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d003      	beq.n	80015e2 <I2C_MasterRequestWrite+0x2a>
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015e0:	d108      	bne.n	80015f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e00b      	b.n	800160c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	2b12      	cmp	r3, #18
 80015fa:	d107      	bne.n	800160c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f84f 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001632:	d103      	bne.n	800163c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e035      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001648:	d108      	bne.n	800165c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800164a:	897b      	ldrh	r3, [r7, #10]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	e01b      	b.n	8001694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	11db      	asrs	r3, r3, #7
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0306 	and.w	r3, r3, #6
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f063 030f 	orn	r3, r3, #15
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <I2C_MasterRequestWrite+0xfc>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f875 	bl	800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e010      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <I2C_MasterRequestWrite+0x100>)
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f865 	bl	800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	00010008 	.word	0x00010008
 80016b8:	00010002 	.word	0x00010002

080016bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016cc:	e025      	b.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d021      	beq.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d6:	f7ff fa67 	bl	8000ba8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d302      	bcc.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d116      	bne.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f043 0220 	orr.w	r2, r3, #32
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e023      	b.n	8001762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10d      	bne.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4013      	ands	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf0c      	ite	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	2300      	movne	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	e00c      	b.n	800175a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4013      	ands	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	429a      	cmp	r2, r3
 800175e:	d0b6      	beq.n	80016ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001778:	e051      	b.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001788:	d123      	bne.n	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f043 0204 	orr.w	r2, r3, #4
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e046      	b.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d021      	beq.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff f9e5 	bl	8000ba8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d116      	bne.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e020      	b.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10c      	bne.n	8001842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4013      	ands	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	e00b      	b.n	800185a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	43da      	mvns	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4013      	ands	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d18d      	bne.n	800177a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001874:	e02d      	b.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f878 	bl	800196c <I2C_IsAcknowledgeFailed>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e02d      	b.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d021      	beq.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff f98b 	bl	8000ba8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f043 0220 	orr.w	r2, r3, #32
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	2b80      	cmp	r3, #128	; 0x80
 80018de:	d1ca      	bne.n	8001876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018f6:	e02d      	b.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f837 	bl	800196c <I2C_IsAcknowledgeFailed>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e02d      	b.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d021      	beq.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff f94a 	bl	8000ba8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b04      	cmp	r3, #4
 8001960:	d1ca      	bne.n	80018f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d11b      	bne.n	80019bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800198c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e272      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8087 	beq.w	8001af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e8:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f4:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d112      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
 8001a00:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d10b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	4b89      	ldr	r3, [pc, #548]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x12c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d168      	bne.n	8001af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e24c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x76>
 8001a30:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a7f      	ldr	r2, [pc, #508]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e02e      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0xbc>
 8001a6a:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a71      	ldr	r2, [pc, #452]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a84:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a67      	ldr	r2, [pc, #412]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f880 	bl	8000ba8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f87c 	bl	8000ba8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e200      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xe4>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff f86c 	bl	8000ba8 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f868 	bl	8000ba8 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1ec      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1c0      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4939      	ldr	r1, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f821 	bl	8000ba8 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f81d 	bl	8000ba8 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1a1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f800 	bl	8000ba8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7fe fffc 	bl	8000ba8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e180      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03a      	beq.n	8001c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7fe ffe0 	bl	8000ba8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7fe ffdc 	bl	8000ba8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e160      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 fac4 	bl	8002198 <RCC_Delay>
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7fe ffc6 	bl	8000ba8 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1e:	e00f      	b.n	8001c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7fe ffc2 	bl	8000ba8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d908      	bls.n	8001c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e146      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	42420000 	.word	0x42420000
 8001c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e9      	bne.n	8001c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a6 	beq.w	8001da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a87      	ldr	r2, [pc, #540]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b85      	ldr	r3, [pc, #532]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe ff83 	bl	8000ba8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7fe ff7f 	bl	8000ba8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e103      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b75      	ldr	r3, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x312>
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x334>
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a69      	ldr	r2, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	e01c      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x356>
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a60      	ldr	r2, [pc, #384]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7fe ff33 	bl	8000ba8 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe ff2f 	bl	8000ba8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0b1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCC_OscConfig+0x37e>
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ff1d 	bl	8000ba8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe ff19 	bl	8000ba8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e09b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8087 	beq.w	8001ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d061      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d146      	bne.n	8001e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe feed 	bl	8000ba8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe fee9 	bl	8000ba8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e06d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d108      	bne.n	8001e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4921      	ldr	r1, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a19      	ldr	r1, [r3, #32]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	491b      	ldr	r1, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe febd 	bl	8000ba8 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe feb9 	bl	8000ba8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e03d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46a>
 8001e50:	e035      	b.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fea6 	bl	8000ba8 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fea2 	bl	8000ba8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e026      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x498>
 8001e7e:	e01e      	b.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e019      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
 8001e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d0      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4965      	ldr	r1, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d040      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e073      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4936      	ldr	r1, [pc, #216]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fdf4 	bl	8000ba8 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fdf0 	bl	8000ba8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e053      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d210      	bcs.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fd52 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	08005998 	.word	0x08005998
 8002098:	20000010 	.word	0x20000010
 800209c:	20000014 	.word	0x20000014

080020a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b490      	push	{r4, r7}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_RCC_GetSysClockFreq+0xac>)
 80020a8:	1d3c      	adds	r4, r7, #4
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b0:	f240 2301 	movw	r3, #513	; 0x201
 80020b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x40>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x46>
 80020de:	e02b      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e2:	623b      	str	r3, [r7, #32]
      break;
 80020e4:	e02b      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3328      	adds	r3, #40	; 0x28
 80020f0:	443b      	add	r3, r7
 80020f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0c5b      	lsrs	r3, r3, #17
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	3328      	adds	r3, #40	; 0x28
 800210e:	443b      	add	r3, r7
 8002110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211a:	fb03 f202 	mul.w	r2, r3, r2
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	e004      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	623b      	str	r3, [r7, #32]
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213e:	6a3b      	ldr	r3, [r7, #32]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc90      	pop	{r4, r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	080058b0 	.word	0x080058b0
 8002150:	40021000 	.word	0x40021000
 8002154:	007a1200 	.word	0x007a1200
 8002158:	003d0900 	.word	0x003d0900

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <HAL_RCC_GetHCLKFreq+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	20000010 	.word	0x20000010

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002174:	f7ff fff2 	bl	800215c <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	080059a8 	.word	0x080059a8

08002198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <RCC_Delay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <RCC_Delay+0x38>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b4:	bf00      	nop
  }
  while (Delay --);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <RCC_Delay+0x1c>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000010 	.word	0x20000010
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021da:	f3ef 8305 	mrs	r3, IPSR
 80021de:	60bb      	str	r3, [r7, #8]
  return(result);
 80021e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ea:	607b      	str	r3, [r7, #4]
  return(result);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <osKernelInitialize+0x32>
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <osKernelInitialize+0x60>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d109      	bne.n	800220e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021fa:	f3ef 8311 	mrs	r3, BASEPRI
 80021fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002206:	f06f 0305 	mvn.w	r3, #5
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e00c      	b.n	8002228 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <osKernelInitialize+0x60>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <osKernelInitialize+0x60>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e002      	b.n	8002228 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002228:	68fb      	ldr	r3, [r7, #12]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	200000b8 	.word	0x200000b8

08002238 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223e:	f3ef 8305 	mrs	r3, IPSR
 8002242:	60bb      	str	r3, [r7, #8]
  return(result);
 8002244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	607b      	str	r3, [r7, #4]
  return(result);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <osKernelStart+0x32>
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <osKernelStart+0x64>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d109      	bne.n	8002272 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800225e:	f3ef 8311 	mrs	r3, BASEPRI
 8002262:	603b      	str	r3, [r7, #0]
  return(result);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <osKernelStart+0x3a>
    stat = osErrorISR;
 800226a:	f06f 0305 	mvn.w	r3, #5
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e00e      	b.n	8002290 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <osKernelStart+0x64>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <osKernelStart+0x64>)
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002280:	f001 fd64 	bl	8003d4c <vTaskStartScheduler>
      stat = osOK;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e002      	b.n	8002290 <osKernelStart+0x58>
    } else {
      stat = osError;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002290:	68fb      	ldr	r3, [r7, #12]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200000b8 	.word	0x200000b8

080022a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b092      	sub	sp, #72	; 0x48
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b0:	f3ef 8305 	mrs	r3, IPSR
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8094 	bne.w	80023e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022be:	f3ef 8310 	mrs	r3, PRIMASK
 80022c2:	623b      	str	r3, [r7, #32]
  return(result);
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 808d 	bne.w	80023e6 <osThreadNew+0x146>
 80022cc:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <osThreadNew+0x150>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d106      	bne.n	80022e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022d4:	f3ef 8311 	mrs	r3, BASEPRI
 80022d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8082 	bne.w	80023e6 <osThreadNew+0x146>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d07e      	beq.n	80023e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80022ec:	2318      	movs	r3, #24
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80022f0:	2300      	movs	r3, #0
 80022f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80022f4:	f107 031b 	add.w	r3, r7, #27
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d045      	beq.n	8002392 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <osThreadNew+0x74>
        name = attr->name;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <osThreadNew+0x9a>
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b38      	cmp	r3, #56	; 0x38
 800232c:	d805      	bhi.n	800233a <osThreadNew+0x9a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <osThreadNew+0x9e>
        return (NULL);
 800233a:	2300      	movs	r3, #0
 800233c:	e054      	b.n	80023e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00e      	beq.n	8002374 <osThreadNew+0xd4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b5b      	cmp	r3, #91	; 0x5b
 800235c:	d90a      	bls.n	8002374 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <osThreadNew+0xd4>
        mem = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
 8002372:	e010      	b.n	8002396 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <osThreadNew+0xf6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d108      	bne.n	8002396 <osThreadNew+0xf6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <osThreadNew+0xf6>
          mem = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002390:	e001      	b.n	8002396 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	2b01      	cmp	r3, #1
 800239a:	d110      	bne.n	80023be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f001 fafe 	bl	80039b4 <xTaskCreateStatic>
 80023b8:	4603      	mov	r3, r0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e013      	b.n	80023e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d110      	bne.n	80023e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f001 fb48 	bl	8003a6c <xTaskCreate>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <osThreadNew+0x146>
          hTask = NULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023e6:	697b      	ldr	r3, [r7, #20]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3738      	adds	r7, #56	; 0x38
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000b8 	.word	0x200000b8

080023f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fc:	f3ef 8305 	mrs	r3, IPSR
 8002400:	613b      	str	r3, [r7, #16]
  return(result);
 8002402:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002408:	f3ef 8310 	mrs	r3, PRIMASK
 800240c:	60fb      	str	r3, [r7, #12]
  return(result);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <osDelay+0x34>
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <osDelay+0x58>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d109      	bne.n	8002430 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800241c:	f3ef 8311 	mrs	r3, BASEPRI
 8002420:	60bb      	str	r3, [r7, #8]
  return(result);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <osDelay+0x3c>
    stat = osErrorISR;
 8002428:	f06f 0305 	mvn.w	r3, #5
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e007      	b.n	8002440 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <osDelay+0x4c>
      vTaskDelay(ticks);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f001 fc52 	bl	8003ce4 <vTaskDelay>
    }
  }

  return (stat);
 8002440:	697b      	ldr	r3, [r7, #20]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200000b8 	.word	0x200000b8

08002450 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002460:	f3ef 8305 	mrs	r3, IPSR
 8002464:	61bb      	str	r3, [r7, #24]
  return(result);
 8002466:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 8086 	bne.w	800257a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800246e:	f3ef 8310 	mrs	r3, PRIMASK
 8002472:	617b      	str	r3, [r7, #20]
  return(result);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d17f      	bne.n	800257a <osSemaphoreNew+0x12a>
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <osSemaphoreNew+0x134>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d105      	bne.n	800248e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002482:	f3ef 8311 	mrs	r3, BASEPRI
 8002486:	613b      	str	r3, [r7, #16]
  return(result);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d175      	bne.n	800257a <osSemaphoreNew+0x12a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d072      	beq.n	800257a <osSemaphoreNew+0x12a>
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d86e      	bhi.n	800257a <osSemaphoreNew+0x12a>
    mem = -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <osSemaphoreNew+0x6e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b4f      	cmp	r3, #79	; 0x4f
 80024b6:	d902      	bls.n	80024be <osSemaphoreNew+0x6e>
        mem = 1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	e00c      	b.n	80024d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <osSemaphoreNew+0x88>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <osSemaphoreNew+0x88>
          mem = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	e001      	b.n	80024d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d04c      	beq.n	800257a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d128      	bne.n	8002538 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10a      	bne.n	8002502 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2203      	movs	r2, #3
 80024f2:	9200      	str	r2, [sp, #0]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2001      	movs	r0, #1
 80024fa:	f000 fa7f 	bl	80029fc <xQueueGenericCreateStatic>
 80024fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002500:	e005      	b.n	800250e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002502:	2203      	movs	r2, #3
 8002504:	2100      	movs	r1, #0
 8002506:	2001      	movs	r0, #1
 8002508:	f000 faef 	bl	8002aea <xQueueGenericCreate>
 800250c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <osSemaphoreNew+0x10a>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01f      	beq.n	800255a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800251a:	2300      	movs	r3, #0
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002522:	f000 fbad 	bl	8002c80 <xQueueGenericSend>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d016      	beq.n	800255a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800252c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800252e:	f001 f870 	bl	8003612 <vQueueDelete>
            hSemaphore = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	e010      	b.n	800255a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	461a      	mov	r2, r3
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fb30 	bl	8002bac <xQueueCreateCountingSemaphoreStatic>
 800254c:	6278      	str	r0, [r7, #36]	; 0x24
 800254e:	e004      	b.n	800255a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fb61 	bl	8002c1a <xQueueCreateCountingSemaphore>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <osSemaphoreNew+0x11e>
          name = attr->name;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e001      	b.n	8002572 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002572:	69f9      	ldr	r1, [r7, #28]
 8002574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002576:	f001 f997 	bl	80038a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800257c:	4618      	mov	r0, r3
 800257e:	3728      	adds	r7, #40	; 0x28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200000b8 	.word	0x200000b8

08002588 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025a0:	f06f 0303 	mvn.w	r3, #3
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e04b      	b.n	8002640 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a8:	f3ef 8305 	mrs	r3, IPSR
 80025ac:	617b      	str	r3, [r7, #20]
  return(result);
 80025ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10f      	bne.n	80025d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b4:	f3ef 8310 	mrs	r3, PRIMASK
 80025b8:	613b      	str	r3, [r7, #16]
  return(result);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <osSemaphoreAcquire+0x4c>
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <osSemaphoreAcquire+0xc4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d128      	bne.n	800261a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c8:	f3ef 8311 	mrs	r3, BASEPRI
 80025cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d022      	beq.n	800261a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80025da:	f06f 0303 	mvn.w	r3, #3
 80025de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80025e0:	e02d      	b.n	800263e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	461a      	mov	r2, r3
 80025ec:	2100      	movs	r1, #0
 80025ee:	69b8      	ldr	r0, [r7, #24]
 80025f0:	f000 ff56 	bl	80034a0 <xQueueReceiveFromISR>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80025fa:	f06f 0302 	mvn.w	r3, #2
 80025fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002600:	e01d      	b.n	800263e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01a      	beq.n	800263e <osSemaphoreAcquire+0xb6>
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <osSemaphoreAcquire+0xc8>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002618:	e011      	b.n	800263e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	69b8      	ldr	r0, [r7, #24]
 800261e:	f000 fe33 	bl	8003288 <xQueueSemaphoreTake>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d00b      	beq.n	8002640 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800262e:	f06f 0301 	mvn.w	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e004      	b.n	8002640 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002636:	f06f 0302 	mvn.w	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e000      	b.n	8002640 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800263e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002640:	69fb      	ldr	r3, [r7, #28]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200000b8 	.word	0x200000b8
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800266a:	f06f 0303 	mvn.w	r3, #3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e03e      	b.n	80026f0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002672:	f3ef 8305 	mrs	r3, IPSR
 8002676:	617b      	str	r3, [r7, #20]
  return(result);
 8002678:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267e:	f3ef 8310 	mrs	r3, PRIMASK
 8002682:	613b      	str	r3, [r7, #16]
  return(result);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <osSemaphoreRelease+0x4a>
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <osSemaphoreRelease+0xa8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d120      	bne.n	80026d4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002692:	f3ef 8311 	mrs	r3, BASEPRI
 8002696:	60fb      	str	r3, [r7, #12]
  return(result);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01a      	beq.n	80026d4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	4619      	mov	r1, r3
 80026a8:	69b8      	ldr	r0, [r7, #24]
 80026aa:	f000 fc7f 	bl	8002fac <xQueueGiveFromISR>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d003      	beq.n	80026bc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80026b4:	f06f 0302 	mvn.w	r3, #2
 80026b8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026ba:	e018      	b.n	80026ee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d015      	beq.n	80026ee <osSemaphoreRelease+0x9a>
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <osSemaphoreRelease+0xac>)
 80026c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026d2:	e00c      	b.n	80026ee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80026d4:	2300      	movs	r3, #0
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	69b8      	ldr	r0, [r7, #24]
 80026dc:	f000 fad0 	bl	8002c80 <xQueueGenericSend>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d004      	beq.n	80026f0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80026e6:	f06f 0302 	mvn.w	r3, #2
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	e000      	b.n	80026f0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026ee:	bf00      	nop
    }
  }

  return (stat);
 80026f0:	69fb      	ldr	r3, [r7, #28]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3720      	adds	r7, #32
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200000b8 	.word	0x200000b8
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <osSemaphoreGetCount+0x18>
    count = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e01e      	b.n	800275a <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800271c:	f3ef 8305 	mrs	r3, IPSR
 8002720:	617b      	str	r3, [r7, #20]
  return(result);
 8002722:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002728:	f3ef 8310 	mrs	r3, PRIMASK
 800272c:	613b      	str	r3, [r7, #16]
  return(result);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <osSemaphoreGetCount+0x44>
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <osSemaphoreGetCount+0x60>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d10a      	bne.n	8002752 <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800273c:	f3ef 8311 	mrs	r3, BASEPRI
 8002740:	60fb      	str	r3, [r7, #12]
  return(result);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8002748:	69b8      	ldr	r0, [r7, #24]
 800274a:	f000 ff47 	bl	80035dc <uxQueueMessagesWaitingFromISR>
 800274e:	61f8      	str	r0, [r7, #28]
 8002750:	e003      	b.n	800275a <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8002752:	69b8      	ldr	r0, [r7, #24]
 8002754:	f000 ff24 	bl	80035a0 <uxQueueMessagesWaiting>
 8002758:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 800275a:	69fb      	ldr	r3, [r7, #28]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200000b8 	.word	0x200000b8

08002768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <vApplicationGetIdleTaskMemory+0x28>)
 8002778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <vApplicationGetIdleTaskMemory+0x2c>)
 800277e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	200000bc 	.word	0x200000bc
 8002794:	20000118 	.word	0x20000118

08002798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80027a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <vApplicationGetTimerTaskMemory+0x30>)
 80027ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000318 	.word	0x20000318
 80027c8:	20000374 	.word	0x20000374

080027cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f103 0208 	add.w	r2, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0208 	add.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d103      	bne.n	8002888 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e00c      	b.n	80028a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3308      	adds	r3, #8
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e002      	b.n	8002896 <vListInsert+0x2e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d2f6      	bcs.n	8002890 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002956:	f002 fc31 	bl	80051bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	441a      	add	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	3b01      	subs	r3, #1
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01a      	beq.n	80029ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fc51 	bl	8004260 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <xQueueGenericReset+0xcc>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	e009      	b.n	80029ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3310      	adds	r3, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fef6 	bl	80027cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fef1 	bl	80027cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ea:	f002 fc17 	bl	800521c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <xQueueGenericCreateStatic+0x52>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <xQueueGenericCreateStatic+0x56>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericCreateStatic+0x58>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	623b      	str	r3, [r7, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <xQueueGenericCreateStatic+0x7e>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <xQueueGenericCreateStatic+0x82>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <xQueueGenericCreateStatic+0x84>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	61fb      	str	r3, [r7, #28]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a9a:	2350      	movs	r3, #80	; 0x50
 8002a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d00a      	beq.n	8002aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61bb      	str	r3, [r7, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002acc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f843 	bl	8002b66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3730      	adds	r7, #48	; 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af02      	add	r7, sp, #8
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	613b      	str	r3, [r7, #16]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e004      	b.n	8002b2a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 fc44 	bl	80053bc <pvPortMalloc>
 8002b34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3350      	adds	r3, #80	; 0x50
 8002b40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b4a:	79fa      	ldrb	r2, [r7, #7]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f805 	bl	8002b66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e002      	b.n	8002b88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b94:	2101      	movs	r1, #1
 8002b96:	69b8      	ldr	r0, [r7, #24]
 8002b98:	f7ff fec8 	bl	800292c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	61bb      	str	r3, [r7, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d90a      	bls.n	8002bf2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	617b      	str	r3, [r7, #20]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fefd 	bl	80029fc <xQueueGenericCreateStatic>
 8002c02:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c10:	69fb      	ldr	r3, [r7, #28]
	}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	613b      	str	r3, [r7, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d90a      	bls.n	8002c5e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60fb      	str	r3, [r7, #12]
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c5e:	2202      	movs	r2, #2
 8002c60:	2100      	movs	r1, #0
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff41 	bl	8002aea <xQueueGenericCreate>
 8002c68:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c76:	697b      	ldr	r3, [r7, #20]
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <xQueueGenericSend+0x32>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <xQueueGenericSend+0x40>
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <xQueueGenericSend+0x44>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <xQueueGenericSend+0x46>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <xQueueGenericSend+0x60>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d103      	bne.n	8002cee <xQueueGenericSend+0x6e>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <xQueueGenericSend+0x72>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <xQueueGenericSend+0x74>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xQueueGenericSend+0x8e>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	623b      	str	r3, [r7, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d0e:	f001 fc69 	bl	80045e4 <xTaskGetSchedulerState>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <xQueueGenericSend+0x9e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <xQueueGenericSend+0xa2>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <xQueueGenericSend+0xa4>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericSend+0xbe>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61fb      	str	r3, [r7, #28]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d3e:	f002 fa3d 	bl	80051bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <xQueueGenericSend+0xd4>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d129      	bne.n	8002da8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5a:	f000 fc94 	bl	8003686 <prvCopyDataToQueue>
 8002d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fa77 	bl	8004260 <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d78:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <xQueueGenericSend+0x1f8>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	e00a      	b.n	8002da0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <xQueueGenericSend+0x1f8>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002da0:	f002 fa3c 	bl	800521c <vPortExitCritical>
				return pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e063      	b.n	8002e70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dae:	f002 fa35 	bl	800521c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e05c      	b.n	8002e70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fab1 	bl	8004328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dca:	f002 fa27 	bl	800521c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dce:	f001 f823 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dd2:	f002 f9f3 	bl	80051bc <vPortEnterCritical>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <xQueueGenericSend+0x16c>
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d103      	bne.n	8002e02 <xQueueGenericSend+0x182>
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e02:	f002 fa0b 	bl	800521c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e06:	1d3a      	adds	r2, r7, #4
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 faa0 	bl	8004354 <xTaskCheckForTimeOut>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d124      	bne.n	8002e64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1c:	f000 fd2b 	bl	8003876 <prvIsQueueFull>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	3310      	adds	r3, #16
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f9c6 	bl	80041c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e36:	f000 fcb6 	bl	80037a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e3a:	f000 fffb 	bl	8003e34 <xTaskResumeAll>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af7c 	bne.w	8002d3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <xQueueGenericSend+0x1f8>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	e772      	b.n	8002d3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e5a:	f000 fca4 	bl	80037a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e5e:	f000 ffe9 	bl	8003e34 <xTaskResumeAll>
 8002e62:	e76c      	b.n	8002d3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e66:	f000 fc9e 	bl	80037a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e6a:	f000 ffe3 	bl	8003e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
		}
	}
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3738      	adds	r7, #56	; 0x38
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <xQueueGenericSendFromISR+0x3c>
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <xQueueGenericSendFromISR+0x40>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <xQueueGenericSendFromISR+0x42>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	623b      	str	r3, [r7, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d103      	bne.n	8002ee6 <xQueueGenericSendFromISR+0x6a>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <xQueueGenericSendFromISR+0x6e>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <xQueueGenericSendFromISR+0x70>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	61fb      	str	r3, [r7, #28]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f06:	f002 fa1b 	bl	8005340 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f0a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	61ba      	str	r2, [r7, #24]
 8002f20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <xQueueGenericSendFromISR+0xbc>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d12c      	bne.n	8002f92 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f48:	f000 fb9d 	bl	8003686 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d112      	bne.n	8002f7c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	3324      	adds	r3, #36	; 0x24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f97c 	bl	8004260 <xTaskRemoveFromEventList>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00e      	beq.n	8002f8c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e007      	b.n	8002f8c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f80:	3301      	adds	r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	b25a      	sxtb	r2, r3
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f90:	e001      	b.n	8002f96 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3738      	adds	r7, #56	; 0x38
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08e      	sub	sp, #56	; 0x38
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	623b      	str	r3, [r7, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	61fb      	str	r3, [r7, #28]
}
 8002ff0:	bf00      	nop
 8002ff2:	e7fe      	b.n	8002ff2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueGiveFromISR+0x58>
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueGiveFromISR+0x5c>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueGiveFromISR+0x5e>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xQueueGiveFromISR+0x78>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	61bb      	str	r3, [r7, #24]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003024:	f002 f98c 	bl	8005340 <vPortValidateInterruptPriority>
	__asm volatile
 8003028:	f3ef 8211 	mrs	r2, BASEPRI
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	617a      	str	r2, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003040:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003050:	429a      	cmp	r2, r3
 8003052:	d22b      	bcs.n	80030ac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d112      	bne.n	8003096 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	3324      	adds	r3, #36	; 0x24
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f8ef 	bl	8004260 <xTaskRemoveFromEventList>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e007      	b.n	80030a6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800309a:	3301      	adds	r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	b25a      	sxtb	r2, r3
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030a6:	2301      	movs	r3, #1
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
 80030aa:	e001      	b.n	80030b0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f383 8811 	msr	BASEPRI, r3
}
 80030ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3738      	adds	r7, #56	; 0x38
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <xQueueReceive+0x30>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	623b      	str	r3, [r7, #32]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <xQueueReceive+0x3e>
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <xQueueReceive+0x42>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueReceive+0x44>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueReceive+0x5e>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61fb      	str	r3, [r7, #28]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003126:	f001 fa5d 	bl	80045e4 <xTaskGetSchedulerState>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <xQueueReceive+0x6e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <xQueueReceive+0x72>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueReceive+0x74>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueReceive+0x8e>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	61bb      	str	r3, [r7, #24]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003156:	f002 f831 	bl	80051bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01f      	beq.n	80031a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316a:	f000 faf6 	bl	800375a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f86c 	bl	8004260 <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <xQueueReceive+0x1bc>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800319e:	f002 f83d 	bl	800521c <vPortExitCritical>
				return pdPASS;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e069      	b.n	800327a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ac:	f002 f836 	bl	800521c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e062      	b.n	800327a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 f8b2 	bl	8004328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031c8:	f002 f828 	bl	800521c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031cc:	f000 fe24 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d0:	f001 fff4 	bl	80051bc <vPortEnterCritical>
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d103      	bne.n	80031ea <xQueueReceive+0x122>
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d103      	bne.n	8003200 <xQueueReceive+0x138>
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003200:	f002 f80c 	bl	800521c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003204:	1d3a      	adds	r2, r7, #4
 8003206:	f107 0310 	add.w	r3, r7, #16
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f8a1 	bl	8004354 <xTaskCheckForTimeOut>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d123      	bne.n	8003260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321a:	f000 fb16 	bl	800384a <prvIsQueueEmpty>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 ffc7 	bl	80041c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003234:	f000 fab7 	bl	80037a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003238:	f000 fdfc 	bl	8003e34 <xTaskResumeAll>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d189      	bne.n	8003156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <xQueueReceive+0x1bc>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	e780      	b.n	8003156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003256:	f000 faa6 	bl	80037a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800325a:	f000 fdeb 	bl	8003e34 <xTaskResumeAll>
 800325e:	e77a      	b.n	8003156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003262:	f000 faa0 	bl	80037a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003266:	f000 fde5 	bl	8003e34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800326a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800326c:	f000 faed 	bl	800384a <prvIsQueueEmpty>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	f43f af6f 	beq.w	8003156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800327a:	4618      	mov	r0, r3
 800327c:	3730      	adds	r7, #48	; 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800329a:	2300      	movs	r3, #0
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	623b      	str	r3, [r7, #32]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	61fb      	str	r3, [r7, #28]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d8:	f001 f984 	bl	80045e4 <xTaskGetSchedulerState>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <xQueueSemaphoreTake+0x60>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <xQueueSemaphoreTake+0x64>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <xQueueSemaphoreTake+0x66>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	61bb      	str	r3, [r7, #24]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003308:	f001 ff58 	bl	80051bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d024      	beq.n	8003362 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003328:	f001 fadc 	bl	80048e4 <pvTaskIncrementMutexHeldCount>
 800332c:	4602      	mov	r2, r0
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00f      	beq.n	800335a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	3310      	adds	r3, #16
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ff8e 	bl	8004260 <xTaskRemoveFromEventList>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <xQueueSemaphoreTake+0x214>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800335a:	f001 ff5f 	bl	800521c <vPortExitCritical>
				return pdPASS;
 800335e:	2301      	movs	r3, #1
 8003360:	e097      	b.n	8003492 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	617b      	str	r3, [r7, #20]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003384:	f001 ff4a 	bl	800521c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003388:	2300      	movs	r3, #0
 800338a:	e082      	b.n	8003492 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	4618      	mov	r0, r3
 8003398:	f000 ffc6 	bl	8004328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033a0:	f001 ff3c 	bl	800521c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a4:	f000 fd38 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a8:	f001 ff08 	bl	80051bc <vPortEnterCritical>
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d103      	bne.n	80033c2 <xQueueSemaphoreTake+0x13a>
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d103      	bne.n	80033d8 <xQueueSemaphoreTake+0x150>
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d8:	f001 ff20 	bl	800521c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033dc:	463a      	mov	r2, r7
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ffb5 	bl	8004354 <xTaskCheckForTimeOut>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d132      	bne.n	8003456 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033f2:	f000 fa2a 	bl	800384a <prvIsQueueEmpty>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d026      	beq.n	800344a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003404:	f001 feda 	bl	80051bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f907 	bl	8004620 <xTaskPriorityInherit>
 8003412:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003414:	f001 ff02 	bl	800521c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fecd 	bl	80041c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003428:	f000 f9bd 	bl	80037a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800342c:	f000 fd02 	bl	8003e34 <xTaskResumeAll>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f af68 	bne.w	8003308 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <xQueueSemaphoreTake+0x214>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	e75e      	b.n	8003308 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800344a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800344c:	f000 f9ab 	bl	80037a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003450:	f000 fcf0 	bl	8003e34 <xTaskResumeAll>
 8003454:	e758      	b.n	8003308 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003458:	f000 f9a5 	bl	80037a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800345c:	f000 fcea 	bl	8003e34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003462:	f000 f9f2 	bl	800384a <prvIsQueueEmpty>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	f43f af4d 	beq.w	8003308 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003474:	f001 fea2 	bl	80051bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800347a:	f000 f8ed 	bl	8003658 <prvGetDisinheritPriorityAfterTimeout>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f9a6 	bl	80047d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800348c:	f001 fec6 	bl	800521c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003492:	4618      	mov	r0, r3
 8003494:	3738      	adds	r7, #56	; 0x38
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08e      	sub	sp, #56	; 0x38
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	623b      	str	r3, [r7, #32]
}
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <xQueueReceiveFromISR+0x3a>
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <xQueueReceiveFromISR+0x3e>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <xQueueReceiveFromISR+0x40>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	61fb      	str	r3, [r7, #28]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034fa:	f001 ff21 	bl	8005340 <vPortValidateInterruptPriority>
	__asm volatile
 80034fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	61ba      	str	r2, [r7, #24]
 8003514:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003516:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02f      	beq.n	8003586 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800352c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003534:	f000 f911 	bl	800375a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	1e5a      	subs	r2, r3, #1
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003540:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d112      	bne.n	8003570 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	3310      	adds	r3, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fe82 	bl	8004260 <xTaskRemoveFromEventList>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e007      	b.n	8003580 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003574:	3301      	adds	r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b25a      	sxtb	r2, r3
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003580:	2301      	movs	r3, #1
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
 8003584:	e001      	b.n	800358a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003586:	2300      	movs	r3, #0
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f383 8811 	msr	BASEPRI, r3
}
 8003594:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003598:	4618      	mov	r0, r3
 800359a:	3738      	adds	r7, #56	; 0x38
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	60bb      	str	r3, [r7, #8]
}
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80035c4:	f001 fdfa 	bl	80051bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80035ce:	f001 fe25 	bl	800521c <vPortExitCritical>

	return uxReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60bb      	str	r3, [r7, #8]
}
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8003606:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <vQueueDelete+0x28>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60bb      	str	r3, [r7, #8]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f95c 	bl	80038f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f001 ff7a 	bl	8005544 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e001      	b.n	800367a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800367a:	68fb      	ldr	r3, [r7, #12]
	}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d14d      	bne.n	8003748 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 f823 	bl	80046fc <xTaskPriorityDisinherit>
 80036b6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	e043      	b.n	8003748 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d119      	bne.n	80036fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6898      	ldr	r0, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	461a      	mov	r2, r3
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	f002 f86f 	bl	80057b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d32b      	bcc.n	8003748 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e026      	b.n	8003748 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68d8      	ldr	r0, [r3, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	461a      	mov	r2, r3
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	f002 f855 	bl	80057b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	425b      	negs	r3, r3
 8003714:	441a      	add	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d207      	bcs.n	8003736 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	425b      	negs	r3, r3
 8003730:	441a      	add	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d105      	bne.n	8003748 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3b01      	subs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003750:	697b      	ldr	r3, [r7, #20]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d303      	bcc.n	800378e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	461a      	mov	r2, r3
 8003798:	6838      	ldr	r0, [r7, #0]
 800379a:	f002 f80b 	bl	80057b4 <memcpy>
	}
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037ae:	f001 fd05 	bl	80051bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ba:	e011      	b.n	80037e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fd49 	bl	8004260 <xTaskRemoveFromEventList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037d4:	f000 fe20 	bl	8004418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3b01      	subs	r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dce9      	bgt.n	80037bc <prvUnlockQueue+0x16>
 80037e8:	e000      	b.n	80037ec <prvUnlockQueue+0x46>
					break;
 80037ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	22ff      	movs	r2, #255	; 0xff
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037f4:	f001 fd12 	bl	800521c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037f8:	f001 fce0 	bl	80051bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003802:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003804:	e011      	b.n	800382a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3310      	adds	r3, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fd24 	bl	8004260 <xTaskRemoveFromEventList>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800381e:	f000 fdfb 	bl	8004418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	3b01      	subs	r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800382a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800382e:	2b00      	cmp	r3, #0
 8003830:	dce9      	bgt.n	8003806 <prvUnlockQueue+0x60>
 8003832:	e000      	b.n	8003836 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003834:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800383e:	f001 fced 	bl	800521c <vPortExitCritical>
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003852:	f001 fcb3 	bl	80051bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e001      	b.n	8003868 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003868:	f001 fcd8 	bl	800521c <vPortExitCritical>

	return xReturn;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800387e:	f001 fc9d 	bl	80051bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	429a      	cmp	r2, r3
 800388c:	d102      	bne.n	8003894 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800388e:	2301      	movs	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e001      	b.n	8003898 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003898:	f001 fcc0 	bl	800521c <vPortExitCritical>

	return xReturn;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e014      	b.n	80038e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038b8:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038da:	e006      	b.n	80038ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	d9e7      	bls.n	80038b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	20000774 	.word	0x20000774

080038f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e016      	b.n	8003934 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003906:	4a10      	ldr	r2, [pc, #64]	; (8003948 <vQueueUnregisterQueue+0x50>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d10b      	bne.n	800392e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <vQueueUnregisterQueue+0x50>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2100      	movs	r1, #0
 800391c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <vQueueUnregisterQueue+0x50>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	605a      	str	r2, [r3, #4]
				break;
 800392c:	e006      	b.n	800393c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b07      	cmp	r3, #7
 8003938:	d9e5      	bls.n	8003906 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000774 	.word	0x20000774

0800394c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800395c:	f001 fc2e 	bl	80051bc <vPortEnterCritical>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003966:	b25b      	sxtb	r3, r3
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d103      	bne.n	8003976 <vQueueWaitForMessageRestricted+0x2a>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800397c:	b25b      	sxtb	r3, r3
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d103      	bne.n	800398c <vQueueWaitForMessageRestricted+0x40>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800398c:	f001 fc46 	bl	800521c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fc31 	bl	8004208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f7ff fefd 	bl	80037a6 <prvUnlockQueue>
	}
 80039ac:	bf00      	nop
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xTaskCreateStatic+0x2a>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	623b      	str	r3, [r7, #32]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xTaskCreateStatic+0x46>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61fb      	str	r3, [r7, #28]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039fa:	235c      	movs	r3, #92	; 0x5c
 80039fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b5c      	cmp	r3, #92	; 0x5c
 8003a02:	d00a      	beq.n	8003a1a <xTaskCreateStatic+0x66>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61bb      	str	r3, [r7, #24]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01e      	beq.n	8003a5e <xTaskCreateStatic+0xaa>
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01b      	beq.n	8003a5e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f850 	bl	8003af6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a58:	f000 f8d4 	bl	8003c04 <prvAddNewTaskToReadyList>
 8003a5c:	e001      	b.n	8003a62 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a62:	697b      	ldr	r3, [r7, #20]
	}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3728      	adds	r7, #40	; 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fc9b 	bl	80053bc <pvPortMalloc>
 8003a86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a8e:	205c      	movs	r0, #92	; 0x5c
 8003a90:	f001 fc94 	bl	80053bc <pvPortMalloc>
 8003a94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa2:	e005      	b.n	8003ab0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aa4:	6978      	ldr	r0, [r7, #20]
 8003aa6:	f001 fd4d 	bl	8005544 <vPortFree>
 8003aaa:	e001      	b.n	8003ab0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d017      	beq.n	8003ae6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f80e 	bl	8003af6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ada:	69f8      	ldr	r0, [r7, #28]
 8003adc:	f000 f892 	bl	8003c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e002      	b.n	8003aec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aec:	69bb      	ldr	r3, [r7, #24]
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b088      	sub	sp, #32
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	21a5      	movs	r1, #165	; 0xa5
 8003b10:	f001 fe5e 	bl	80057d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f023 0307 	bic.w	r3, r3, #7
 8003b2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	617b      	str	r3, [r7, #20]
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e012      	b.n	8003b7a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	7819      	ldrb	r1, [r3, #0]
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	4413      	add	r3, r2
 8003b62:	3334      	adds	r3, #52	; 0x34
 8003b64:	460a      	mov	r2, r1
 8003b66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d9e9      	bls.n	8003b54 <prvInitialiseNewTask+0x5e>
 8003b80:	e000      	b.n	8003b84 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	2b37      	cmp	r3, #55	; 0x37
 8003b90:	d901      	bls.n	8003b96 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b92:	2337      	movs	r3, #55	; 0x37
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	3304      	adds	r3, #4
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fe2c 	bl	800280a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fe27 	bl	800280a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	69b8      	ldr	r0, [r7, #24]
 8003be6:	f001 f9f7 	bl	8004fd8 <pxPortInitialiseStack>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bfc:	bf00      	nop
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c0c:	f001 fad6 	bl	80051bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <prvAddNewTaskToReadyList+0xc4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <prvAddNewTaskToReadyList+0xc4>)
 8003c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <prvAddNewTaskToReadyList+0xc8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c22:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <prvAddNewTaskToReadyList+0xc8>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <prvAddNewTaskToReadyList+0xc4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d110      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c30:	f000 fc16 	bl	8004460 <prvInitialiseTaskLists>
 8003c34:	e00d      	b.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <prvAddNewTaskToReadyList+0xcc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c3e:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <prvAddNewTaskToReadyList+0xc8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d802      	bhi.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <prvAddNewTaskToReadyList+0xc8>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <prvAddNewTaskToReadyList+0xd0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <prvAddNewTaskToReadyList+0xd0>)
 8003c5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <prvAddNewTaskToReadyList+0xd0>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <prvAddNewTaskToReadyList+0xd4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d903      	bls.n	8003c78 <prvAddNewTaskToReadyList+0x74>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <prvAddNewTaskToReadyList+0xd4>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <prvAddNewTaskToReadyList+0xd8>)
 8003c86:	441a      	add	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fdc7 	bl	8002822 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c94:	f001 fac2 	bl	800521c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <prvAddNewTaskToReadyList+0xcc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <prvAddNewTaskToReadyList+0xc8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d207      	bcs.n	8003cbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <prvAddNewTaskToReadyList+0xdc>)
 8003cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000c88 	.word	0x20000c88
 8003ccc:	200007b4 	.word	0x200007b4
 8003cd0:	20000c94 	.word	0x20000c94
 8003cd4:	20000ca4 	.word	0x20000ca4
 8003cd8:	20000c90 	.word	0x20000c90
 8003cdc:	200007b8 	.word	0x200007b8
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d017      	beq.n	8003d26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <vTaskDelay+0x60>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <vTaskDelay+0x30>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	60bb      	str	r3, [r7, #8]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d14:	f000 f880 	bl	8003e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d18:	2100      	movs	r1, #0
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fdf6 	bl	800490c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d20:	f000 f888 	bl	8003e34 <xTaskResumeAll>
 8003d24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <vTaskDelay+0x64>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000cb0 	.word	0x20000cb0
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d5a:	463a      	mov	r2, r7
 8003d5c:	1d39      	adds	r1, r7, #4
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fd00 	bl	8002768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	9202      	str	r2, [sp, #8]
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2300      	movs	r3, #0
 8003d78:	460a      	mov	r2, r1
 8003d7a:	4921      	ldr	r1, [pc, #132]	; (8003e00 <vTaskStartScheduler+0xb4>)
 8003d7c:	4821      	ldr	r0, [pc, #132]	; (8003e04 <vTaskStartScheduler+0xb8>)
 8003d7e:	f7ff fe19 	bl	80039b4 <xTaskCreateStatic>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <vTaskStartScheduler+0xbc>)
 8003d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <vTaskStartScheduler+0xbc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e001      	b.n	8003d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003da0:	f000 fe08 	bl	80049b4 <xTimerCreateTimerTask>
 8003da4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d116      	bne.n	8003dda <vTaskStartScheduler+0x8e>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	613b      	str	r3, [r7, #16]
}
 8003dbe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <vTaskStartScheduler+0xc0>)
 8003dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <vTaskStartScheduler+0xc4>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <vTaskStartScheduler+0xc8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dd4:	f001 f980 	bl	80050d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dd8:	e00e      	b.n	8003df8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d10a      	bne.n	8003df8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60fb      	str	r3, [r7, #12]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <vTaskStartScheduler+0xaa>
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	080058c0 	.word	0x080058c0
 8003e04:	08004431 	.word	0x08004431
 8003e08:	20000cac 	.word	0x20000cac
 8003e0c:	20000ca8 	.word	0x20000ca8
 8003e10:	20000c94 	.word	0x20000c94
 8003e14:	20000c8c 	.word	0x20000c8c

08003e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e24:	6013      	str	r3, [r2, #0]
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000cb0 	.word	0x20000cb0

08003e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e60:	f001 f9ac 	bl	80051bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d162      	bne.n	8003f3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <xTaskResumeAll+0x11c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05e      	beq.n	8003f3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7e:	e02f      	b.n	8003ee0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e80:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <xTaskResumeAll+0x120>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fd23 	bl	80028d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fd1e 	bl	80028d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <xTaskResumeAll+0x124>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d903      	bls.n	8003eb0 <xTaskResumeAll+0x7c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <xTaskResumeAll+0x124>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <xTaskResumeAll+0x128>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe fcab 	bl	8002822 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <xTaskResumeAll+0x12c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <xTaskResumeAll+0x130>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <xTaskResumeAll+0x120>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1cb      	bne.n	8003e80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eee:	f000 fb55 	bl	800459c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <xTaskResumeAll+0x134>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003efe:	f000 f845 	bl	8003f8c <xTaskIncrementTick>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f08:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <xTaskResumeAll+0x130>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f1      	bne.n	8003efe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <xTaskResumeAll+0x134>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <xTaskResumeAll+0x130>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <xTaskResumeAll+0x138>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f3c:	f001 f96e 	bl	800521c <vPortExitCritical>

	return xAlreadyYielded;
 8003f40:	68bb      	ldr	r3, [r7, #8]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000cb0 	.word	0x20000cb0
 8003f50:	20000c88 	.word	0x20000c88
 8003f54:	20000c48 	.word	0x20000c48
 8003f58:	20000c90 	.word	0x20000c90
 8003f5c:	200007b8 	.word	0x200007b8
 8003f60:	200007b4 	.word	0x200007b4
 8003f64:	20000c9c 	.word	0x20000c9c
 8003f68:	20000c98 	.word	0x20000c98
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <xTaskGetTickCount+0x18>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f7c:	687b      	ldr	r3, [r7, #4]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	20000c8c 	.word	0x20000c8c

08003f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f96:	4b51      	ldr	r3, [pc, #324]	; (80040dc <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 808e 	bne.w	80040bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <xTaskIncrementTick+0x154>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fa8:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <xTaskIncrementTick+0x154>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d120      	bne.n	8003ff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	603b      	str	r3, [r7, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	e7fe      	b.n	8003fd2 <xTaskIncrementTick+0x46>
 8003fd4:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <xTaskIncrementTick+0x15c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4a41      	ldr	r2, [pc, #260]	; (80040e8 <xTaskIncrementTick+0x15c>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <xTaskIncrementTick+0x160>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <xTaskIncrementTick+0x160>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	f000 fad3 	bl	800459c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <xTaskIncrementTick+0x164>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d34e      	bcc.n	800409e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004000:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <xTaskIncrementTick+0x158>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xTaskIncrementTick+0x82>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xTaskIncrementTick+0x84>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <xTaskIncrementTick+0x164>)
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	601a      	str	r2, [r3, #0]
					break;
 800401c:	e03f      	b.n	800409e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <xTaskIncrementTick+0x158>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d203      	bcs.n	800403e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004036:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <xTaskIncrementTick+0x164>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6013      	str	r3, [r2, #0]
						break;
 800403c:	e02f      	b.n	800409e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3304      	adds	r3, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fc48 	bl	80028d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	3318      	adds	r3, #24
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fc3f 	bl	80028d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <xTaskIncrementTick+0x168>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d903      	bls.n	800406e <xTaskIncrementTick+0xe2>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <xTaskIncrementTick+0x168>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <xTaskIncrementTick+0x16c>)
 800407c:	441a      	add	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe fbcc 	bl	8002822 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <xTaskIncrementTick+0x170>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	429a      	cmp	r2, r3
 8004096:	d3b3      	bcc.n	8004000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	e7b0      	b.n	8004000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <xTaskIncrementTick+0x170>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4914      	ldr	r1, [pc, #80]	; (80040f8 <xTaskIncrementTick+0x16c>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d907      	bls.n	80040c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e004      	b.n	80040c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <xTaskIncrementTick+0x174>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <xTaskIncrementTick+0x174>)
 80040c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <xTaskIncrementTick+0x178>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000cb0 	.word	0x20000cb0
 80040e0:	20000c8c 	.word	0x20000c8c
 80040e4:	20000c40 	.word	0x20000c40
 80040e8:	20000c44 	.word	0x20000c44
 80040ec:	20000ca0 	.word	0x20000ca0
 80040f0:	20000ca8 	.word	0x20000ca8
 80040f4:	20000c90 	.word	0x20000c90
 80040f8:	200007b8 	.word	0x200007b8
 80040fc:	200007b4 	.word	0x200007b4
 8004100:	20000c98 	.word	0x20000c98
 8004104:	20000c9c 	.word	0x20000c9c

08004108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800410e:	4b27      	ldr	r3, [pc, #156]	; (80041ac <vTaskSwitchContext+0xa4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <vTaskSwitchContext+0xa8>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800411c:	e041      	b.n	80041a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <vTaskSwitchContext+0xa8>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <vTaskSwitchContext+0xac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e010      	b.n	800414e <vTaskSwitchContext+0x46>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <vTaskSwitchContext+0x40>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vTaskSwitchContext+0x3e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	491a      	ldr	r1, [pc, #104]	; (80041b8 <vTaskSwitchContext+0xb0>)
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0e4      	beq.n	800412c <vTaskSwitchContext+0x24>
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <vTaskSwitchContext+0xb0>)
 800416e:	4413      	add	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3308      	adds	r3, #8
 8004184:	429a      	cmp	r2, r3
 8004186:	d104      	bne.n	8004192 <vTaskSwitchContext+0x8a>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <vTaskSwitchContext+0xb4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <vTaskSwitchContext+0xac>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6013      	str	r3, [r2, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000cb0 	.word	0x20000cb0
 80041b0:	20000c9c 	.word	0x20000c9c
 80041b4:	20000c90 	.word	0x20000c90
 80041b8:	200007b8 	.word	0x200007b8
 80041bc:	200007b4 	.word	0x200007b4

080041c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <vTaskPlaceOnEventList+0x44>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3318      	adds	r3, #24
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fb3a 	bl	8002868 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041f4:	2101      	movs	r1, #1
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f000 fb88 	bl	800490c <prvAddCurrentTaskToDelayedList>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200007b4 	.word	0x200007b4

08004208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	617b      	str	r3, [r7, #20]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <vTaskPlaceOnEventListRestricted+0x54>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3318      	adds	r3, #24
 8004236:	4619      	mov	r1, r3
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7fe faf2 	bl	8002822 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68b8      	ldr	r0, [r7, #8]
 800424e:	f000 fb5d 	bl	800490c <prvAddCurrentTaskToDelayedList>
	}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200007b4 	.word	0x200007b4

08004260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60fb      	str	r3, [r7, #12]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3318      	adds	r3, #24
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fb21 	bl	80028d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <xTaskRemoveFromEventList+0xb0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11d      	bne.n	80042da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fb18 	bl	80028d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <xTaskRemoveFromEventList+0xb4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d903      	bls.n	80042bc <xTaskRemoveFromEventList+0x5c>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a16      	ldr	r2, [pc, #88]	; (8004314 <xTaskRemoveFromEventList+0xb4>)
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <xTaskRemoveFromEventList+0xb8>)
 80042ca:	441a      	add	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe faa5 	bl	8002822 <vListInsertEnd>
 80042d8:	e005      	b.n	80042e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3318      	adds	r3, #24
 80042de:	4619      	mov	r1, r3
 80042e0:	480e      	ldr	r0, [pc, #56]	; (800431c <xTaskRemoveFromEventList+0xbc>)
 80042e2:	f7fe fa9e 	bl	8002822 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <xTaskRemoveFromEventList+0xc0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d905      	bls.n	8004300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <xTaskRemoveFromEventList+0xc4>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e001      	b.n	8004304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004304:	697b      	ldr	r3, [r7, #20]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000cb0 	.word	0x20000cb0
 8004314:	20000c90 	.word	0x20000c90
 8004318:	200007b8 	.word	0x200007b8
 800431c:	20000c48 	.word	0x20000c48
 8004320:	200007b4 	.word	0x200007b4
 8004324:	20000c9c 	.word	0x20000c9c

08004328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <vTaskInternalSetTimeOutState+0x24>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <vTaskInternalSetTimeOutState+0x28>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000ca0 	.word	0x20000ca0
 8004350:	20000c8c 	.word	0x20000c8c

08004354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60fb      	str	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004396:	f000 ff11 	bl	80051bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <xTaskCheckForTimeOut+0xbc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d102      	bne.n	80043ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e023      	b.n	8004402 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <xTaskCheckForTimeOut+0xc0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d007      	beq.n	80043d6 <xTaskCheckForTimeOut+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e015      	b.n	8004402 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d20b      	bcs.n	80043f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff9b 	bl	8004328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	e004      	b.n	8004402 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004402:	f000 ff0b 	bl	800521c <vPortExitCritical>

	return xReturn;
 8004406:	69fb      	ldr	r3, [r7, #28]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000c8c 	.word	0x20000c8c
 8004414:	20000ca0 	.word	0x20000ca0

08004418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <vTaskMissedYield+0x14>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000c9c 	.word	0x20000c9c

08004430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004438:	f000 f852 	bl	80044e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <prvIdleTask+0x28>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d9f9      	bls.n	8004438 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <prvIdleTask+0x2c>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004454:	e7f0      	b.n	8004438 <prvIdleTask+0x8>
 8004456:	bf00      	nop
 8004458:	200007b8 	.word	0x200007b8
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	e00c      	b.n	8004486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <prvInitialiseTaskLists+0x60>)
 8004478:	4413      	add	r3, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe f9a6 	bl	80027cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b37      	cmp	r3, #55	; 0x37
 800448a:	d9ef      	bls.n	800446c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800448c:	480d      	ldr	r0, [pc, #52]	; (80044c4 <prvInitialiseTaskLists+0x64>)
 800448e:	f7fe f99d 	bl	80027cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004492:	480d      	ldr	r0, [pc, #52]	; (80044c8 <prvInitialiseTaskLists+0x68>)
 8004494:	f7fe f99a 	bl	80027cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004498:	480c      	ldr	r0, [pc, #48]	; (80044cc <prvInitialiseTaskLists+0x6c>)
 800449a:	f7fe f997 	bl	80027cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800449e:	480c      	ldr	r0, [pc, #48]	; (80044d0 <prvInitialiseTaskLists+0x70>)
 80044a0:	f7fe f994 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044a4:	480b      	ldr	r0, [pc, #44]	; (80044d4 <prvInitialiseTaskLists+0x74>)
 80044a6:	f7fe f991 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <prvInitialiseTaskLists+0x78>)
 80044ac:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <prvInitialiseTaskLists+0x64>)
 80044ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <prvInitialiseTaskLists+0x7c>)
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <prvInitialiseTaskLists+0x68>)
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200007b8 	.word	0x200007b8
 80044c4:	20000c18 	.word	0x20000c18
 80044c8:	20000c2c 	.word	0x20000c2c
 80044cc:	20000c48 	.word	0x20000c48
 80044d0:	20000c5c 	.word	0x20000c5c
 80044d4:	20000c74 	.word	0x20000c74
 80044d8:	20000c40 	.word	0x20000c40
 80044dc:	20000c44 	.word	0x20000c44

080044e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e6:	e019      	b.n	800451c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044e8:	f000 fe68 	bl	80051bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <prvCheckTasksWaitingTermination+0x50>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe f9ed 	bl	80028d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044fe:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <prvCheckTasksWaitingTermination+0x54>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3b01      	subs	r3, #1
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <prvCheckTasksWaitingTermination+0x54>)
 8004506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 8004510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004512:	f000 fe83 	bl	800521c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f810 	bl	800453c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e1      	bne.n	80044e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000c5c 	.word	0x20000c5c
 8004534:	20000c88 	.word	0x20000c88
 8004538:	20000c70 	.word	0x20000c70

0800453c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fff6 	bl	8005544 <vPortFree>
				vPortFree( pxTCB );
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fff3 	bl	8005544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800455e:	e018      	b.n	8004592 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004566:	2b01      	cmp	r3, #1
 8004568:	d103      	bne.n	8004572 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 ffea 	bl	8005544 <vPortFree>
	}
 8004570:	e00f      	b.n	8004592 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004578:	2b02      	cmp	r3, #2
 800457a:	d00a      	beq.n	8004592 <prvDeleteTCB+0x56>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60fb      	str	r3, [r7, #12]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <prvDeleteTCB+0x54>
	}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <prvResetNextTaskUnblockTime+0x40>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <prvResetNextTaskUnblockTime+0x14>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <prvResetNextTaskUnblockTime+0x16>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvResetNextTaskUnblockTime+0x44>)
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045be:	e008      	b.n	80045d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvResetNextTaskUnblockTime+0x40>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <prvResetNextTaskUnblockTime+0x44>)
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	20000c40 	.word	0x20000c40
 80045e0:	20000ca8 	.word	0x20000ca8

080045e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <xTaskGetSchedulerState+0x34>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045f2:	2301      	movs	r3, #1
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	e008      	b.n	800460a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f8:	4b08      	ldr	r3, [pc, #32]	; (800461c <xTaskGetSchedulerState+0x38>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004600:	2302      	movs	r3, #2
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	e001      	b.n	800460a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800460a:	687b      	ldr	r3, [r7, #4]
	}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000c94 	.word	0x20000c94
 800461c:	20000cb0 	.word	0x20000cb0

08004620 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d056      	beq.n	80046e4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <xTaskPriorityInherit+0xd0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d246      	bcs.n	80046d2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db06      	blt.n	800465a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <xTaskPriorityInherit+0xd0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6959      	ldr	r1, [r3, #20]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <xTaskPriorityInherit+0xd4>)
 800466c:	4413      	add	r3, r2
 800466e:	4299      	cmp	r1, r3
 8004670:	d101      	bne.n	8004676 <xTaskPriorityInherit+0x56>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xTaskPriorityInherit+0x58>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe f929 	bl	80028d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <xTaskPriorityInherit+0xd0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <xTaskPriorityInherit+0xd8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d903      	bls.n	80046a4 <xTaskPriorityInherit+0x84>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <xTaskPriorityInherit+0xd8>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <xTaskPriorityInherit+0xd4>)
 80046b2:	441a      	add	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe f8b1 	bl	8002822 <vListInsertEnd>
 80046c0:	e004      	b.n	80046cc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <xTaskPriorityInherit+0xd0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e008      	b.n	80046e4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <xTaskPriorityInherit+0xd0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d201      	bcs.n	80046e4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046e4:	68fb      	ldr	r3, [r7, #12]
	}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200007b4 	.word	0x200007b4
 80046f4:	200007b8 	.word	0x200007b8
 80046f8:	20000c90 	.word	0x20000c90

080046fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d056      	beq.n	80047c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <xTaskPriorityDisinherit+0xd0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d00a      	beq.n	8004732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60bb      	str	r3, [r7, #8]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	429a      	cmp	r2, r3
 8004764:	d02c      	beq.n	80047c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d128      	bne.n	80047c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f8b0 	bl	80028d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskPriorityDisinherit+0xd4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d903      	bls.n	80047a0 <xTaskPriorityDisinherit+0xa4>
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <xTaskPriorityDisinherit+0xd4>)
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <xTaskPriorityDisinherit+0xd8>)
 80047ae:	441a      	add	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f7fe f833 	bl	8002822 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200007b4 	.word	0x200007b4
 80047d0:	20000c90 	.word	0x20000c90
 80047d4:	200007b8 	.word	0x200007b8

080047d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d06f      	beq.n	80048d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60fb      	str	r3, [r7, #12]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d902      	bls.n	800481e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e002      	b.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	429a      	cmp	r2, r3
 800482c:	d050      	beq.n	80048d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d14b      	bne.n	80048d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	d10a      	bne.n	8004858 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db04      	blt.n	8004876 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6959      	ldr	r1, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004886:	4413      	add	r3, r2
 8004888:	4299      	cmp	r1, r3
 800488a:	d101      	bne.n	8004890 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01c      	beq.n	80048d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3304      	adds	r3, #4
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe f81c 	bl	80028d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d903      	bls.n	80048b4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048c2:	441a      	add	r2, r3
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7fd ffa9 	bl	8002822 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048d0:	bf00      	nop
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200007b4 	.word	0x200007b4
 80048dc:	200007b8 	.word	0x200007b8
 80048e0:	20000c90 	.word	0x20000c90

080048e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <pvTaskIncrementMutexHeldCount+0x24>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <pvTaskIncrementMutexHeldCount+0x24>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f6:	3201      	adds	r2, #1
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80048fa:	4b03      	ldr	r3, [pc, #12]	; (8004908 <pvTaskIncrementMutexHeldCount+0x24>)
 80048fc:	681b      	ldr	r3, [r3, #0]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	200007b4 	.word	0x200007b4

0800490c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004916:	4b21      	ldr	r3, [pc, #132]	; (800499c <prvAddCurrentTaskToDelayedList+0x90>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800491c:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3304      	adds	r3, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd ffd8 	bl	80028d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d10a      	bne.n	8004946 <prvAddCurrentTaskToDelayedList+0x3a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4819      	ldr	r0, [pc, #100]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004940:	f7fd ff6f 	bl	8002822 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004944:	e026      	b.n	8004994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d209      	bcs.n	8004972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495e:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3304      	adds	r3, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f7fd ff7c 	bl	8002868 <vListInsert>
}
 8004970:	e010      	b.n	8004994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004972:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fd ff72 	bl	8002868 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	d202      	bcs.n	8004994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000c8c 	.word	0x20000c8c
 80049a0:	200007b4 	.word	0x200007b4
 80049a4:	20000c74 	.word	0x20000c74
 80049a8:	20000c44 	.word	0x20000c44
 80049ac:	20000c40 	.word	0x20000c40
 80049b0:	20000ca8 	.word	0x20000ca8

080049b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049be:	f000 facb 	bl	8004f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <xTimerCreateTimerTask+0x80>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d021      	beq.n	8004a0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049d2:	1d3a      	adds	r2, r7, #4
 80049d4:	f107 0108 	add.w	r1, r7, #8
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd fedb 	bl	8002798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	9202      	str	r2, [sp, #8]
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	2302      	movs	r3, #2
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	460a      	mov	r2, r1
 80049f4:	4910      	ldr	r1, [pc, #64]	; (8004a38 <xTimerCreateTimerTask+0x84>)
 80049f6:	4811      	ldr	r0, [pc, #68]	; (8004a3c <xTimerCreateTimerTask+0x88>)
 80049f8:	f7fe ffdc 	bl	80039b4 <xTaskCreateStatic>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <xTimerCreateTimerTask+0x8c>)
 8004a00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <xTimerCreateTimerTask+0x8c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	613b      	str	r3, [r7, #16]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a2a:	697b      	ldr	r3, [r7, #20]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000ce4 	.word	0x20000ce4
 8004a38:	080058c8 	.word	0x080058c8
 8004a3c:	08004b61 	.word	0x08004b61
 8004a40:	20000ce8 	.word	0x20000ce8

08004a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <xTimerGenericCommand+0x98>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02a      	beq.n	8004ad0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	dc18      	bgt.n	8004abe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a8c:	f7ff fdaa 	bl	80045e4 <xTaskGetSchedulerState>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d109      	bne.n	8004aaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <xTimerGenericCommand+0x98>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f107 0110 	add.w	r1, r7, #16
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa2:	f7fe f8ed 	bl	8002c80 <xQueueGenericSend>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8004aa8:	e012      	b.n	8004ad0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <xTimerGenericCommand+0x98>)
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f107 0110 	add.w	r1, r7, #16
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f7fe f8e3 	bl	8002c80 <xQueueGenericSend>
 8004aba:	6278      	str	r0, [r7, #36]	; 0x24
 8004abc:	e008      	b.n	8004ad0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <xTimerGenericCommand+0x98>)
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f107 0110 	add.w	r1, r7, #16
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	f7fe f9d7 	bl	8002e7c <xQueueGenericSendFromISR>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000ce4 	.word	0x20000ce4

08004ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aea:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <prvProcessExpiredTimer+0x7c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fd feed 	bl	80028d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d122      	bne.n	8004b4c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	18d1      	adds	r1, r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 f8c8 	bl	8004ca8 <prvInsertTimerInActiveList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	2100      	movs	r1, #0
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f7ff ff8b 	bl	8004a44 <xTimerGenericCommand>
 8004b2e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	60fb      	str	r3, [r7, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	6978      	ldr	r0, [r7, #20]
 8004b52:	4798      	blx	r3
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000cdc 	.word	0x20000cdc

08004b60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f857 	bl	8004c20 <prvGetNextExpireTime>
 8004b72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4619      	mov	r1, r3
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f803 	bl	8004b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b7e:	f000 f8d5 	bl	8004d2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b82:	e7f1      	b.n	8004b68 <prvTimerTask+0x8>

08004b84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b8e:	f7ff f943 	bl	8003e18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f866 	bl	8004c68 <prvSampleTimeNow>
 8004b9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d130      	bne.n	8004c06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <prvProcessTimerOrBlockTask+0x3c>
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d806      	bhi.n	8004bc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bb2:	f7ff f93f 	bl	8003e34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff91 	bl	8004ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bbe:	e024      	b.n	8004c0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <prvProcessTimerOrBlockTask+0x90>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <prvProcessTimerOrBlockTask+0x94>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	f7fe feb1 	bl	800394c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bea:	f7ff f923 	bl	8003e34 <xTaskResumeAll>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <prvProcessTimerOrBlockTask+0x98>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
}
 8004c04:	e001      	b.n	8004c0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c06:	f7ff f915 	bl	8003e34 <xTaskResumeAll>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000ce0 	.word	0x20000ce0
 8004c18:	20000ce4 	.word	0x20000ce4
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <prvGetNextExpireTime+0x44>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <prvGetNextExpireTime+0x44>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e001      	b.n	8004c56 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000cdc 	.word	0x20000cdc

08004c68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c70:	f7ff f97e 	bl	8003f70 <xTaskGetTickCount>
 8004c74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <prvSampleTimeNow+0x3c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d205      	bcs.n	8004c8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c80:	f000 f908 	bl	8004e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c92:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <prvSampleTimeNow+0x3c>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c98:	68fb      	ldr	r3, [r7, #12]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000cec 	.word	0x20000cec

08004ca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d812      	bhi.n	8004cf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e01b      	b.n	8004d1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <prvInsertTimerInActiveList+0x7c>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7fd fdbb 	bl	8002868 <vListInsert>
 8004cf2:	e012      	b.n	8004d1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d206      	bcs.n	8004d0a <prvInsertTimerInActiveList+0x62>
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d302      	bcc.n	8004d0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e007      	b.n	8004d1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d0a:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <prvInsertTimerInActiveList+0x80>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f7fd fda7 	bl	8002868 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d1a:	697b      	ldr	r3, [r7, #20]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000ce0 	.word	0x20000ce0
 8004d28:	20000cdc 	.word	0x20000cdc

08004d2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d32:	e09d      	b.n	8004e70 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da18      	bge.n	8004d6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61fb      	str	r3, [r7, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d62:	6850      	ldr	r0, [r2, #4]
 8004d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d66:	6892      	ldr	r2, [r2, #8]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db7d      	blt.n	8004e6e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	3304      	adds	r3, #4
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fda8 	bl	80028d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d88:	463b      	mov	r3, r7
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ff6c 	bl	8004c68 <prvSampleTimeNow>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d86b      	bhi.n	8004e70 <prvProcessReceivedCommands+0x144>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <prvProcessReceivedCommands+0x74>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004dc9 	.word	0x08004dc9
 8004dac:	08004e71 	.word	0x08004e71
 8004db0:	08004e25 	.word	0x08004e25
 8004db4:	08004e5d 	.word	0x08004e5d
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dc9 	.word	0x08004dc9
 8004dc0:	08004e71 	.word	0x08004e71
 8004dc4:	08004e25 	.word	0x08004e25
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	18d1      	adds	r1, r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f7ff ff67 	bl	8004ca8 <prvInsertTimerInActiveList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d047      	beq.n	8004e70 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d13f      	bne.n	8004e70 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	441a      	add	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e02:	f7ff fe1f 	bl	8004a44 <xTimerGenericCommand>
 8004e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d130      	bne.n	8004e70 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61bb      	str	r3, [r7, #24]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	18d1      	adds	r1, r2, r3
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	f7ff ff27 	bl	8004ca8 <prvInsertTimerInActiveList>
					break;
 8004e5a:	e009      	b.n	8004e70 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e68:	f000 fb6c 	bl	8005544 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e6c:	e000      	b.n	8004e70 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <prvProcessReceivedCommands+0x164>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1d39      	adds	r1, r7, #4
 8004e76:	2200      	movs	r2, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe f925 	bl	80030c8 <xQueueReceive>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f af57 	bne.w	8004d34 <prvProcessReceivedCommands+0x8>
	}
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000ce4 	.word	0x20000ce4

08004e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e9a:	e045      	b.n	8004f28 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fd fd0f 	bl	80028d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d12e      	bne.n	8004f28 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d90e      	bls.n	8004efa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f7fd fcb8 	bl	8002868 <vListInsert>
 8004ef8:	e016      	b.n	8004f28 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	2100      	movs	r1, #0
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fd9d 	bl	8004a44 <xTimerGenericCommand>
 8004f0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1b4      	bne.n	8004e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <prvSwitchTimerLists+0xc0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <prvSwitchTimerLists+0xbc>)
 8004f3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f40:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <prvSwitchTimerLists+0xc0>)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6013      	str	r3, [r2, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000cdc 	.word	0x20000cdc
 8004f54:	20000ce0 	.word	0x20000ce0

08004f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f5e:	f000 f92d 	bl	80051bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <prvCheckForValidListAndQueue+0x60>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d120      	bne.n	8004fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f6a:	4814      	ldr	r0, [pc, #80]	; (8004fbc <prvCheckForValidListAndQueue+0x64>)
 8004f6c:	f7fd fc2e 	bl	80027cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f70:	4813      	ldr	r0, [pc, #76]	; (8004fc0 <prvCheckForValidListAndQueue+0x68>)
 8004f72:	f7fd fc2b 	bl	80027cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f76:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <prvCheckForValidListAndQueue+0x6c>)
 8004f78:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <prvCheckForValidListAndQueue+0x64>)
 8004f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <prvCheckForValidListAndQueue+0x70>)
 8004f7e:	4a10      	ldr	r2, [pc, #64]	; (8004fc0 <prvCheckForValidListAndQueue+0x68>)
 8004f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <prvCheckForValidListAndQueue+0x74>)
 8004f88:	4a11      	ldr	r2, [pc, #68]	; (8004fd0 <prvCheckForValidListAndQueue+0x78>)
 8004f8a:	2110      	movs	r1, #16
 8004f8c:	200a      	movs	r0, #10
 8004f8e:	f7fd fd35 	bl	80029fc <xQueueGenericCreateStatic>
 8004f92:	4603      	mov	r3, r0
 8004f94:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <prvCheckForValidListAndQueue+0x60>)
 8004f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <prvCheckForValidListAndQueue+0x60>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <prvCheckForValidListAndQueue+0x60>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <prvCheckForValidListAndQueue+0x7c>)
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe fc7e 	bl	80038a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fac:	f000 f936 	bl	800521c <vPortExitCritical>
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000ce4 	.word	0x20000ce4
 8004fbc:	20000cb4 	.word	0x20000cb4
 8004fc0:	20000cc8 	.word	0x20000cc8
 8004fc4:	20000cdc 	.word	0x20000cdc
 8004fc8:	20000ce0 	.word	0x20000ce0
 8004fcc:	20000d90 	.word	0x20000d90
 8004fd0:	20000cf0 	.word	0x20000cf0
 8004fd4:	080058d0 	.word	0x080058d0

08004fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3b04      	subs	r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0201 	bic.w	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3b04      	subs	r3, #4
 8005006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <pxPortInitialiseStack+0x54>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b14      	subs	r3, #20
 8005012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b20      	subs	r3, #32
 800501e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005020:	68fb      	ldr	r3, [r7, #12]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	08005031 	.word	0x08005031

08005030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <prvTaskExitError+0x54>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d00a      	beq.n	800505a <prvTaskExitError+0x2a>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <prvTaskExitError+0x28>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	60bb      	str	r3, [r7, #8]
}
 800506c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800506e:	bf00      	nop
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0fc      	beq.n	8005070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000001c 	.word	0x2000001c
	...

08005090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <pxCurrentTCBConst2>)
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800509a:	f380 8809 	msr	PSP, r0
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8811 	msr	BASEPRI, r0
 80050aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80050ae:	4770      	bx	lr

080050b0 <pxCurrentTCBConst2>:
 80050b0:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050b8:	4806      	ldr	r0, [pc, #24]	; (80050d4 <prvPortStartFirstTask+0x1c>)
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f380 8808 	msr	MSP, r0
 80050c2:	b662      	cpsie	i
 80050c4:	b661      	cpsie	f
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	df00      	svc	0
 80050d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050d2:	bf00      	nop
 80050d4:	e000ed08 	.word	0xe000ed08

080050d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050de:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <xPortStartScheduler+0xd0>)
 80050e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <xPortStartScheduler+0xd4>)
 8005104:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005108:	2207      	movs	r2, #7
 800510a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800510c:	e009      	b.n	8005122 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800510e:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005116:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d0ef      	beq.n	800510e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1c3 0307 	rsb	r3, r3, #7
 8005136:	2b04      	cmp	r3, #4
 8005138:	d00a      	beq.n	8005150 <xPortStartScheduler+0x78>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60bb      	str	r3, [r7, #8]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005158:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <xPortStartScheduler+0xd8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005162:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <xPortStartScheduler+0xd8>)
 8005164:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <xPortStartScheduler+0xdc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <xPortStartScheduler+0xdc>)
 8005174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <xPortStartScheduler+0xdc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <xPortStartScheduler+0xdc>)
 8005180:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005184:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005186:	f000 f8b9 	bl	80052fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <xPortStartScheduler+0xe0>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005190:	f7ff ff92 	bl	80050b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005194:	f7fe ffb8 	bl	8004108 <vTaskSwitchContext>
	prvTaskExitError();
 8005198:	f7ff ff4a 	bl	8005030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000e400 	.word	0xe000e400
 80051ac:	20000de0 	.word	0x20000de0
 80051b0:	20000de4 	.word	0x20000de4
 80051b4:	e000ed20 	.word	0xe000ed20
 80051b8:	2000001c 	.word	0x2000001c

080051bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	607b      	str	r3, [r7, #4]
}
 80051d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <vPortEnterCritical+0x58>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <vPortEnterCritical+0x58>)
 80051de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <vPortEnterCritical+0x58>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10f      	bne.n	8005208 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <vPortEnterCritical+0x5c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <vPortEnterCritical+0x4c>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	603b      	str	r3, [r7, #0]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <vPortEnterCritical+0x4a>
	}
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000001c 	.word	0x2000001c
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <vPortExitCritical+0x4c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <vPortExitCritical+0x24>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <vPortExitCritical+0x4c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <vPortExitCritical+0x4c>)
 8005248:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <vPortExitCritical+0x4c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <vPortExitCritical+0x42>
 8005252:	2300      	movs	r3, #0
 8005254:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f383 8811 	msr	BASEPRI, r3
}
 800525c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	2000001c 	.word	0x2000001c
 800526c:	00000000 	.word	0x00000000

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005280:	6010      	str	r0, [r2, #0]
 8005282:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005286:	f04f 0050 	mov.w	r0, #80	; 0x50
 800528a:	f380 8811 	msr	BASEPRI, r0
 800528e:	f7fe ff3b 	bl	8004108 <vTaskSwitchContext>
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6808      	ldr	r0, [r1, #0]
 80052a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052a6:	f380 8809 	msr	PSP, r0
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	4770      	bx	lr

080052b0 <pxCurrentTCBConst>:
 80052b0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f7fe fe5b 	bl	8003f8c <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <xPortSysTickHandler+0x40>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f383 8811 	msr	BASEPRI, r3
}
 80052ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <vPortSetupTimerInterrupt+0x30>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <vPortSetupTimerInterrupt+0x38>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a09      	ldr	r2, [pc, #36]	; (8005338 <vPortSetupTimerInterrupt+0x3c>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	4a08      	ldr	r2, [pc, #32]	; (800533c <vPortSetupTimerInterrupt+0x40>)
 800531a:	3b01      	subs	r3, #1
 800531c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531e:	4b03      	ldr	r3, [pc, #12]	; (800532c <vPortSetupTimerInterrupt+0x30>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	e000e010 	.word	0xe000e010
 8005330:	e000e018 	.word	0xe000e018
 8005334:	20000010 	.word	0x20000010
 8005338:	10624dd3 	.word	0x10624dd3
 800533c:	e000e014 	.word	0xe000e014

08005340 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005346:	f3ef 8305 	mrs	r3, IPSR
 800534a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d914      	bls.n	800537c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005352:	4a16      	ldr	r2, [pc, #88]	; (80053ac <vPortValidateInterruptPriority+0x6c>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800535c:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <vPortValidateInterruptPriority+0x70>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	7afa      	ldrb	r2, [r7, #11]
 8005362:	429a      	cmp	r2, r3
 8005364:	d20a      	bcs.n	800537c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	607b      	str	r3, [r7, #4]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <vPortValidateInterruptPriority+0x74>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <vPortValidateInterruptPriority+0x78>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d90a      	bls.n	80053a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	603b      	str	r3, [r7, #0]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <vPortValidateInterruptPriority+0x60>
	}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	e000e3f0 	.word	0xe000e3f0
 80053b0:	20000de0 	.word	0x20000de0
 80053b4:	e000ed0c 	.word	0xe000ed0c
 80053b8:	20000de4 	.word	0x20000de4

080053bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053c8:	f7fe fd26 	bl	8003e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053cc:	4b58      	ldr	r3, [pc, #352]	; (8005530 <pvPortMalloc+0x174>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d4:	f000 f910 	bl	80055f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053d8:	4b56      	ldr	r3, [pc, #344]	; (8005534 <pvPortMalloc+0x178>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 808e 	bne.w	8005502 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01d      	beq.n	8005428 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053ec:	2208      	movs	r2, #8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d014      	beq.n	8005428 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f023 0307 	bic.w	r3, r3, #7
 8005404:	3308      	adds	r3, #8
 8005406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <pvPortMalloc+0x6c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d069      	beq.n	8005502 <pvPortMalloc+0x146>
 800542e:	4b42      	ldr	r3, [pc, #264]	; (8005538 <pvPortMalloc+0x17c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d864      	bhi.n	8005502 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005438:	4b40      	ldr	r3, [pc, #256]	; (800553c <pvPortMalloc+0x180>)
 800543a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <pvPortMalloc+0x180>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005442:	e004      	b.n	800544e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <pvPortMalloc+0xa4>
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f1      	bne.n	8005444 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <pvPortMalloc+0x174>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	429a      	cmp	r2, r3
 8005468:	d04b      	beq.n	8005502 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2208      	movs	r2, #8
 8005470:	4413      	add	r3, r2
 8005472:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	2308      	movs	r3, #8
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	429a      	cmp	r2, r3
 800548a:	d91f      	bls.n	80054cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <pvPortMalloc+0xf8>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	613b      	str	r3, [r7, #16]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054c6:	69b8      	ldr	r0, [r7, #24]
 80054c8:	f000 f8f8 	bl	80056bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <pvPortMalloc+0x17c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <pvPortMalloc+0x17c>)
 80054d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <pvPortMalloc+0x17c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <pvPortMalloc+0x184>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d203      	bcs.n	80054ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <pvPortMalloc+0x17c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <pvPortMalloc+0x184>)
 80054ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <pvPortMalloc+0x178>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005502:	f7fe fc97 	bl	8003e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <pvPortMalloc+0x16a>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <pvPortMalloc+0x168>
	return pvReturn;
 8005526:	69fb      	ldr	r3, [r7, #28]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	200019f0 	.word	0x200019f0
 8005534:	200019fc 	.word	0x200019fc
 8005538:	200019f4 	.word	0x200019f4
 800553c:	200019e8 	.word	0x200019e8
 8005540:	200019f8 	.word	0x200019f8

08005544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d048      	beq.n	80055e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005556:	2308      	movs	r3, #8
 8005558:	425b      	negs	r3, r3
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <vPortFree+0xac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <vPortFree+0x44>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <vPortFree+0x62>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60bb      	str	r3, [r7, #8]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <vPortFree+0xac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d115      	bne.n	80055e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <vPortFree+0xac>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	401a      	ands	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055cc:	f7fe fc24 	bl	8003e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <vPortFree+0xb0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4413      	add	r3, r2
 80055da:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <vPortFree+0xb0>)
 80055dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055de:	6938      	ldr	r0, [r7, #16]
 80055e0:	f000 f86c 	bl	80056bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055e4:	f7fe fc26 	bl	8003e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200019fc 	.word	0x200019fc
 80055f4:	200019f4 	.word	0x200019f4

080055f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005602:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <prvHeapInit+0xac>)
 8005606:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3307      	adds	r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <prvHeapInit+0xac>)
 8005628:	4413      	add	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <prvHeapInit+0xb0>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005636:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <prvHeapInit+0xb0>)
 8005638:	2200      	movs	r2, #0
 800563a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4413      	add	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005644:	2208      	movs	r2, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <prvHeapInit+0xb4>)
 8005658:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <prvHeapInit+0xb4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005662:	4b12      	ldr	r3, [pc, #72]	; (80056ac <prvHeapInit+0xb4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <prvHeapInit+0xb4>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <prvHeapInit+0xb8>)
 8005686:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <prvHeapInit+0xbc>)
 800568e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <prvHeapInit+0xc0>)
 8005692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000de8 	.word	0x20000de8
 80056a8:	200019e8 	.word	0x200019e8
 80056ac:	200019f0 	.word	0x200019f0
 80056b0:	200019f8 	.word	0x200019f8
 80056b4:	200019f4 	.word	0x200019f4
 80056b8:	200019fc 	.word	0x200019fc

080056bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <prvInsertBlockIntoFreeList+0xa8>)
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e002      	b.n	80056d0 <prvInsertBlockIntoFreeList+0x14>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d8f7      	bhi.n	80056ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d108      	bne.n	80056fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d118      	bne.n	8005744 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <prvInsertBlockIntoFreeList+0xac>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d00d      	beq.n	800573a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	441a      	add	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e008      	b.n	800574c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <prvInsertBlockIntoFreeList+0xac>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e003      	b.n	800574c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d002      	beq.n	800575a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	200019e8 	.word	0x200019e8
 8005768:	200019f0 	.word	0x200019f0

0800576c <__libc_init_array>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	2600      	movs	r6, #0
 8005770:	4d0c      	ldr	r5, [pc, #48]	; (80057a4 <__libc_init_array+0x38>)
 8005772:	4c0d      	ldr	r4, [pc, #52]	; (80057a8 <__libc_init_array+0x3c>)
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	42a6      	cmp	r6, r4
 800577a:	d109      	bne.n	8005790 <__libc_init_array+0x24>
 800577c:	f000 f830 	bl	80057e0 <_init>
 8005780:	2600      	movs	r6, #0
 8005782:	4d0a      	ldr	r5, [pc, #40]	; (80057ac <__libc_init_array+0x40>)
 8005784:	4c0a      	ldr	r4, [pc, #40]	; (80057b0 <__libc_init_array+0x44>)
 8005786:	1b64      	subs	r4, r4, r5
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	42a6      	cmp	r6, r4
 800578c:	d105      	bne.n	800579a <__libc_init_array+0x2e>
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	f855 3b04 	ldr.w	r3, [r5], #4
 8005794:	4798      	blx	r3
 8005796:	3601      	adds	r6, #1
 8005798:	e7ee      	b.n	8005778 <__libc_init_array+0xc>
 800579a:	f855 3b04 	ldr.w	r3, [r5], #4
 800579e:	4798      	blx	r3
 80057a0:	3601      	adds	r6, #1
 80057a2:	e7f2      	b.n	800578a <__libc_init_array+0x1e>
 80057a4:	080059b0 	.word	0x080059b0
 80057a8:	080059b0 	.word	0x080059b0
 80057ac:	080059b0 	.word	0x080059b0
 80057b0:	080059b4 	.word	0x080059b4

080057b4 <memcpy>:
 80057b4:	440a      	add	r2, r1
 80057b6:	4291      	cmp	r1, r2
 80057b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057bc:	d100      	bne.n	80057c0 <memcpy+0xc>
 80057be:	4770      	bx	lr
 80057c0:	b510      	push	{r4, lr}
 80057c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c6:	4291      	cmp	r1, r2
 80057c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057cc:	d1f9      	bne.n	80057c2 <memcpy+0xe>
 80057ce:	bd10      	pop	{r4, pc}

080057d0 <memset>:
 80057d0:	4603      	mov	r3, r0
 80057d2:	4402      	add	r2, r0
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d100      	bne.n	80057da <memset+0xa>
 80057d8:	4770      	bx	lr
 80057da:	f803 1b01 	strb.w	r1, [r3], #1
 80057de:	e7f9      	b.n	80057d4 <memset+0x4>

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
