
BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005934  08005934  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005934  08005934  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005934  08005934  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  20000020  0800595c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a04  0800595c  00021a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011048  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  00031091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00033978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032cf  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e57  00000000  00000000  000389b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e344  00000000  00000000  0004980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7b52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e38  00000000  00000000  000d7ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080057a0 	.word	0x080057a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080057a0 	.word	0x080057a0

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd5a 	bl	8000c50 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd51 	bl	8000c50 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	080057b8 	.word	0x080057b8
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 fffe 	bl	8001450 <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000040 	.word	0x20000040
 8000460:	20000044 	.word	0x20000044

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb24 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f87c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8e4 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f8b4 	bl	80006b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("BTN don't push");
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <main+0xb8>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fe7e 	bl	8002268 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <main+0xbc>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ffb7 	bl	80024e4 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <main+0xc0>)
 800057a:	6013      	str	r3, [r2, #0]
  prevSemaphoreHandle = osSemaphoreNew(1, 1, NULL);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2001      	movs	r0, #1
 8000582:	f001 ffaf 	bl	80024e4 <osSemaphoreNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <main+0xc4>)
 800058a:	6013      	str	r3, [r2, #0]
  switchSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <main+0xbc>)
 800058e:	2100      	movs	r1, #0
 8000590:	2001      	movs	r0, #1
 8000592:	f001 ffa7 	bl	80024e4 <osSemaphoreNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <main+0xc8>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a1a      	ldr	r2, [pc, #104]	; (8000608 <main+0xcc>)
 800059e:	2100      	movs	r1, #0
 80005a0:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0xd0>)
 80005a2:	f001 fec7 	bl	8002334 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <main+0xd4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0xd8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0xdc>)
 80005b2:	f001 febf 	bl	8002334 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a18      	ldr	r2, [pc, #96]	; (800061c <main+0xe0>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <main+0xe4>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <main+0xe8>)
 80005c2:	f001 feb7 	bl	8002334 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <main+0xec>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTaskBTN, NULL, &holdLED_attributes);
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <main+0xf0>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <main+0xf4>)
 80005d2:	f001 feaf 	bl	8002334 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <main+0xf8>)
 80005da:	6013      	str	r3, [r2, #0]
  holdSwitchHandle = osThreadNew(LCDTaskSwitch, NULL, &holdLED_attributes);
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <main+0xf0>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4815      	ldr	r0, [pc, #84]	; (8000638 <main+0xfc>)
 80005e2:	f001 fea7 	bl	8002334 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <main+0x100>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe6e 	bl	80022cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xb4>
 80005f2:	bf00      	nop
 80005f4:	08005820 	.word	0x08005820
 80005f8:	0800590c 	.word	0x0800590c
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	200000a4 	.word	0x200000a4
 8000604:	200000a0 	.word	0x200000a0
 8000608:	0800587c 	.word	0x0800587c
 800060c:	080007cd 	.word	0x080007cd
 8000610:	20000098 	.word	0x20000098
 8000614:	080058a0 	.word	0x080058a0
 8000618:	080007dd 	.word	0x080007dd
 800061c:	200000a8 	.word	0x200000a8
 8000620:	080058c4 	.word	0x080058c4
 8000624:	08000911 	.word	0x08000911
 8000628:	200000ac 	.word	0x200000ac
 800062c:	080058e8 	.word	0x080058e8
 8000630:	0800098d 	.word	0x0800098d
 8000634:	200000b0 	.word	0x200000b0
 8000638:	080008a9 	.word	0x080008a9
 800063c:	200000b4 	.word	0x200000b4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f89e 	bl	8005790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f9f0 	bl	8001a5c <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000682:	f000 f9b7 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fc5e 	bl	8001f60 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f9a3 	bl	80009f4 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3740      	adds	r7, #64	; 0x40
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f000 fd67 	bl	80011c8 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f978 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000044 	.word	0x20000044
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_GPIO_Init+0xac>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xac>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_GPIO_Init+0xac>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_GPIO_Init+0xac>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xac>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xac>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4819      	ldr	r0, [pc, #100]	; (80007c4 <MX_GPIO_Init+0xb0>)
 8000760:	f000 fd19 	bl	8001196 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_GPIO_Init+0xb0>)
 800077e:	f000 fb6f 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000786:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xb4>)
 8000798:	f000 fb62 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800079c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0xb4>)
 80007b2:	f000 fb55 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40010c00 	.word	0x40010c00

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fe57 	bl	8002488 <osDelay>
 80007da:	e7fb      	b.n	80007d4 <StartDefaultTask+0x8>

080007dc <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    uint8_t last_stateSwitch = GPIO_PIN_RESET; // Исходное состояние - кнопка отпущена
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
    uint8_t last_stateBTN = GPIO_PIN_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73bb      	strb	r3, [r7, #14]
    for(;;)
    {
        uint8_t current_stateSwitch = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	4828      	ldr	r0, [pc, #160]	; (8000894 <buttonTask+0xb8>)
 80007f2:	f000 fcb9 	bl	8001168 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	737b      	strb	r3, [r7, #13]
        uint8_t current_stateBTN = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fe:	4825      	ldr	r0, [pc, #148]	; (8000894 <buttonTask+0xb8>)
 8000800:	f000 fcb2 	bl	8001168 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	733b      	strb	r3, [r7, #12]
        // Устанавливаем курсор на нужную позицию (пример: 13-й столбец, 3-я строка)

        HD44780_SetCursor(0,1);
 8000808:	2101      	movs	r1, #1
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fd3a 	bl	8000284 <HD44780_SetCursor>

        if(current_stateSwitch == GPIO_PIN_SET)
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d103      	bne.n	800081e <buttonTask+0x42>
        {
            HD44780_PrintStr("1"); // Вывод при положении 1
 8000816:	4820      	ldr	r0, [pc, #128]	; (8000898 <buttonTask+0xbc>)
 8000818:	f7ff fda5 	bl	8000366 <HD44780_PrintStr>
 800081c:	e002      	b.n	8000824 <buttonTask+0x48>
        }
        else
        {
            HD44780_PrintStr("0"); // Вывод при положении 0
 800081e:	481f      	ldr	r0, [pc, #124]	; (800089c <buttonTask+0xc0>)
 8000820:	f7ff fda1 	bl	8000366 <HD44780_PrintStr>

        }

        // Обработка изменения состояния
        if(current_stateSwitch != last_stateSwitch)
 8000824:	7b7a      	ldrb	r2, [r7, #13]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	429a      	cmp	r2, r3
 800082a:	d009      	beq.n	8000840 <buttonTask+0x64>
        {
            if(current_stateSwitch == GPIO_PIN_RESET)
 800082c:	7b7b      	ldrb	r3, [r7, #13]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d104      	bne.n	800083c <buttonTask+0x60>
            {
                osSemaphoreRelease(switchSemaphoreHandle);// семафор сбрасывается(увеличивается на единицу)
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <buttonTask+0xc4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f001 ff56 	bl	80026e8 <osSemaphoreRelease>
            }

            last_stateSwitch = current_stateSwitch;
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	73fb      	strb	r3, [r7, #15]
        }
        osDelay(50);
 8000840:	2032      	movs	r0, #50	; 0x32
 8000842:	f001 fe21 	bl	8002488 <osDelay>


        if(current_stateBTN == GPIO_PIN_SET)
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d103      	bne.n	8000854 <buttonTask+0x78>
                {
                    HD44780_PrintStr("1"); // Вывод при положении 1
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <buttonTask+0xbc>)
 800084e:	f7ff fd8a 	bl	8000366 <HD44780_PrintStr>
 8000852:	e002      	b.n	800085a <buttonTask+0x7e>
                }
                else
                {
                    HD44780_PrintStr("0"); // Вывод при положении 0
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <buttonTask+0xc0>)
 8000856:	f7ff fd86 	bl	8000366 <HD44780_PrintStr>
                }

                // Обработка изменения состояния
                if(current_stateBTN != last_stateBTN)
 800085a:	7b3a      	ldrb	r2, [r7, #12]
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	429a      	cmp	r2, r3
 8000860:	d009      	beq.n	8000876 <buttonTask+0x9a>
                {
                    if(current_stateBTN == GPIO_PIN_RESET)
 8000862:	7b3b      	ldrb	r3, [r7, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <buttonTask+0x96>
                    {
                        osSemaphoreRelease(buttonSemaphoreHandle);
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <buttonTask+0xc8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f001 ff3b 	bl	80026e8 <osSemaphoreRelease>
                    }

                    last_stateBTN = current_stateBTN;
 8000872:	7b3b      	ldrb	r3, [r7, #12]
 8000874:	73bb      	strb	r3, [r7, #14]
                }
                HD44780_PrintStr(switchSemaphoreHandle);
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <buttonTask+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd73 	bl	8000366 <HD44780_PrintStr>

                HD44780_PrintStr(buttonSemaphoreHandle);
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <buttonTask+0xc8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fd6e 	bl	8000366 <HD44780_PrintStr>

        osDelay(50); // Задержка для стабильности опроса
 800088a:	2032      	movs	r0, #50	; 0x32
 800088c:	f001 fdfc 	bl	8002488 <osDelay>
    {
 8000890:	e7ac      	b.n	80007ec <buttonTask+0x10>
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00
 8000898:	08005830 	.word	0x08005830
 800089c:	08005834 	.word	0x08005834
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	2000009c 	.word	0x2000009c

080008a8 <LCDTaskSwitch>:
    }
}

void LCDTaskSwitch(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	for(;;)
		{
		    if(osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY) == osOK)
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <LCDTaskSwitch+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 feaf 	bl	800261c <osSemaphoreAcquire>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d11b      	bne.n	80008fc <LCDTaskSwitch+0x54>
		    {
		        if(osSemaphoreAcquire(prevSemaphoreHandle, portMAX_DELAY) == osOK)
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <LCDTaskSwitch+0x60>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fea5 	bl	800261c <osSemaphoreAcquire>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d111      	bne.n	80008fc <LCDTaskSwitch+0x54>
		        {

		           HD44780_Clear();
 80008d8:	f7ff fcbe 	bl	8000258 <HD44780_Clear>
		            HD44780_SetCursor(0,0);
 80008dc:	2100      	movs	r1, #0
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fcd0 	bl	8000284 <HD44780_SetCursor>
		            HD44780_PrintStr("Switch press");
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <LCDTaskSwitch+0x64>)
 80008e6:	f7ff fd3e 	bl	8000366 <HD44780_PrintStr>
	                osDelay(2000);
 80008ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ee:	f001 fdcb 	bl	8002488 <osDelay>

		            // Освобождаем prevSemaphoreHandle после отсчета
		            osSemaphoreRelease(prevSemaphoreHandle);
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <LCDTaskSwitch+0x60>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fef6 	bl	80026e8 <osSemaphoreRelease>
		        }
		    }
		    osDelay(50);
 80008fc:	2032      	movs	r0, #50	; 0x32
 80008fe:	f001 fdc3 	bl	8002488 <osDelay>
		    if(osSemaphoreAcquire(switchSemaphoreHandle, portMAX_DELAY) == osOK)
 8000902:	e7d5      	b.n	80008b0 <LCDTaskSwitch+0x8>
 8000904:	200000a0 	.word	0x200000a0
 8000908:	200000a4 	.word	0x200000a4
 800090c:	08005838 	.word	0x08005838

08000910 <ledTask>:
		}
}

void ledTask(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <ledTask+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2164      	movs	r1, #100	; 0x64
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fe7a 	bl	800261c <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	4815      	ldr	r0, [pc, #84]	; (8000984 <ledTask+0x74>)
 800092e:	f000 fc1b 	bl	8001168 <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	73bb      	strb	r3, [r7, #14]

        if(button_state == GPIO_PIN_RESET)
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10c      	bne.n	8000956 <ledTask+0x46>
        {
            // Кнопка нажата — светодиод горит постоянно
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <ledTask+0x78>)
 8000944:	f000 fc27 	bl	8001196 <HAL_GPIO_WritePin>
            led_on = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]

            osDelay(5000);
 800094c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000950:	f001 fd9a 	bl	8002488 <osDelay>
 8000954:	e7e2      	b.n	800091c <ledTask+0xc>
        }
        else
        {
            led_on = !led_on;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (led_on) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf0c      	ite	eq
 800096a:	2301      	moveq	r3, #1
 800096c:	2300      	movne	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <ledTask+0x78>)
 8000978:	f000 fc0d 	bl	8001196 <HAL_GPIO_WritePin>
    {
 800097c:	e7ce      	b.n	800091c <ledTask+0xc>
 800097e:	bf00      	nop
 8000980:	2000009c 	.word	0x2000009c
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40011000 	.word	0x40011000

0800098c <lcdTaskBTN>:
    }
    osDelay(50);
}

void lcdTaskBTN(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <lcdTaskBTN+0x5c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fe3d 	bl	800261c <osSemaphoreAcquire>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d11b      	bne.n	80009e0 <lcdTaskBTN+0x54>
	    {
	        if(osSemaphoreAcquire(prevSemaphoreHandle, portMAX_DELAY) == osOK)
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <lcdTaskBTN+0x60>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fe33 	bl	800261c <osSemaphoreAcquire>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d111      	bne.n	80009e0 <lcdTaskBTN+0x54>
	        {

	           HD44780_Clear();
 80009bc:	f7ff fc4c 	bl	8000258 <HD44780_Clear>
	            HD44780_SetCursor(0,0);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fc5e 	bl	8000284 <HD44780_SetCursor>
	            HD44780_PrintStr("BTN press");
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <lcdTaskBTN+0x64>)
 80009ca:	f7ff fccc 	bl	8000366 <HD44780_PrintStr>
                osDelay(2000);
 80009ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d2:	f001 fd59 	bl	8002488 <osDelay>

	            // Освобождаем prevSemaphoreHandle после отсчета
	            osSemaphoreRelease(prevSemaphoreHandle);
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <lcdTaskBTN+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fe84 	bl	80026e8 <osSemaphoreRelease>
	        }
	    }
	    osDelay(50);
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f001 fd51 	bl	8002488 <osDelay>
	    if(osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY) == osOK)
 80009e6:	e7d5      	b.n	8000994 <lcdTaskBTN+0x8>
 80009e8:	2000009c 	.word	0x2000009c
 80009ec:	200000a4 	.word	0x200000a4
 80009f0:	08005848 	.word	0x08005848

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 f9e6 	bl	8000e0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_I2C_MspInit+0x90>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d132      	bne.n	8000ad6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_I2C_MspInit+0x98>)
 8000a9e:	f000 f9df 	bl	8000e60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010000 	.word	0x40010000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 f87b 	bl	8000c18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b22:	f003 fd3d 	bl	80045a0 <xTaskGetSchedulerState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d001      	beq.n	8000b30 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b2c:	f004 fba4 	bl	8005278 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b66:	f7ff ffe5 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f004 fddf 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff fce5 	bl	800053c <main>
  bx lr
 8000b72:	4770      	bx	lr
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b7c:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 8000b80:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b84:	20001a04 	.word	0x20001a04

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x28>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x28>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f92b 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff ff2a 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f935 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f90b 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	20000018 	.word	0x20000018
 8000c14:	20000014 	.word	0x20000014

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000018 	.word	0x20000018
 8000c38:	200000b8 	.word	0x200000b8

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	200000b8 	.word	0x200000b8

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000018 	.word	0x20000018

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff90 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff49 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff5e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb0 	bl	8000db4 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b08b      	sub	sp, #44	; 0x2c
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e72:	e169      	b.n	8001148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e74:	2201      	movs	r2, #1
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8158 	bne.w	8001142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a9a      	ldr	r2, [pc, #616]	; (8001100 <HAL_GPIO_Init+0x2a0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d05e      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000e9c:	4a98      	ldr	r2, [pc, #608]	; (8001100 <HAL_GPIO_Init+0x2a0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d875      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ea2:	4a98      	ldr	r2, [pc, #608]	; (8001104 <HAL_GPIO_Init+0x2a4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d058      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ea8:	4a96      	ldr	r2, [pc, #600]	; (8001104 <HAL_GPIO_Init+0x2a4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d86f      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eae:	4a96      	ldr	r2, [pc, #600]	; (8001108 <HAL_GPIO_Init+0x2a8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d052      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000eb4:	4a94      	ldr	r2, [pc, #592]	; (8001108 <HAL_GPIO_Init+0x2a8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d869      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eba:	4a94      	ldr	r2, [pc, #592]	; (800110c <HAL_GPIO_Init+0x2ac>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d04c      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ec0:	4a92      	ldr	r2, [pc, #584]	; (800110c <HAL_GPIO_Init+0x2ac>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d863      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ec6:	4a92      	ldr	r2, [pc, #584]	; (8001110 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d046      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a90      	ldr	r2, [pc, #576]	; (8001110 <HAL_GPIO_Init+0x2b0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d85d      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d82a      	bhi.n	8000f2c <HAL_GPIO_Init+0xcc>
 8000ed6:	2b12      	cmp	r3, #18
 8000ed8:	d859      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <HAL_GPIO_Init+0x80>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	08000f35 	.word	0x08000f35
 8000ee8:	08000f47 	.word	0x08000f47
 8000eec:	08000f89 	.word	0x08000f89
 8000ef0:	08000f8f 	.word	0x08000f8f
 8000ef4:	08000f8f 	.word	0x08000f8f
 8000ef8:	08000f8f 	.word	0x08000f8f
 8000efc:	08000f8f 	.word	0x08000f8f
 8000f00:	08000f8f 	.word	0x08000f8f
 8000f04:	08000f8f 	.word	0x08000f8f
 8000f08:	08000f8f 	.word	0x08000f8f
 8000f0c:	08000f8f 	.word	0x08000f8f
 8000f10:	08000f8f 	.word	0x08000f8f
 8000f14:	08000f8f 	.word	0x08000f8f
 8000f18:	08000f8f 	.word	0x08000f8f
 8000f1c:	08000f8f 	.word	0x08000f8f
 8000f20:	08000f8f 	.word	0x08000f8f
 8000f24:	08000f3d 	.word	0x08000f3d
 8000f28:	08000f51 	.word	0x08000f51
 8000f2c:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_GPIO_Init+0x2b4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f32:	e02c      	b.n	8000f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e029      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	3304      	adds	r3, #4
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e024      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	623b      	str	r3, [r7, #32]
          break;
 8000f4e:	e01f      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	330c      	adds	r3, #12
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e01a      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f62:	2304      	movs	r3, #4
 8000f64:	623b      	str	r3, [r7, #32]
          break;
 8000f66:	e013      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d105      	bne.n	8000f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f70:	2308      	movs	r3, #8
 8000f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	611a      	str	r2, [r3, #16]
          break;
 8000f7a:	e009      	b.n	8000f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	615a      	str	r2, [r3, #20]
          break;
 8000f86:	e003      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          break;
 8000f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d801      	bhi.n	8000f9a <HAL_GPIO_Init+0x13a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	e001      	b.n	8000f9e <HAL_GPIO_Init+0x13e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d802      	bhi.n	8000fac <HAL_GPIO_Init+0x14c>
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	e002      	b.n	8000fb2 <HAL_GPIO_Init+0x152>
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	3b08      	subs	r3, #8
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	210f      	movs	r1, #15
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	6a39      	ldr	r1, [r7, #32]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80b1 	beq.w	8001142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe0:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_GPIO_Init+0x2c0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1ec>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3f      	ldr	r2, [pc, #252]	; (8001124 <HAL_GPIO_Init+0x2c4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1e8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <HAL_GPIO_Init+0x2c8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1e4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3d      	ldr	r2, [pc, #244]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1e0>
 800103c:	2303      	movs	r3, #3
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001040:	2304      	movs	r3, #4
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 800104c:	2300      	movs	r3, #0
 800104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800105e:	492f      	ldr	r1, [pc, #188]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	492c      	ldr	r1, [pc, #176]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4928      	ldr	r1, [pc, #160]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8001090:	4013      	ands	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4922      	ldr	r1, [pc, #136]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	491e      	ldr	r1, [pc, #120]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	4918      	ldr	r1, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4914      	ldr	r1, [pc, #80]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	490e      	ldr	r1, [pc, #56]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60cb      	str	r3, [r1, #12]
 80010fc:	e021      	b.n	8001142 <HAL_GPIO_Init+0x2e2>
 80010fe:	bf00      	nop
 8001100:	10320000 	.word	0x10320000
 8001104:	10310000 	.word	0x10310000
 8001108:	10220000 	.word	0x10220000
 800110c:	10210000 	.word	0x10210000
 8001110:	10120000 	.word	0x10120000
 8001114:	10110000 	.word	0x10110000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_GPIO_Init+0x304>)
 800113e:	4013      	ands	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae8e 	bne.w	8000e74 <HAL_GPIO_Init+0x14>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e001      	b.n	800118a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	807b      	strh	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e12b      	b.n	8001432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fc2e 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2224      	movs	r2, #36	; 0x24
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800121a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800122a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800122c:	f000 ffea 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a81      	ldr	r2, [pc, #516]	; (800143c <HAL_I2C_Init+0x274>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d807      	bhi.n	800124c <HAL_I2C_Init+0x84>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4a80      	ldr	r2, [pc, #512]	; (8001440 <HAL_I2C_Init+0x278>)
 8001240:	4293      	cmp	r3, r2
 8001242:	bf94      	ite	ls
 8001244:	2301      	movls	r3, #1
 8001246:	2300      	movhi	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e006      	b.n	800125a <HAL_I2C_Init+0x92>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a7d      	ldr	r2, [pc, #500]	; (8001444 <HAL_I2C_Init+0x27c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	bf94      	ite	ls
 8001254:	2301      	movls	r3, #1
 8001256:	2300      	movhi	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0e7      	b.n	8001432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a78      	ldr	r2, [pc, #480]	; (8001448 <HAL_I2C_Init+0x280>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	430a      	orrs	r2, r1
 8001280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a6a      	ldr	r2, [pc, #424]	; (800143c <HAL_I2C_Init+0x274>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d802      	bhi.n	800129c <HAL_I2C_Init+0xd4>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	e009      	b.n	80012b0 <HAL_I2C_Init+0xe8>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_I2C_Init+0x284>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	3301      	adds	r3, #1
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	495c      	ldr	r1, [pc, #368]	; (800143c <HAL_I2C_Init+0x274>)
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d819      	bhi.n	8001304 <HAL_I2C_Init+0x13c>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e59      	subs	r1, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fbb1 f3f3 	udiv	r3, r1, r3
 80012de:	1c59      	adds	r1, r3, #1
 80012e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012e4:	400b      	ands	r3, r1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00a      	beq.n	8001300 <HAL_I2C_Init+0x138>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1e59      	subs	r1, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fe:	e051      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001300:	2304      	movs	r3, #4
 8001302:	e04f      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <HAL_I2C_Init+0x168>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e58      	subs	r0, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	3301      	adds	r3, #1
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	e012      	b.n	8001356 <HAL_I2C_Init+0x18e>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e58      	subs	r0, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	0099      	lsls	r1, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x196>
 800135a:	2301      	movs	r3, #1
 800135c:	e022      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10e      	bne.n	8001384 <HAL_I2C_Init+0x1bc>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1e58      	subs	r0, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	440b      	add	r3, r1
 8001374:	fbb0 f3f3 	udiv	r3, r0, r3
 8001378:	3301      	adds	r3, #1
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001382:	e00f      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1e58      	subs	r0, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	0099      	lsls	r1, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6911      	ldr	r1, [r2, #16]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68d2      	ldr	r2, [r2, #12]
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	000186a0 	.word	0x000186a0
 8001440:	001e847f 	.word	0x001e847f
 8001444:	003d08ff 	.word	0x003d08ff
 8001448:	431bde83 	.word	0x431bde83
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	817b      	strh	r3, [r7, #10]
 8001460:	4613      	mov	r3, r2
 8001462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fbea 	bl	8000c3c <HAL_GetTick>
 8001468:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b20      	cmp	r3, #32
 8001474:	f040 80e0 	bne.w	8001638 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2319      	movs	r3, #25
 800147e:	2201      	movs	r2, #1
 8001480:	4970      	ldr	r1, [pc, #448]	; (8001644 <HAL_I2C_Master_Transmit+0x1f4>)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f964 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
 8001490:	e0d3      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_I2C_Master_Transmit+0x50>
 800149c:	2302      	movs	r3, #2
 800149e:	e0cc      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d007      	beq.n	80014c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2221      	movs	r2, #33	; 0x21
 80014da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	893a      	ldrh	r2, [r7, #8]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <HAL_I2C_Master_Transmit+0x1f8>)
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001508:	8979      	ldrh	r1, [r7, #10]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a3a      	ldr	r2, [r7, #32]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f89c 	bl	800164c <I2C_MasterRequestWrite>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e08d      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001534:	e066      	b.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f9de 	bl	80018fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00d      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b04      	cmp	r3, #4
 800154c:	d107      	bne.n	800155e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b04      	cmp	r3, #4
 800159e:	d11b      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6a39      	ldr	r1, [r7, #32]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9ce 	bl	800197e <I2C_WaitOnBTFFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e01a      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d194      	bne.n	8001536 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	00100002 	.word	0x00100002
 8001648:	ffff0000 	.word	0xffff0000

0800164c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	460b      	mov	r3, r1
 800165a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d006      	beq.n	8001676 <I2C_MasterRequestWrite+0x2a>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <I2C_MasterRequestWrite+0x2a>
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001674:	d108      	bne.n	8001688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00b      	b.n	80016a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	2b12      	cmp	r3, #18
 800168e:	d107      	bne.n	80016a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f84f 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c6:	d103      	bne.n	80016d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e035      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016dc:	d108      	bne.n	80016f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	e01b      	b.n	8001728 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	11db      	asrs	r3, r3, #7
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0306 	and.w	r3, r3, #6
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f063 030f 	orn	r3, r3, #15
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <I2C_MasterRequestWrite+0xfc>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f875 	bl	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e010      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <I2C_MasterRequestWrite+0x100>)
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f865 	bl	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	00010008 	.word	0x00010008
 800174c:	00010002 	.word	0x00010002

08001750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001760:	e025      	b.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d021      	beq.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176a:	f7ff fa67 	bl	8000c3c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d302      	bcc.n	8001780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d116      	bne.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f043 0220 	orr.w	r2, r3, #32
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e023      	b.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10d      	bne.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4013      	ands	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf0c      	ite	eq
 80017ca:	2301      	moveq	r3, #1
 80017cc:	2300      	movne	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	e00c      	b.n	80017ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4013      	ands	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d0b6      	beq.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800180c:	e051      	b.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181c:	d123      	bne.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001836:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f043 0204 	orr.w	r2, r3, #4
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e046      	b.n	80018f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d021      	beq.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f9e5 	bl	8000c3c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d116      	bne.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e020      	b.n	80018f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10c      	bne.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4013      	ands	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	e00b      	b.n	80018ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	43da      	mvns	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d18d      	bne.n	800180e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001908:	e02d      	b.n	8001966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f878 	bl	8001a00 <I2C_IsAcknowledgeFailed>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e02d      	b.n	8001976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d021      	beq.n	8001966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7ff f98b 	bl	8000c3c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	429a      	cmp	r2, r3
 8001930:	d302      	bcc.n	8001938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e007      	b.n	8001976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001970:	2b80      	cmp	r3, #128	; 0x80
 8001972:	d1ca      	bne.n	800190a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800198a:	e02d      	b.n	80019e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f837 	bl	8001a00 <I2C_IsAcknowledgeFailed>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e02d      	b.n	80019f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a2:	d021      	beq.n	80019e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a4:	f7ff f94a 	bl	8000c3c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d302      	bcc.n	80019ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f043 0220 	orr.w	r2, r3, #32
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e007      	b.n	80019f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d1ca      	bne.n	800198c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d11b      	bne.n	8001a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0204 	orr.w	r2, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e272      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8087 	beq.w	8001b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d00c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a88:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d112      	bne.n	8001aba <HAL_RCC_OscConfig+0x5e>
 8001a94:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d10b      	bne.n	8001aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d06c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x12c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d168      	bne.n	8001b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e24c      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x76>
 8001ac4:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7f      	ldr	r2, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e02e      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b7b      	ldr	r3, [pc, #492]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0xbc>
 8001afe:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a71      	ldr	r2, [pc, #452]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001b18:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a67      	ldr	r2, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f880 	bl	8000c3c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f87c 	bl	8000c3c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e200      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xe4>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f86c 	bl	8000c3c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f868 	bl	8000c3c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1ec      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x10c>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b96:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x18c>
 8001bae:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x176>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c0      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4939      	ldr	r1, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x270>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f821 	bl	8000c3c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f81d 	bl	8000c3c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4927      	ldr	r1, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x270>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f800 	bl	8000c3c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7fe fffc 	bl	8000c3c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e180      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d03a      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d019      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ffe0 	bl	8000c3c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7fe ffdc 	bl	8000c3c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e160      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f000 fac4 	bl	800222c <RCC_Delay>
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe ffc6 	bl	8000c3c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7fe ffc2 	bl	8000c3c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d908      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e146      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	42420000 	.word	0x42420000
 8001cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e9      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a6 	beq.w	8001e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7fe ff83 	bl	8000c3c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe ff7f 	bl	8000c3c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e103      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x312>
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e02d      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x334>
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a66      	ldr	r2, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	e01c      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x356>
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a60      	ldr	r2, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe ff33 	bl	8000c3c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe ff2f 	bl	8000c3c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0b1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <HAL_RCC_OscConfig+0x37e>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe ff1d 	bl	8000c3c <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe ff19 	bl	8000c3c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e09b      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8087 	beq.w	8001f52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d061      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d146      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe feed 	bl	8000c3c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fee9 	bl	8000c3c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e06d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d108      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4921      	ldr	r1, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a19      	ldr	r1, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	491b      	ldr	r1, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe febd 	bl	8000c3c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe feb9 	bl	8000c3c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e03d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46a>
 8001ee4:	e035      	b.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fea6 	bl	8000c3c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fea2 	bl	8000c3c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e026      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x498>
 8001f12:	e01e      	b.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e019      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x500>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d0      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4965      	ldr	r1, [pc, #404]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	494d      	ldr	r1, [pc, #308]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d040      	beq.n	8002080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d115      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e073      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4936      	ldr	r1, [pc, #216]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe fdf4 	bl	8000c3c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fdf0 	bl	8000c3c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e053      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d210      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4922      	ldr	r1, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	490a      	ldr	r1, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1cc>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1d0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fd52 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	0800591c 	.word	0x0800591c
 800212c:	20000010 	.word	0x20000010
 8002130:	20000014 	.word	0x20000014

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b490      	push	{r4, r7}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800213c:	1d3c      	adds	r4, r7, #4
 800213e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002144:	f240 2301 	movw	r3, #513	; 0x201
 8002148:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x40>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x46>
 8002172:	e02b      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002176:	623b      	str	r3, [r7, #32]
      break;
 8002178:	e02b      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3328      	adds	r3, #40	; 0x28
 8002184:	443b      	add	r3, r7
 8002186:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800218a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	3328      	adds	r3, #40	; 0x28
 80021a2:	443b      	add	r3, r7
 80021a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ae:	fb03 f202 	mul.w	r2, r3, r2
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	e004      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	623b      	str	r3, [r7, #32]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ce:	623b      	str	r3, [r7, #32]
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc90      	pop	{r4, r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	08005854 	.word	0x08005854
 80021e4:	40021000 	.word	0x40021000
 80021e8:	007a1200 	.word	0x007a1200
 80021ec:	003d0900 	.word	0x003d0900

080021f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_RCC_GetHCLKFreq+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000010 	.word	0x20000010

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002208:	f7ff fff2 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	0800592c 	.word	0x0800592c

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000010 	.word	0x20000010
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226e:	f3ef 8305 	mrs	r3, IPSR
 8002272:	60bb      	str	r3, [r7, #8]
  return(result);
 8002274:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227a:	f3ef 8310 	mrs	r3, PRIMASK
 800227e:	607b      	str	r3, [r7, #4]
  return(result);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <osKernelInitialize+0x32>
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <osKernelInitialize+0x60>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d109      	bne.n	80022a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800228e:	f3ef 8311 	mrs	r3, BASEPRI
 8002292:	603b      	str	r3, [r7, #0]
  return(result);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800229a:	f06f 0305 	mvn.w	r3, #5
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e00c      	b.n	80022bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <osKernelInitialize+0x60>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <osKernelInitialize+0x60>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e002      	b.n	80022bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022bc:	68fb      	ldr	r3, [r7, #12]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	200000bc 	.word	0x200000bc

080022cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022d2:	f3ef 8305 	mrs	r3, IPSR
 80022d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80022d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022de:	f3ef 8310 	mrs	r3, PRIMASK
 80022e2:	607b      	str	r3, [r7, #4]
  return(result);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <osKernelStart+0x32>
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <osKernelStart+0x64>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d109      	bne.n	8002306 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022f2:	f3ef 8311 	mrs	r3, BASEPRI
 80022f6:	603b      	str	r3, [r7, #0]
  return(result);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <osKernelStart+0x3a>
    stat = osErrorISR;
 80022fe:	f06f 0305 	mvn.w	r3, #5
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e00e      	b.n	8002324 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <osKernelStart+0x64>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <osKernelStart+0x64>)
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002314:	f001 fcf8 	bl	8003d08 <vTaskStartScheduler>
      stat = osOK;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e002      	b.n	8002324 <osKernelStart+0x58>
    } else {
      stat = osError;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200000bc 	.word	0x200000bc

08002334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b092      	sub	sp, #72	; 0x48
 8002338:	af04      	add	r7, sp, #16
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002344:	f3ef 8305 	mrs	r3, IPSR
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8094 	bne.w	800247a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002352:	f3ef 8310 	mrs	r3, PRIMASK
 8002356:	623b      	str	r3, [r7, #32]
  return(result);
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 808d 	bne.w	800247a <osThreadNew+0x146>
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <osThreadNew+0x150>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d106      	bne.n	8002376 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002368:	f3ef 8311 	mrs	r3, BASEPRI
 800236c:	61fb      	str	r3, [r7, #28]
  return(result);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 8082 	bne.w	800247a <osThreadNew+0x146>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d07e      	beq.n	800247a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002380:	2318      	movs	r3, #24
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002384:	2300      	movs	r3, #0
 8002386:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002388:	f107 031b 	add.w	r3, r7, #27
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d045      	beq.n	8002426 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <osThreadNew+0x74>
        name = attr->name;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <osThreadNew+0x9a>
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	2b38      	cmp	r3, #56	; 0x38
 80023c0:	d805      	bhi.n	80023ce <osThreadNew+0x9a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <osThreadNew+0x9e>
        return (NULL);
 80023ce:	2300      	movs	r3, #0
 80023d0:	e054      	b.n	800247c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <osThreadNew+0xd4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b5b      	cmp	r3, #91	; 0x5b
 80023f0:	d90a      	bls.n	8002408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <osThreadNew+0xd4>
        mem = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
 8002406:	e010      	b.n	800242a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <osThreadNew+0xf6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <osThreadNew+0xf6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <osThreadNew+0xf6>
          mem = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
 8002424:	e001      	b.n	800242a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b01      	cmp	r3, #1
 800242e:	d110      	bne.n	8002452 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f001 fa92 	bl	8003970 <xTaskCreateStatic>
 800244c:	4603      	mov	r3, r0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e013      	b.n	800247a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d110      	bne.n	800247a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	b29a      	uxth	r2, r3
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f001 fadc 	bl	8003a28 <xTaskCreate>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <osThreadNew+0x146>
          hTask = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800247a:	697b      	ldr	r3, [r7, #20]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3738      	adds	r7, #56	; 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200000bc 	.word	0x200000bc

08002488 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002490:	f3ef 8305 	mrs	r3, IPSR
 8002494:	613b      	str	r3, [r7, #16]
  return(result);
 8002496:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249c:	f3ef 8310 	mrs	r3, PRIMASK
 80024a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <osDelay+0x34>
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <osDelay+0x58>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d109      	bne.n	80024c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024b0:	f3ef 8311 	mrs	r3, BASEPRI
 80024b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <osDelay+0x3c>
    stat = osErrorISR;
 80024bc:	f06f 0305 	mvn.w	r3, #5
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e007      	b.n	80024d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f001 fbe6 	bl	8003ca0 <vTaskDelay>
    }
  }

  return (stat);
 80024d4:	697b      	ldr	r3, [r7, #20]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200000bc 	.word	0x200000bc

080024e4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f4:	f3ef 8305 	mrs	r3, IPSR
 80024f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80024fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8086 	bne.w	800260e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002502:	f3ef 8310 	mrs	r3, PRIMASK
 8002506:	617b      	str	r3, [r7, #20]
  return(result);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d17f      	bne.n	800260e <osSemaphoreNew+0x12a>
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <osSemaphoreNew+0x134>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d105      	bne.n	8002522 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002516:	f3ef 8311 	mrs	r3, BASEPRI
 800251a:	613b      	str	r3, [r7, #16]
  return(result);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d175      	bne.n	800260e <osSemaphoreNew+0x12a>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d072      	beq.n	800260e <osSemaphoreNew+0x12a>
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d86e      	bhi.n	800260e <osSemaphoreNew+0x12a>
    mem = -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <osSemaphoreNew+0x6e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b4f      	cmp	r3, #79	; 0x4f
 800254a:	d902      	bls.n	8002552 <osSemaphoreNew+0x6e>
        mem = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	e00c      	b.n	800256c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <osSemaphoreNew+0x88>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <osSemaphoreNew+0x88>
          mem = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	e001      	b.n	800256c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d04c      	beq.n	800260e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d128      	bne.n	80025cc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10a      	bne.n	8002596 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2203      	movs	r2, #3
 8002586:	9200      	str	r2, [sp, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fa4d 	bl	8002a2c <xQueueGenericCreateStatic>
 8002592:	6278      	str	r0, [r7, #36]	; 0x24
 8002594:	e005      	b.n	80025a2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002596:	2203      	movs	r2, #3
 8002598:	2100      	movs	r1, #0
 800259a:	2001      	movs	r0, #1
 800259c:	f000 fabd 	bl	8002b1a <xQueueGenericCreate>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d022      	beq.n	80025ee <osSemaphoreNew+0x10a>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01f      	beq.n	80025ee <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80025ae:	2300      	movs	r3, #0
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025b6:	f000 fb7b 	bl	8002cb0 <xQueueGenericSend>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d016      	beq.n	80025ee <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80025c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c2:	f001 f805 	bl	80035d0 <vQueueDelete>
            hSemaphore = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	e010      	b.n	80025ee <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d108      	bne.n	80025e4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fafe 	bl	8002bdc <xQueueCreateCountingSemaphoreStatic>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
 80025e2:	e004      	b.n	80025ee <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fb2f 	bl	8002c4a <xQueueCreateCountingSemaphore>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <osSemaphoreNew+0x11e>
          name = attr->name;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	e001      	b.n	8002606 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002606:	69f9      	ldr	r1, [r7, #28]
 8002608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800260a:	f001 f92b 	bl	8003864 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200000bc 	.word	0x200000bc

0800261c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002634:	f06f 0303 	mvn.w	r3, #3
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e04b      	b.n	80026d4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800263c:	f3ef 8305 	mrs	r3, IPSR
 8002640:	617b      	str	r3, [r7, #20]
  return(result);
 8002642:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002648:	f3ef 8310 	mrs	r3, PRIMASK
 800264c:	613b      	str	r3, [r7, #16]
  return(result);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <osSemaphoreAcquire+0x4c>
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <osSemaphoreAcquire+0xc4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d128      	bne.n	80026ae <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800265c:	f3ef 8311 	mrs	r3, BASEPRI
 8002660:	60fb      	str	r3, [r7, #12]
  return(result);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d022      	beq.n	80026ae <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800266e:	f06f 0303 	mvn.w	r3, #3
 8002672:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002674:	e02d      	b.n	80026d2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	461a      	mov	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	69b8      	ldr	r0, [r7, #24]
 8002684:	f000 ff24 	bl	80034d0 <xQueueReceiveFromISR>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d003      	beq.n	8002696 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800268e:	f06f 0302 	mvn.w	r3, #2
 8002692:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002694:	e01d      	b.n	80026d2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01a      	beq.n	80026d2 <osSemaphoreAcquire+0xb6>
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <osSemaphoreAcquire+0xc8>)
 800269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80026ac:	e011      	b.n	80026d2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	69b8      	ldr	r0, [r7, #24]
 80026b2:	f000 fe01 	bl	80032b8 <xQueueSemaphoreTake>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d00b      	beq.n	80026d4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80026c2:	f06f 0301 	mvn.w	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	e004      	b.n	80026d4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80026ca:	f06f 0302 	mvn.w	r3, #2
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e000      	b.n	80026d4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80026d2:	bf00      	nop
      }
    }
  }

  return (stat);
 80026d4:	69fb      	ldr	r3, [r7, #28]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200000bc 	.word	0x200000bc
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80026fe:	f06f 0303 	mvn.w	r3, #3
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e03e      	b.n	8002784 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002706:	f3ef 8305 	mrs	r3, IPSR
 800270a:	617b      	str	r3, [r7, #20]
  return(result);
 800270c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002712:	f3ef 8310 	mrs	r3, PRIMASK
 8002716:	613b      	str	r3, [r7, #16]
  return(result);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <osSemaphoreRelease+0x4a>
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <osSemaphoreRelease+0xa8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d120      	bne.n	8002768 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002726:	f3ef 8311 	mrs	r3, BASEPRI
 800272a:	60fb      	str	r3, [r7, #12]
  return(result);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01a      	beq.n	8002768 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4619      	mov	r1, r3
 800273c:	69b8      	ldr	r0, [r7, #24]
 800273e:	f000 fc4d 	bl	8002fdc <xQueueGiveFromISR>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d003      	beq.n	8002750 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8002748:	f06f 0302 	mvn.w	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800274e:	e018      	b.n	8002782 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <osSemaphoreRelease+0x9a>
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <osSemaphoreRelease+0xac>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002766:	e00c      	b.n	8002782 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002768:	2300      	movs	r3, #0
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	69b8      	ldr	r0, [r7, #24]
 8002770:	f000 fa9e 	bl	8002cb0 <xQueueGenericSend>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d004      	beq.n	8002784 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800277a:	f06f 0302 	mvn.w	r3, #2
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e000      	b.n	8002784 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002782:	bf00      	nop
    }
  }

  return (stat);
 8002784:	69fb      	ldr	r3, [r7, #28]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200000bc 	.word	0x200000bc
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <vApplicationGetIdleTaskMemory+0x28>)
 80027a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	200000c0 	.word	0x200000c0
 80027c4:	2000011c 	.word	0x2000011c

080027c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <vApplicationGetTimerTaskMemory+0x30>)
 80027de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000031c 	.word	0x2000031c
 80027f8:	20000378 	.word	0x20000378

080027fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 0208 	add.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0208 	add.w	r2, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0208 	add.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e00c      	b.n	80028d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3308      	adds	r3, #8
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e002      	b.n	80028c6 <vListInsert+0x2e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d2f6      	bcs.n	80028c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6852      	ldr	r2, [r2, #4]
 8002928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d103      	bne.n	800293c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
	...

0800295c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002986:	f002 fbf9 	bl	800517c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	441a      	add	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	3b01      	subs	r3, #1
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	441a      	add	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d114      	bne.n	8002a06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01a      	beq.n	8002a1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3310      	adds	r3, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fc17 	bl	800421c <xTaskRemoveFromEventList>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <xQueueGenericReset+0xcc>)
 80029f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	e009      	b.n	8002a1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3310      	adds	r3, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fef6 	bl	80027fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3324      	adds	r3, #36	; 0x24
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fef1 	bl	80027fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a1a:	f002 fbdf 	bl	80051dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <xQueueGenericCreateStatic+0x52>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <xQueueGenericCreateStatic+0x56>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <xQueueGenericCreateStatic+0x58>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	623b      	str	r3, [r7, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <xQueueGenericCreateStatic+0x7e>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <xQueueGenericCreateStatic+0x82>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericCreateStatic+0x84>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	61fb      	str	r3, [r7, #28]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aca:	2350      	movs	r3, #80	; 0x50
 8002acc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d00a      	beq.n	8002aea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	61bb      	str	r3, [r7, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002afc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f843 	bl	8002b96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3730      	adds	r7, #48	; 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	; 0x28
 8002b1e:	af02      	add	r7, sp, #8
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	613b      	str	r3, [r7, #16]
}
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e004      	b.n	8002b5a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3350      	adds	r3, #80	; 0x50
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fc0c 	bl	800537c <pvPortMalloc>
 8002b64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00f      	beq.n	8002b8c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	3350      	adds	r3, #80	; 0x50
 8002b70:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b7a:	79fa      	ldrb	r2, [r7, #7]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f805 	bl	8002b96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e002      	b.n	8002bb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	69b8      	ldr	r0, [r7, #24]
 8002bc8:	f7ff fec8 	bl	800295c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	61bb      	str	r3, [r7, #24]
}
 8002c00:	bf00      	nop
 8002c02:	e7fe      	b.n	8002c02 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d90a      	bls.n	8002c22 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	617b      	str	r3, [r7, #20]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c22:	2302      	movs	r3, #2
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fefd 	bl	8002a2c <xQueueGenericCreateStatic>
 8002c32:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c40:	69fb      	ldr	r3, [r7, #28]
	}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	613b      	str	r3, [r7, #16]
}
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d90a      	bls.n	8002c8e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	60fb      	str	r3, [r7, #12]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c8e:	2202      	movs	r2, #2
 8002c90:	2100      	movs	r1, #0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff41 	bl	8002b1a <xQueueGenericCreate>
 8002c98:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ca6:	697b      	ldr	r3, [r7, #20]
	}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <xQueueGenericSend+0x40>
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <xQueueGenericSend+0x44>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <xQueueGenericSend+0x46>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xQueueGenericSend+0x60>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d103      	bne.n	8002d1e <xQueueGenericSend+0x6e>
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <xQueueGenericSend+0x72>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <xQueueGenericSend+0x74>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	623b      	str	r3, [r7, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d3e:	f001 fc2f 	bl	80045a0 <xTaskGetSchedulerState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xQueueGenericSend+0x9e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueGenericSend+0xa2>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueGenericSend+0xa4>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61fb      	str	r3, [r7, #28]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d6e:	f002 fa05 	bl	800517c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <xQueueGenericSend+0xd4>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d129      	bne.n	8002dd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d8a:	f000 fc5b 	bl	8003644 <prvCopyDataToQueue>
 8002d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fa3d 	bl	800421c <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	e00a      	b.n	8002dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dd0:	f002 fa04 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e063      	b.n	8002ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dde:	f002 f9fd 	bl	80051dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e05c      	b.n	8002ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 fa77 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df6:	2301      	movs	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dfa:	f002 f9ef 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dfe:	f000 ffe9 	bl	8003dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e02:	f002 f9bb 	bl	800517c <vPortEnterCritical>
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <xQueueGenericSend+0x16c>
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d103      	bne.n	8002e32 <xQueueGenericSend+0x182>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e32:	f002 f9d3 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fa66 	bl	8004310 <xTaskCheckForTimeOut>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d124      	bne.n	8002e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4c:	f000 fcf2 	bl	8003834 <prvIsQueueFull>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	3310      	adds	r3, #16
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f98c 	bl	800417c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e66:	f000 fc7d 	bl	8003764 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e6a:	f000 ffc1 	bl	8003df0 <xTaskResumeAll>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af7c 	bne.w	8002d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	e772      	b.n	8002d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 fc6b 	bl	8003764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e8e:	f000 ffaf 	bl	8003df0 <xTaskResumeAll>
 8002e92:	e76c      	b.n	8002d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e96:	f000 fc65 	bl	8003764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e9a:	f000 ffa9 	bl	8003df0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e9e:	2300      	movs	r3, #0
		}
	}
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <xQueueGenericSendFromISR+0x3c>
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <xQueueGenericSendFromISR+0x40>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <xQueueGenericSendFromISR+0x42>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10a      	bne.n	8002f08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	623b      	str	r3, [r7, #32]
}
 8002f04:	bf00      	nop
 8002f06:	e7fe      	b.n	8002f06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d103      	bne.n	8002f16 <xQueueGenericSendFromISR+0x6a>
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericSendFromISR+0x6e>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericSendFromISR+0x70>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61fb      	str	r3, [r7, #28]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f36:	f002 f9e3 	bl	8005300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	61ba      	str	r2, [r7, #24]
 8002f50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <xQueueGenericSendFromISR+0xbc>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d12c      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f78:	f000 fb64 	bl	8003644 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d112      	bne.n	8002fac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	3324      	adds	r3, #36	; 0x24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f001 f942 	bl	800421c <xTaskRemoveFromEventList>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e007      	b.n	8002fbc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002fc0:	e001      	b.n	8002fc6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3738      	adds	r7, #56	; 0x38
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	623b      	str	r3, [r7, #32]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <xQueueGiveFromISR+0x48>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	61fb      	str	r3, [r7, #28]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueGiveFromISR+0x58>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueGiveFromISR+0x5c>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueGiveFromISR+0x5e>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueGiveFromISR+0x78>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	61bb      	str	r3, [r7, #24]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003054:	f002 f954 	bl	8005300 <vPortValidateInterruptPriority>
	__asm volatile
 8003058:	f3ef 8211 	mrs	r2, BASEPRI
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	617a      	str	r2, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003070:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003080:	429a      	cmp	r2, r3
 8003082:	d22b      	bcs.n	80030dc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d112      	bne.n	80030c6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d016      	beq.n	80030d6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 f8b5 	bl	800421c <xTaskRemoveFromEventList>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ca:	3301      	adds	r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	b25a      	sxtb	r2, r3
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030d6:	2301      	movs	r3, #1
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	e001      	b.n	80030e0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f383 8811 	msr	BASEPRI, r3
}
 80030ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3738      	adds	r7, #56	; 0x38
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <xQueueReceive+0x30>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	623b      	str	r3, [r7, #32]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <xQueueReceive+0x3e>
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <xQueueReceive+0x42>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueReceive+0x44>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueReceive+0x5e>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	61fb      	str	r3, [r7, #28]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003156:	f001 fa23 	bl	80045a0 <xTaskGetSchedulerState>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <xQueueReceive+0x6e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueReceive+0x72>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueReceive+0x74>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueReceive+0x8e>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	61bb      	str	r3, [r7, #24]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003186:	f001 fff9 	bl	800517c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01f      	beq.n	80031d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319a:	f000 fabd 	bl	8003718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00f      	beq.n	80031ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	3310      	adds	r3, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f832 	bl	800421c <xTaskRemoveFromEventList>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <xQueueReceive+0x1bc>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ce:	f002 f805 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e069      	b.n	80032aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031dc:	f001 fffe 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e062      	b.n	80032aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f878 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f8:	f001 fff0 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031fc:	f000 fdea 	bl	8003dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003200:	f001 ffbc 	bl	800517c <vPortEnterCritical>
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320a:	b25b      	sxtb	r3, r3
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d103      	bne.n	800321a <xQueueReceive+0x122>
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003220:	b25b      	sxtb	r3, r3
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d103      	bne.n	8003230 <xQueueReceive+0x138>
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003230:	f001 ffd4 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003234:	1d3a      	adds	r2, r7, #4
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f867 	bl	8004310 <xTaskCheckForTimeOut>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d123      	bne.n	8003290 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324a:	f000 fadd 	bl	8003808 <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	3324      	adds	r3, #36	; 0x24
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 ff8d 	bl	800417c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f000 fa7e 	bl	8003764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003268:	f000 fdc2 	bl	8003df0 <xTaskResumeAll>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d189      	bne.n	8003186 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <xQueueReceive+0x1bc>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	e780      	b.n	8003186 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003286:	f000 fa6d 	bl	8003764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800328a:	f000 fdb1 	bl	8003df0 <xTaskResumeAll>
 800328e:	e77a      	b.n	8003186 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003292:	f000 fa67 	bl	8003764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003296:	f000 fdab 	bl	8003df0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800329a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329c:	f000 fab4 	bl	8003808 <prvIsQueueEmpty>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f43f af6f 	beq.w	8003186 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	; 0x38
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	623b      	str	r3, [r7, #32]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	61fb      	str	r3, [r7, #28]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003308:	f001 f94a 	bl	80045a0 <xTaskGetSchedulerState>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <xQueueSemaphoreTake+0x60>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <xQueueSemaphoreTake+0x64>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <xQueueSemaphoreTake+0x66>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61bb      	str	r3, [r7, #24]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003338:	f001 ff20 	bl	800517c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d024      	beq.n	8003392 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003358:	f001 faa2 	bl	80048a0 <pvTaskIncrementMutexHeldCount>
 800335c:	4602      	mov	r2, r0
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00f      	beq.n	800338a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	3310      	adds	r3, #16
 800336e:	4618      	mov	r0, r3
 8003370:	f000 ff54 	bl	800421c <xTaskRemoveFromEventList>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <xQueueSemaphoreTake+0x214>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800338a:	f001 ff27 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 800338e:	2301      	movs	r3, #1
 8003390:	e097      	b.n	80034c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	617b      	str	r3, [r7, #20]
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033b4:	f001 ff12 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e082      	b.n	80034c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ff8c 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033d0:	f001 ff04 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033d4:	f000 fcfe 	bl	8003dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033d8:	f001 fed0 	bl	800517c <vPortEnterCritical>
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d103      	bne.n	80033f2 <xQueueSemaphoreTake+0x13a>
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d103      	bne.n	8003408 <xQueueSemaphoreTake+0x150>
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003408:	f001 fee8 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800340c:	463a      	mov	r2, r7
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff7b 	bl	8004310 <xTaskCheckForTimeOut>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d132      	bne.n	8003486 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003422:	f000 f9f1 	bl	8003808 <prvIsQueueEmpty>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d026      	beq.n	800347a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003434:	f001 fea2 	bl	800517c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f8cd 	bl	80045dc <xTaskPriorityInherit>
 8003442:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003444:	f001 feca 	bl	80051dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fe93 	bl	800417c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003458:	f000 f984 	bl	8003764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800345c:	f000 fcc8 	bl	8003df0 <xTaskResumeAll>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f47f af68 	bne.w	8003338 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <xQueueSemaphoreTake+0x214>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	e75e      	b.n	8003338 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800347a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800347c:	f000 f972 	bl	8003764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003480:	f000 fcb6 	bl	8003df0 <xTaskResumeAll>
 8003484:	e758      	b.n	8003338 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003488:	f000 f96c 	bl	8003764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800348c:	f000 fcb0 	bl	8003df0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003492:	f000 f9b9 	bl	8003808 <prvIsQueueEmpty>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f43f af4d 	beq.w	8003338 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80034a4:	f001 fe6a 	bl	800517c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034aa:	f000 f8b4 	bl	8003616 <prvGetDisinheritPriorityAfterTimeout>
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f96c 	bl	8004794 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034bc:	f001 fe8e 	bl	80051dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3738      	adds	r7, #56	; 0x38
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	623b      	str	r3, [r7, #32]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <xQueueReceiveFromISR+0x3a>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <xQueueReceiveFromISR+0x3e>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <xQueueReceiveFromISR+0x40>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	61fb      	str	r3, [r7, #28]
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800352a:	f001 fee9 	bl	8005300 <vPortValidateInterruptPriority>
	__asm volatile
 800352e:	f3ef 8211 	mrs	r2, BASEPRI
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	61ba      	str	r2, [r7, #24]
 8003544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02f      	beq.n	80035b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003564:	f000 f8d8 	bl	8003718 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	1e5a      	subs	r2, r3, #1
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d112      	bne.n	80035a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	3310      	adds	r3, #16
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fe48 	bl	800421c <xTaskRemoveFromEventList>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e007      	b.n	80035b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a4:	3301      	adds	r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	b25a      	sxtb	r2, r3
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80035b0:	2301      	movs	r3, #1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
 80035b4:	e001      	b.n	80035ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f383 8811 	msr	BASEPRI, r3
}
 80035c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3738      	adds	r7, #56	; 0x38
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <vQueueDelete+0x28>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	60bb      	str	r3, [r7, #8]
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f95b 	bl	80038b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f001 ff7b 	bl	8005504 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e001      	b.n	8003638 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003638:	68fb      	ldr	r3, [r7, #12]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d14d      	bne.n	8003706 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f822 	bl	80046b8 <xTaskPriorityDisinherit>
 8003674:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	e043      	b.n	8003706 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d119      	bne.n	80036b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6898      	ldr	r0, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	461a      	mov	r2, r3
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	f002 f870 	bl	8005774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d32b      	bcc.n	8003706 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	e026      	b.n	8003706 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68d8      	ldr	r0, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	461a      	mov	r2, r3
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	f002 f856 	bl	8005774 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	425b      	negs	r3, r3
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d207      	bcs.n	80036f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	425b      	negs	r3, r3
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d105      	bne.n	8003706 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3b01      	subs	r3, #1
 8003704:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d018      	beq.n	800375c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d303      	bcc.n	800374c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68d9      	ldr	r1, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	461a      	mov	r2, r3
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f002 f80c 	bl	8005774 <memcpy>
	}
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800376c:	f001 fd06 	bl	800517c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003776:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003778:	e011      	b.n	800379e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fd48 	bl	800421c <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003792:	f000 fe1f 	bl	80043d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	3b01      	subs	r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	dce9      	bgt.n	800377a <prvUnlockQueue+0x16>
 80037a6:	e000      	b.n	80037aa <prvUnlockQueue+0x46>
					break;
 80037a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037b2:	f001 fd13 	bl	80051dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037b6:	f001 fce1 	bl	800517c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c2:	e011      	b.n	80037e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3310      	adds	r3, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fd23 	bl	800421c <xTaskRemoveFromEventList>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037dc:	f000 fdfa 	bl	80043d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	dce9      	bgt.n	80037c4 <prvUnlockQueue+0x60>
 80037f0:	e000      	b.n	80037f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037fc:	f001 fcee 	bl	80051dc <vPortExitCritical>
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003810:	f001 fcb4 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e001      	b.n	8003826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003826:	f001 fcd9 	bl	80051dc <vPortExitCritical>

	return xReturn;
 800382a:	68fb      	ldr	r3, [r7, #12]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383c:	f001 fc9e 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	429a      	cmp	r2, r3
 800384a:	d102      	bne.n	8003852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e001      	b.n	8003856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003856:	f001 fcc1 	bl	80051dc <vPortExitCritical>

	return xReturn;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e014      	b.n	800389e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <vQueueAddToRegistry+0x4c>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003880:	490b      	ldr	r1, [pc, #44]	; (80038b0 <vQueueAddToRegistry+0x4c>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <vQueueAddToRegistry+0x4c>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003896:	e006      	b.n	80038a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	d9e7      	bls.n	8003874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000778 	.word	0x20000778

080038b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e016      	b.n	80038f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <vQueueUnregisterQueue+0x50>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d10b      	bne.n	80038ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <vQueueUnregisterQueue+0x50>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2100      	movs	r1, #0
 80038d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80038dc:	4a09      	ldr	r2, [pc, #36]	; (8003904 <vQueueUnregisterQueue+0x50>)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	2200      	movs	r2, #0
 80038e6:	605a      	str	r2, [r3, #4]
				break;
 80038e8:	e006      	b.n	80038f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b07      	cmp	r3, #7
 80038f4:	d9e5      	bls.n	80038c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000778 	.word	0x20000778

08003908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003918:	f001 fc30 	bl	800517c <vPortEnterCritical>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003922:	b25b      	sxtb	r3, r3
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d103      	bne.n	8003932 <vQueueWaitForMessageRestricted+0x2a>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003938:	b25b      	sxtb	r3, r3
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d103      	bne.n	8003948 <vQueueWaitForMessageRestricted+0x40>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003948:	f001 fc48 	bl	80051dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fc31 	bl	80041c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff fefe 	bl	8003764 <prvUnlockQueue>
	}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af04      	add	r7, sp, #16
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	61fb      	str	r3, [r7, #28]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b6:	235c      	movs	r3, #92	; 0x5c
 80039b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b5c      	cmp	r3, #92	; 0x5c
 80039be:	d00a      	beq.n	80039d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61bb      	str	r3, [r7, #24]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01e      	beq.n	8003a1a <xTaskCreateStatic+0xaa>
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01b      	beq.n	8003a1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f4:	2300      	movs	r3, #0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f850 	bl	8003ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a14:	f000 f8d4 	bl	8003bc0 <prvAddNewTaskToReadyList>
 8003a18:	e001      	b.n	8003a1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a1e:	697b      	ldr	r3, [r7, #20]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af04      	add	r7, sp, #16
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fc9d 	bl	800537c <pvPortMalloc>
 8003a42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a4a:	205c      	movs	r0, #92	; 0x5c
 8003a4c:	f001 fc96 	bl	800537c <pvPortMalloc>
 8003a50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5e:	e005      	b.n	8003a6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f001 fd4f 	bl	8005504 <vPortFree>
 8003a66:	e001      	b.n	8003a6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f80e 	bl	8003ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a96:	69f8      	ldr	r0, [r7, #28]
 8003a98:	f000 f892 	bl	8003bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e002      	b.n	8003aa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	21a5      	movs	r1, #165	; 0xa5
 8003acc:	f001 fe60 	bl	8005790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ada:	3b01      	subs	r3, #1
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f023 0307 	bic.w	r3, r3, #7
 8003ae8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	617b      	str	r3, [r7, #20]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e012      	b.n	8003b36 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	7819      	ldrb	r1, [r3, #0]
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3334      	adds	r3, #52	; 0x34
 8003b20:	460a      	mov	r2, r1
 8003b22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d9e9      	bls.n	8003b10 <prvInitialiseNewTask+0x5e>
 8003b3c:	e000      	b.n	8003b40 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	2b37      	cmp	r3, #55	; 0x37
 8003b4c:	d901      	bls.n	8003b52 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b4e:	2337      	movs	r3, #55	; 0x37
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2200      	movs	r2, #0
 8003b62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	3304      	adds	r3, #4
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fe66 	bl	800283a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	3318      	adds	r3, #24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fe61 	bl	800283a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	69b8      	ldr	r0, [r7, #24]
 8003ba2:	f001 f9f7 	bl	8004f94 <pxPortInitialiseStack>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb8:	bf00      	nop
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bc8:	f001 fad8 	bl	800517c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <prvAddNewTaskToReadyList+0xc4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <prvAddNewTaskToReadyList+0xc4>)
 8003bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bde:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <prvAddNewTaskToReadyList+0xc4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d110      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bec:	f000 fc16 	bl	800441c <prvInitialiseTaskLists>
 8003bf0:	e00d      	b.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <prvAddNewTaskToReadyList+0xcc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d802      	bhi.n	8003c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <prvAddNewTaskToReadyList+0xd0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <prvAddNewTaskToReadyList+0xd0>)
 8003c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <prvAddNewTaskToReadyList+0xd0>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <prvAddNewTaskToReadyList+0xd4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d903      	bls.n	8003c34 <prvAddNewTaskToReadyList+0x74>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <prvAddNewTaskToReadyList+0xd4>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <prvAddNewTaskToReadyList+0xd8>)
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7fe fe01 	bl	8002852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c50:	f001 fac4 	bl	80051dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <prvAddNewTaskToReadyList+0xcc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <prvAddNewTaskToReadyList+0xc8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d207      	bcs.n	8003c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <prvAddNewTaskToReadyList+0xdc>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000c8c 	.word	0x20000c8c
 8003c88:	200007b8 	.word	0x200007b8
 8003c8c:	20000c98 	.word	0x20000c98
 8003c90:	20000ca8 	.word	0x20000ca8
 8003c94:	20000c94 	.word	0x20000c94
 8003c98:	200007bc 	.word	0x200007bc
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d017      	beq.n	8003ce2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <vTaskDelay+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <vTaskDelay+0x30>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cd0:	f000 f880 	bl	8003dd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fdf6 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cdc:	f000 f888 	bl	8003df0 <xTaskResumeAll>
 8003ce0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <vTaskDelay+0x64>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000cb4 	.word	0x20000cb4
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d16:	463a      	mov	r2, r7
 8003d18:	1d39      	adds	r1, r7, #4
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fd3a 	bl	8002798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	9202      	str	r2, [sp, #8]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2300      	movs	r3, #0
 8003d34:	460a      	mov	r2, r1
 8003d36:	4921      	ldr	r1, [pc, #132]	; (8003dbc <vTaskStartScheduler+0xb4>)
 8003d38:	4821      	ldr	r0, [pc, #132]	; (8003dc0 <vTaskStartScheduler+0xb8>)
 8003d3a:	f7ff fe19 	bl	8003970 <xTaskCreateStatic>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <vTaskStartScheduler+0xbc>)
 8003d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <vTaskStartScheduler+0xbc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e001      	b.n	8003d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d102      	bne.n	8003d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d5c:	f000 fe08 	bl	8004970 <xTimerCreateTimerTask>
 8003d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d116      	bne.n	8003d96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	613b      	str	r3, [r7, #16]
}
 8003d7a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d7c:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <vTaskStartScheduler+0xc0>)
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <vTaskStartScheduler+0xc4>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <vTaskStartScheduler+0xc8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d90:	f001 f982 	bl	8005098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d94:	e00e      	b.n	8003db4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d10a      	bne.n	8003db4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60fb      	str	r3, [r7, #12]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <vTaskStartScheduler+0xaa>
}
 8003db4:	bf00      	nop
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	08005864 	.word	0x08005864
 8003dc0:	080043ed 	.word	0x080043ed
 8003dc4:	20000cb0 	.word	0x20000cb0
 8003dc8:	20000cac 	.word	0x20000cac
 8003dcc:	20000c98 	.word	0x20000c98
 8003dd0:	20000c90 	.word	0x20000c90

08003dd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <vTaskSuspendAll+0x18>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a03      	ldr	r2, [pc, #12]	; (8003dec <vTaskSuspendAll+0x18>)
 8003de0:	6013      	str	r3, [r2, #0]
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000cb4 	.word	0x20000cb4

08003df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <xTaskResumeAll+0x118>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	603b      	str	r3, [r7, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e1c:	f001 f9ae 	bl	800517c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e20:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <xTaskResumeAll+0x118>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <xTaskResumeAll+0x118>)
 8003e28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <xTaskResumeAll+0x118>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d162      	bne.n	8003ef8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e32:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <xTaskResumeAll+0x11c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d05e      	beq.n	8003ef8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e3a:	e02f      	b.n	8003e9c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <xTaskResumeAll+0x120>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3318      	adds	r3, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fd5d 	bl	8002908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fd58 	bl	8002908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <xTaskResumeAll+0x124>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d903      	bls.n	8003e6c <xTaskResumeAll+0x7c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <xTaskResumeAll+0x124>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <xTaskResumeAll+0x128>)
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f7fe fce5 	bl	8002852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <xTaskResumeAll+0x12c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e96:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <xTaskResumeAll+0x130>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <xTaskResumeAll+0x120>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1cb      	bne.n	8003e3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eaa:	f000 fb55 	bl	8004558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <xTaskResumeAll+0x134>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eba:	f000 f845 	bl	8003f48 <xTaskIncrementTick>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <xTaskResumeAll+0x130>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f1      	bne.n	8003eba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <xTaskResumeAll+0x134>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskResumeAll+0x130>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <xTaskResumeAll+0x138>)
 8003eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ef8:	f001 f970 	bl	80051dc <vPortExitCritical>

	return xAlreadyYielded;
 8003efc:	68bb      	ldr	r3, [r7, #8]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000cb4 	.word	0x20000cb4
 8003f0c:	20000c8c 	.word	0x20000c8c
 8003f10:	20000c4c 	.word	0x20000c4c
 8003f14:	20000c94 	.word	0x20000c94
 8003f18:	200007bc 	.word	0x200007bc
 8003f1c:	200007b8 	.word	0x200007b8
 8003f20:	20000ca0 	.word	0x20000ca0
 8003f24:	20000c9c 	.word	0x20000c9c
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <xTaskGetTickCount+0x18>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000c90 	.word	0x20000c90

08003f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f52:	4b51      	ldr	r3, [pc, #324]	; (8004098 <xTaskIncrementTick+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 808e 	bne.w	8004078 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <xTaskIncrementTick+0x154>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f64:	4a4d      	ldr	r2, [pc, #308]	; (800409c <xTaskIncrementTick+0x154>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d120      	bne.n	8003fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	603b      	str	r3, [r7, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <xTaskIncrementTick+0x46>
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <xTaskIncrementTick+0x15c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <xTaskIncrementTick+0x15c>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <xTaskIncrementTick+0x160>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <xTaskIncrementTick+0x160>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	f000 fad3 	bl	8004558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fb2:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <xTaskIncrementTick+0x164>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d34e      	bcc.n	800405a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fbc:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xTaskIncrementTick+0x82>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xTaskIncrementTick+0x84>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <xTaskIncrementTick+0x164>)
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	601a      	str	r2, [r3, #0]
					break;
 8003fd8:	e03f      	b.n	800405a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d203      	bcs.n	8003ffa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ff2:	4a2e      	ldr	r2, [pc, #184]	; (80040ac <xTaskIncrementTick+0x164>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6013      	str	r3, [r2, #0]
						break;
 8003ff8:	e02f      	b.n	800405a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fc82 	bl	8002908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3318      	adds	r3, #24
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fc79 	bl	8002908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <xTaskIncrementTick+0x168>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d903      	bls.n	800402a <xTaskIncrementTick+0xe2>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <xTaskIncrementTick+0x168>)
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <xTaskIncrementTick+0x16c>)
 8004038:	441a      	add	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe fc06 	bl	8002852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <xTaskIncrementTick+0x170>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d3b3      	bcc.n	8003fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004058:	e7b0      	b.n	8003fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <xTaskIncrementTick+0x170>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4914      	ldr	r1, [pc, #80]	; (80040b4 <xTaskIncrementTick+0x16c>)
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d907      	bls.n	8004082 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e004      	b.n	8004082 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <xTaskIncrementTick+0x174>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <xTaskIncrementTick+0x174>)
 8004080:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <xTaskIncrementTick+0x178>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000cb4 	.word	0x20000cb4
 800409c:	20000c90 	.word	0x20000c90
 80040a0:	20000c44 	.word	0x20000c44
 80040a4:	20000c48 	.word	0x20000c48
 80040a8:	20000ca4 	.word	0x20000ca4
 80040ac:	20000cac 	.word	0x20000cac
 80040b0:	20000c94 	.word	0x20000c94
 80040b4:	200007bc 	.word	0x200007bc
 80040b8:	200007b8 	.word	0x200007b8
 80040bc:	20000c9c 	.word	0x20000c9c
 80040c0:	20000ca0 	.word	0x20000ca0

080040c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <vTaskSwitchContext+0xa4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <vTaskSwitchContext+0xa8>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040d8:	e041      	b.n	800415e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <vTaskSwitchContext+0xa8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <vTaskSwitchContext+0xac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e010      	b.n	800410a <vTaskSwitchContext+0x46>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <vTaskSwitchContext+0x40>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <vTaskSwitchContext+0x3e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	491a      	ldr	r1, [pc, #104]	; (8004174 <vTaskSwitchContext+0xb0>)
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0e4      	beq.n	80040e8 <vTaskSwitchContext+0x24>
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <vTaskSwitchContext+0xb0>)
 800412a:	4413      	add	r3, r2
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3308      	adds	r3, #8
 8004140:	429a      	cmp	r2, r3
 8004142:	d104      	bne.n	800414e <vTaskSwitchContext+0x8a>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <vTaskSwitchContext+0xb4>)
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4a05      	ldr	r2, [pc, #20]	; (8004170 <vTaskSwitchContext+0xac>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	20000cb4 	.word	0x20000cb4
 800416c:	20000ca0 	.word	0x20000ca0
 8004170:	20000c94 	.word	0x20000c94
 8004174:	200007bc 	.word	0x200007bc
 8004178:	200007b8 	.word	0x200007b8

0800417c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <vTaskPlaceOnEventList+0x44>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3318      	adds	r3, #24
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fb74 	bl	8002898 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b0:	2101      	movs	r1, #1
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	f000 fb88 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200007b8 	.word	0x200007b8

080041c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617b      	str	r3, [r7, #20]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <vTaskPlaceOnEventListRestricted+0x54>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4619      	mov	r1, r3
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7fe fb2c 	bl	8002852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f000 fb5d 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
	}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200007b8 	.word	0x200007b8

0800421c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	60fb      	str	r3, [r7, #12]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3318      	adds	r3, #24
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fb5b 	bl	8002908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <xTaskRemoveFromEventList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11d      	bne.n	8004296 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fb52 	bl	8002908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <xTaskRemoveFromEventList+0xb4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d903      	bls.n	8004278 <xTaskRemoveFromEventList+0x5c>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <xTaskRemoveFromEventList+0xb4>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <xTaskRemoveFromEventList+0xb8>)
 8004286:	441a      	add	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fe fadf 	bl	8002852 <vListInsertEnd>
 8004294:	e005      	b.n	80042a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3318      	adds	r3, #24
 800429a:	4619      	mov	r1, r3
 800429c:	480e      	ldr	r0, [pc, #56]	; (80042d8 <xTaskRemoveFromEventList+0xbc>)
 800429e:	f7fe fad8 	bl	8002852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <xTaskRemoveFromEventList+0xc0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d905      	bls.n	80042bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <xTaskRemoveFromEventList+0xc4>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e001      	b.n	80042c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042c0:	697b      	ldr	r3, [r7, #20]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000cb4 	.word	0x20000cb4
 80042d0:	20000c94 	.word	0x20000c94
 80042d4:	200007bc 	.word	0x200007bc
 80042d8:	20000c4c 	.word	0x20000c4c
 80042dc:	200007b8 	.word	0x200007b8
 80042e0:	20000ca0 	.word	0x20000ca0

080042e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <vTaskInternalSetTimeOutState+0x24>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <vTaskInternalSetTimeOutState+0x28>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000ca4 	.word	0x20000ca4
 800430c:	20000c90 	.word	0x20000c90

08004310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004352:	f000 ff13 	bl	800517c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <xTaskCheckForTimeOut+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d102      	bne.n	8004376 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e023      	b.n	80043be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <xTaskCheckForTimeOut+0xc0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d007      	beq.n	8004392 <xTaskCheckForTimeOut+0x82>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e015      	b.n	80043be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d20b      	bcs.n	80043b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff9b 	bl	80042e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e004      	b.n	80043be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f000 ff0d 	bl	80051dc <vPortExitCritical>

	return xReturn;
 80043c2:	69fb      	ldr	r3, [r7, #28]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000c90 	.word	0x20000c90
 80043d0:	20000ca4 	.word	0x20000ca4

080043d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <vTaskMissedYield+0x14>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000ca0 	.word	0x20000ca0

080043ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043f4:	f000 f852 	bl	800449c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvIdleTask+0x28>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d9f9      	bls.n	80043f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <prvIdleTask+0x2c>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004410:	e7f0      	b.n	80043f4 <prvIdleTask+0x8>
 8004412:	bf00      	nop
 8004414:	200007bc 	.word	0x200007bc
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	e00c      	b.n	8004442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <prvInitialiseTaskLists+0x60>)
 8004434:	4413      	add	r3, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f9e0 	bl	80027fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b37      	cmp	r3, #55	; 0x37
 8004446:	d9ef      	bls.n	8004428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004448:	480d      	ldr	r0, [pc, #52]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800444a:	f7fe f9d7 	bl	80027fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800444e:	480d      	ldr	r0, [pc, #52]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004450:	f7fe f9d4 	bl	80027fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <prvInitialiseTaskLists+0x6c>)
 8004456:	f7fe f9d1 	bl	80027fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800445a:	480c      	ldr	r0, [pc, #48]	; (800448c <prvInitialiseTaskLists+0x70>)
 800445c:	f7fe f9ce 	bl	80027fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <prvInitialiseTaskLists+0x74>)
 8004462:	f7fe f9cb 	bl	80027fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <prvInitialiseTaskLists+0x78>)
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800446a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvInitialiseTaskLists+0x7c>)
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200007bc 	.word	0x200007bc
 8004480:	20000c1c 	.word	0x20000c1c
 8004484:	20000c30 	.word	0x20000c30
 8004488:	20000c4c 	.word	0x20000c4c
 800448c:	20000c60 	.word	0x20000c60
 8004490:	20000c78 	.word	0x20000c78
 8004494:	20000c44 	.word	0x20000c44
 8004498:	20000c48 	.word	0x20000c48

0800449c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a2:	e019      	b.n	80044d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044a4:	f000 fe6a 	bl	800517c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <prvCheckTasksWaitingTermination+0x50>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fa27 	bl	8002908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <prvCheckTasksWaitingTermination+0x54>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3b01      	subs	r3, #1
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <prvCheckTasksWaitingTermination+0x54>)
 80044c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044ce:	f000 fe85 	bl	80051dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f810 	bl	80044f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e1      	bne.n	80044a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000c60 	.word	0x20000c60
 80044f0:	20000c8c 	.word	0x20000c8c
 80044f4:	20000c74 	.word	0x20000c74

080044f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fff8 	bl	8005504 <vPortFree>
				vPortFree( pxTCB );
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fff5 	bl	8005504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800451a:	e018      	b.n	800454e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004522:	2b01      	cmp	r3, #1
 8004524:	d103      	bne.n	800452e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffec 	bl	8005504 <vPortFree>
	}
 800452c:	e00f      	b.n	800454e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004534:	2b02      	cmp	r3, #2
 8004536:	d00a      	beq.n	800454e <prvDeleteTCB+0x56>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60fb      	str	r3, [r7, #12]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <prvDeleteTCB+0x54>
	}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <prvResetNextTaskUnblockTime+0x40>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <prvResetNextTaskUnblockTime+0x14>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <prvResetNextTaskUnblockTime+0x16>
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <prvResetNextTaskUnblockTime+0x44>)
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800457a:	e008      	b.n	800458e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvResetNextTaskUnblockTime+0x40>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <prvResetNextTaskUnblockTime+0x44>)
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	20000c44 	.word	0x20000c44
 800459c:	20000cac 	.word	0x20000cac

080045a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <xTaskGetSchedulerState+0x34>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ae:	2301      	movs	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e008      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <xTaskGetSchedulerState+0x38>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045bc:	2302      	movs	r3, #2
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e001      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045c6:	687b      	ldr	r3, [r7, #4]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000c98 	.word	0x20000c98
 80045d8:	20000cb4 	.word	0x20000cb4

080045dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d056      	beq.n	80046a0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <xTaskPriorityInherit+0xd0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d246      	bcs.n	800468e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db06      	blt.n	8004616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <xTaskPriorityInherit+0xd0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6959      	ldr	r1, [r3, #20]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <xTaskPriorityInherit+0xd4>)
 8004628:	4413      	add	r3, r2
 800462a:	4299      	cmp	r1, r3
 800462c:	d101      	bne.n	8004632 <xTaskPriorityInherit+0x56>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xTaskPriorityInherit+0x58>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d022      	beq.n	800467e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe f963 	bl	8002908 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <xTaskPriorityInherit+0xd0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <xTaskPriorityInherit+0xd8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d903      	bls.n	8004660 <xTaskPriorityInherit+0x84>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <xTaskPriorityInherit+0xd8>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <xTaskPriorityInherit+0xd4>)
 800466e:	441a      	add	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe f8eb 	bl	8002852 <vListInsertEnd>
 800467c:	e004      	b.n	8004688 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <xTaskPriorityInherit+0xd0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e008      	b.n	80046a0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <xTaskPriorityInherit+0xd0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d201      	bcs.n	80046a0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046a0:	68fb      	ldr	r3, [r7, #12]
	}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200007b8 	.word	0x200007b8
 80046b0:	200007bc 	.word	0x200007bc
 80046b4:	20000c94 	.word	0x20000c94

080046b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d056      	beq.n	800477c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <xTaskPriorityDisinherit+0xd0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d00a      	beq.n	80046ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60bb      	str	r3, [r7, #8]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	429a      	cmp	r2, r3
 8004720:	d02c      	beq.n	800477c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	2b00      	cmp	r3, #0
 8004728:	d128      	bne.n	800477c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3304      	adds	r3, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe f8ea 	bl	8002908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <xTaskPriorityDisinherit+0xd4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d903      	bls.n	800475c <xTaskPriorityDisinherit+0xa4>
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4a0c      	ldr	r2, [pc, #48]	; (800478c <xTaskPriorityDisinherit+0xd4>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <xTaskPriorityDisinherit+0xd8>)
 800476a:	441a      	add	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f7fe f86d 	bl	8002852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800477c:	697b      	ldr	r3, [r7, #20]
	}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200007b8 	.word	0x200007b8
 800478c:	20000c94 	.word	0x20000c94
 8004790:	200007bc 	.word	0x200007bc

08004794 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047a2:	2301      	movs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d06f      	beq.n	800488c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60fb      	str	r3, [r7, #12]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d902      	bls.n	80047da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e002      	b.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d050      	beq.n	800488c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d14b      	bne.n	800488c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d10a      	bne.n	8004814 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60bb      	str	r3, [r7, #8]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db04      	blt.n	8004832 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6959      	ldr	r1, [r3, #20]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004842:	4413      	add	r3, r2
 8004844:	4299      	cmp	r1, r3
 8004846:	d101      	bne.n	800484c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01c      	beq.n	800488c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	3304      	adds	r3, #4
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f856 	bl	8002908 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d903      	bls.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a0b      	ldr	r2, [pc, #44]	; (800489c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a06      	ldr	r2, [pc, #24]	; (8004898 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800487e:	441a      	add	r2, r3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f7fd ffe3 	bl	8002852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800488c:	bf00      	nop
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200007b8 	.word	0x200007b8
 8004898:	200007bc 	.word	0x200007bc
 800489c:	20000c94 	.word	0x20000c94

080048a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048b2:	3201      	adds	r2, #1
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80048b6:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80048b8:	681b      	ldr	r3, [r3, #0]
	}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200007b8 	.word	0x200007b8

080048c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <prvAddCurrentTaskToDelayedList+0x90>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d8:	4b20      	ldr	r3, [pc, #128]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3304      	adds	r3, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe f812 	bl	8002908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d10a      	bne.n	8004902 <prvAddCurrentTaskToDelayedList+0x3a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4819      	ldr	r0, [pc, #100]	; (8004960 <prvAddCurrentTaskToDelayedList+0x98>)
 80048fc:	f7fd ffa9 	bl	8002852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004900:	e026      	b.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	429a      	cmp	r2, r3
 8004918:	d209      	bcs.n	800492e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fd ffb6 	bl	8002898 <vListInsert>
}
 800492c:	e010      	b.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fd ffac 	bl	8002898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d202      	bcs.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <prvAddCurrentTaskToDelayedList+0xa4>)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000c90 	.word	0x20000c90
 800495c:	200007b8 	.word	0x200007b8
 8004960:	20000c78 	.word	0x20000c78
 8004964:	20000c48 	.word	0x20000c48
 8004968:	20000c44 	.word	0x20000c44
 800496c:	20000cac 	.word	0x20000cac

08004970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800497a:	f000 facb 	bl	8004f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800497e:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <xTimerCreateTimerTask+0x80>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800498e:	1d3a      	adds	r2, r7, #4
 8004990:	f107 0108 	add.w	r1, r7, #8
 8004994:	f107 030c 	add.w	r3, r7, #12
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd ff15 	bl	80027c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	9202      	str	r2, [sp, #8]
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	2302      	movs	r3, #2
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	460a      	mov	r2, r1
 80049b0:	4910      	ldr	r1, [pc, #64]	; (80049f4 <xTimerCreateTimerTask+0x84>)
 80049b2:	4811      	ldr	r0, [pc, #68]	; (80049f8 <xTimerCreateTimerTask+0x88>)
 80049b4:	f7fe ffdc 	bl	8003970 <xTaskCreateStatic>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <xTimerCreateTimerTask+0x8c>)
 80049bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <xTimerCreateTimerTask+0x8c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049c6:	2301      	movs	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049e6:	697b      	ldr	r3, [r7, #20]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000ce8 	.word	0x20000ce8
 80049f4:	0800586c 	.word	0x0800586c
 80049f8:	08004b1d 	.word	0x08004b1d
 80049fc:	20000cec 	.word	0x20000cec

08004a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	623b      	str	r3, [r7, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02a      	beq.n	8004a8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	dc18      	bgt.n	8004a7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a48:	f7ff fdaa 	bl	80045a0 <xTaskGetSchedulerState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d109      	bne.n	8004a66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f107 0110 	add.w	r1, r7, #16
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	f7fe f927 	bl	8002cb0 <xQueueGenericSend>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24
 8004a64:	e012      	b.n	8004a8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	f107 0110 	add.w	r1, r7, #16
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	f7fe f91d 	bl	8002cb0 <xQueueGenericSend>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24
 8004a78:	e008      	b.n	8004a8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f107 0110 	add.w	r1, r7, #16
 8004a82:	2300      	movs	r3, #0
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	f7fe fa11 	bl	8002eac <xQueueGenericSendFromISR>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000ce8 	.word	0x20000ce8

08004a9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <prvProcessExpiredTimer+0x7c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fd ff27 	bl	8002908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d122      	bne.n	8004b08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	18d1      	adds	r1, r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f000 f8c8 	bl	8004c64 <prvInsertTimerInActiveList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6978      	ldr	r0, [r7, #20]
 8004ae6:	f7ff ff8b 	bl	8004a00 <xTimerGenericCommand>
 8004aea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	6978      	ldr	r0, [r7, #20]
 8004b0e:	4798      	blx	r3
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000ce0 	.word	0x20000ce0

08004b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f857 	bl	8004bdc <prvGetNextExpireTime>
 8004b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f803 	bl	8004b40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b3a:	f000 f8d5 	bl	8004ce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b3e:	e7f1      	b.n	8004b24 <prvTimerTask+0x8>

08004b40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b4a:	f7ff f943 	bl	8003dd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f866 	bl	8004c24 <prvSampleTimeNow>
 8004b58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d130      	bne.n	8004bc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <prvProcessTimerOrBlockTask+0x3c>
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d806      	bhi.n	8004b7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b6e:	f7ff f93f 	bl	8003df0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff91 	bl	8004a9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b7a:	e024      	b.n	8004bc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b82:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <prvProcessTimerOrBlockTask+0x90>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <prvProcessTimerOrBlockTask+0x94>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fe feb1 	bl	8003908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ba6:	f7ff f923 	bl	8003df0 <xTaskResumeAll>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <prvProcessTimerOrBlockTask+0x98>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
}
 8004bc0:	e001      	b.n	8004bc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bc2:	f7ff f915 	bl	8003df0 <xTaskResumeAll>
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000ce4 	.word	0x20000ce4
 8004bd4:	20000ce8 	.word	0x20000ce8
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <prvGetNextExpireTime+0x44>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <prvGetNextExpireTime+0x44>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e001      	b.n	8004c12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c12:	68fb      	ldr	r3, [r7, #12]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000ce0 	.word	0x20000ce0

08004c24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c2c:	f7ff f97e 	bl	8003f2c <xTaskGetTickCount>
 8004c30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <prvSampleTimeNow+0x3c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d205      	bcs.n	8004c48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c3c:	f000 f908 	bl	8004e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <prvSampleTimeNow+0x3c>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000cf0 	.word	0x20000cf0

08004c64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d812      	bhi.n	8004cb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d302      	bcc.n	8004c9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e01b      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <prvInsertTimerInActiveList+0x7c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fd fdf5 	bl	8002898 <vListInsert>
 8004cae:	e012      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d206      	bcs.n	8004cc6 <prvInsertTimerInActiveList+0x62>
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e007      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <prvInsertTimerInActiveList+0x80>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f7fd fde1 	bl	8002898 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cd6:	697b      	ldr	r3, [r7, #20]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000ce4 	.word	0x20000ce4
 8004ce4:	20000ce0 	.word	0x20000ce0

08004ce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cee:	e09d      	b.n	8004e2c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da18      	bge.n	8004d28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	61fb      	str	r3, [r7, #28]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1e:	6850      	ldr	r0, [r2, #4]
 8004d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d22:	6892      	ldr	r2, [r2, #8]
 8004d24:	4611      	mov	r1, r2
 8004d26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db7d      	blt.n	8004e2a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fde2 	bl	8002908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d44:	463b      	mov	r3, r7
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff6c 	bl	8004c24 <prvSampleTimeNow>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b09      	cmp	r3, #9
 8004d52:	d86b      	bhi.n	8004e2c <prvProcessReceivedCommands+0x144>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <prvProcessReceivedCommands+0x74>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d85 	.word	0x08004d85
 8004d68:	08004e2d 	.word	0x08004e2d
 8004d6c:	08004de1 	.word	0x08004de1
 8004d70:	08004e19 	.word	0x08004e19
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d85 	.word	0x08004d85
 8004d7c:	08004e2d 	.word	0x08004e2d
 8004d80:	08004de1 	.word	0x08004de1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	18d1      	adds	r1, r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d92:	f7ff ff67 	bl	8004c64 <prvInsertTimerInActiveList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d047      	beq.n	8004e2c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d13f      	bne.n	8004e2c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	441a      	add	r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2300      	movs	r3, #0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbe:	f7ff fe1f 	bl	8004a00 <xTimerGenericCommand>
 8004dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d130      	bne.n	8004e2c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61bb      	str	r3, [r7, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617b      	str	r3, [r7, #20]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	18d1      	adds	r1, r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e12:	f7ff ff27 	bl	8004c64 <prvInsertTimerInActiveList>
					break;
 8004e16:	e009      	b.n	8004e2c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e24:	f000 fb6e 	bl	8005504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e28:	e000      	b.n	8004e2c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <prvProcessReceivedCommands+0x164>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1d39      	adds	r1, r7, #4
 8004e32:	2200      	movs	r2, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe f95f 	bl	80030f8 <xQueueReceive>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f47f af57 	bne.w	8004cf0 <prvProcessReceivedCommands+0x8>
	}
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	3730      	adds	r7, #48	; 0x30
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000ce8 	.word	0x20000ce8

08004e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e56:	e045      	b.n	8004ee4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd fd49 	bl	8002908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d12e      	bne.n	8004ee4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d90e      	bls.n	8004eb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ea4:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fd fcf2 	bl	8002898 <vListInsert>
 8004eb4:	e016      	b.n	8004ee4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff fd9d 	bl	8004a00 <xTimerGenericCommand>
 8004ec6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	603b      	str	r3, [r7, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1b4      	bne.n	8004e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <prvSwitchTimerLists+0xc0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <prvSwitchTimerLists+0xbc>)
 8004efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <prvSwitchTimerLists+0xc0>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6013      	str	r3, [r2, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000ce0 	.word	0x20000ce0
 8004f10:	20000ce4 	.word	0x20000ce4

08004f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f1a:	f000 f92f 	bl	800517c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <prvCheckForValidListAndQueue+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d120      	bne.n	8004f68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f26:	4814      	ldr	r0, [pc, #80]	; (8004f78 <prvCheckForValidListAndQueue+0x64>)
 8004f28:	f7fd fc68 	bl	80027fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f2c:	4813      	ldr	r0, [pc, #76]	; (8004f7c <prvCheckForValidListAndQueue+0x68>)
 8004f2e:	f7fd fc65 	bl	80027fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <prvCheckForValidListAndQueue+0x6c>)
 8004f34:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <prvCheckForValidListAndQueue+0x64>)
 8004f36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <prvCheckForValidListAndQueue+0x70>)
 8004f3a:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <prvCheckForValidListAndQueue+0x68>)
 8004f3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <prvCheckForValidListAndQueue+0x74>)
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <prvCheckForValidListAndQueue+0x78>)
 8004f46:	2110      	movs	r1, #16
 8004f48:	200a      	movs	r0, #10
 8004f4a:	f7fd fd6f 	bl	8002a2c <xQueueGenericCreateStatic>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <prvCheckForValidListAndQueue+0x60>)
 8004f52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f54:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <prvCheckForValidListAndQueue+0x60>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <prvCheckForValidListAndQueue+0x60>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	490b      	ldr	r1, [pc, #44]	; (8004f90 <prvCheckForValidListAndQueue+0x7c>)
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fc7e 	bl	8003864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f68:	f000 f938 	bl	80051dc <vPortExitCritical>
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000ce8 	.word	0x20000ce8
 8004f78:	20000cb8 	.word	0x20000cb8
 8004f7c:	20000ccc 	.word	0x20000ccc
 8004f80:	20000ce0 	.word	0x20000ce0
 8004f84:	20000ce4 	.word	0x20000ce4
 8004f88:	20000d94 	.word	0x20000d94
 8004f8c:	20000cf4 	.word	0x20000cf4
 8004f90:	08005874 	.word	0x08005874

08004f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b04      	subs	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <pxPortInitialiseStack+0x54>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b14      	subs	r3, #20
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b20      	subs	r3, #32
 8004fda:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr
 8004fe8:	08004fed 	.word	0x08004fed

08004fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <prvTaskExitError+0x54>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d00a      	beq.n	8005016 <prvTaskExitError+0x2a>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <prvTaskExitError+0x28>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60bb      	str	r3, [r7, #8]
}
 8005028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800502a:	bf00      	nop
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0fc      	beq.n	800502c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	2000001c 	.word	0x2000001c
	...

08005050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <pxCurrentTCBConst2>)
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	6808      	ldr	r0, [r1, #0]
 8005056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800505a:	f380 8809 	msr	PSP, r0
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	f04e 0e0d 	orr.w	lr, lr, #13
 800506e:	4770      	bx	lr

08005070 <pxCurrentTCBConst2>:
 8005070:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <prvPortStartFirstTask+0x1c>)
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f380 8808 	msr	MSP, r0
 8005082:	b662      	cpsie	i
 8005084:	b661      	cpsie	f
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	df00      	svc	0
 8005090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005092:	bf00      	nop
 8005094:	e000ed08 	.word	0xe000ed08

08005098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <xPortStartScheduler+0xd0>)
 80050a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	22ff      	movs	r2, #255	; 0xff
 80050ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4b2a      	ldr	r3, [pc, #168]	; (800516c <xPortStartScheduler+0xd4>)
 80050c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050c6:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <xPortStartScheduler+0xd8>)
 80050c8:	2207      	movs	r2, #7
 80050ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050cc:	e009      	b.n	80050e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <xPortStartScheduler+0xd8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <xPortStartScheduler+0xd8>)
 80050d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d0ef      	beq.n	80050ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <xPortStartScheduler+0xd8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1c3 0307 	rsb	r3, r3, #7
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00a      	beq.n	8005110 <xPortStartScheduler+0x78>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xPortStartScheduler+0xd8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	4a16      	ldr	r2, [pc, #88]	; (8005170 <xPortStartScheduler+0xd8>)
 8005118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <xPortStartScheduler+0xd8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <xPortStartScheduler+0xd8>)
 8005124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <xPortStartScheduler+0xdc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <xPortStartScheduler+0xdc>)
 8005134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <xPortStartScheduler+0xdc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <xPortStartScheduler+0xdc>)
 8005140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005146:	f000 f8b9 	bl	80052bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <xPortStartScheduler+0xe0>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005150:	f7ff ff92 	bl	8005078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005154:	f7fe ffb6 	bl	80040c4 <vTaskSwitchContext>
	prvTaskExitError();
 8005158:	f7ff ff48 	bl	8004fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	e000e400 	.word	0xe000e400
 800516c:	20000de4 	.word	0x20000de4
 8005170:	20000de8 	.word	0x20000de8
 8005174:	e000ed20 	.word	0xe000ed20
 8005178:	2000001c 	.word	0x2000001c

0800517c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
}
 8005194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <vPortEnterCritical+0x58>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a0d      	ldr	r2, [pc, #52]	; (80051d4 <vPortEnterCritical+0x58>)
 800519e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <vPortEnterCritical+0x58>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10f      	bne.n	80051c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <vPortEnterCritical+0x5c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	603b      	str	r3, [r7, #0]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vPortEnterCritical+0x4a>
	}
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000001c 	.word	0x2000001c
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <vPortExitCritical+0x4c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <vPortExitCritical+0x24>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <vPortExitCritical+0x4c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <vPortExitCritical+0x4c>)
 8005208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <vPortExitCritical+0x4c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <vPortExitCritical+0x42>
 8005212:	2300      	movs	r3, #0
 8005214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f383 8811 	msr	BASEPRI, r3
}
 800521c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	2000001c 	.word	0x2000001c
 800522c:	00000000 	.word	0x00000000

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005240:	6010      	str	r0, [r2, #0]
 8005242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800524a:	f380 8811 	msr	BASEPRI, r0
 800524e:	f7fe ff39 	bl	80040c4 <vTaskSwitchContext>
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005266:	f380 8809 	msr	PSP, r0
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	4770      	bx	lr

08005270 <pxCurrentTCBConst>:
 8005270:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005292:	f7fe fe59 	bl	8003f48 <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <xPortSysTickHandler+0x40>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
}
 80052ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x30>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <vPortSetupTimerInterrupt+0x38>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <vPortSetupTimerInterrupt+0x3c>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <vPortSetupTimerInterrupt+0x40>)
 80052da:	3b01      	subs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052de:	4b03      	ldr	r3, [pc, #12]	; (80052ec <vPortSetupTimerInterrupt+0x30>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	e000e010 	.word	0xe000e010
 80052f0:	e000e018 	.word	0xe000e018
 80052f4:	20000010 	.word	0x20000010
 80052f8:	10624dd3 	.word	0x10624dd3
 80052fc:	e000e014 	.word	0xe000e014

08005300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005306:	f3ef 8305 	mrs	r3, IPSR
 800530a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b0f      	cmp	r3, #15
 8005310:	d914      	bls.n	800533c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005312:	4a16      	ldr	r2, [pc, #88]	; (800536c <vPortValidateInterruptPriority+0x6c>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <vPortValidateInterruptPriority+0x70>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	7afa      	ldrb	r2, [r7, #11]
 8005322:	429a      	cmp	r2, r3
 8005324:	d20a      	bcs.n	800533c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	607b      	str	r3, [r7, #4]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <vPortValidateInterruptPriority+0x74>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <vPortValidateInterruptPriority+0x78>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d90a      	bls.n	8005362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	603b      	str	r3, [r7, #0]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <vPortValidateInterruptPriority+0x60>
	}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	e000e3f0 	.word	0xe000e3f0
 8005370:	20000de4 	.word	0x20000de4
 8005374:	e000ed0c 	.word	0xe000ed0c
 8005378:	20000de8 	.word	0x20000de8

0800537c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005388:	f7fe fd24 	bl	8003dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800538c:	4b58      	ldr	r3, [pc, #352]	; (80054f0 <pvPortMalloc+0x174>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005394:	f000 f910 	bl	80055b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005398:	4b56      	ldr	r3, [pc, #344]	; (80054f4 <pvPortMalloc+0x178>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 808e 	bne.w	80054c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01d      	beq.n	80053e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053ac:	2208      	movs	r2, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	3308      	adds	r3, #8
 80053c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <pvPortMalloc+0x6c>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	617b      	str	r3, [r7, #20]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d069      	beq.n	80054c2 <pvPortMalloc+0x146>
 80053ee:	4b42      	ldr	r3, [pc, #264]	; (80054f8 <pvPortMalloc+0x17c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d864      	bhi.n	80054c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053f8:	4b40      	ldr	r3, [pc, #256]	; (80054fc <pvPortMalloc+0x180>)
 80053fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053fc:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <pvPortMalloc+0x180>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005402:	e004      	b.n	800540e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <pvPortMalloc+0xa4>
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f1      	bne.n	8005404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005420:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <pvPortMalloc+0x174>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	429a      	cmp	r2, r3
 8005428:	d04b      	beq.n	80054c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2208      	movs	r2, #8
 8005430:	4413      	add	r3, r2
 8005432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	2308      	movs	r3, #8
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	429a      	cmp	r2, r3
 800544a:	d91f      	bls.n	800548c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <pvPortMalloc+0xf8>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	613b      	str	r3, [r7, #16]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005486:	69b8      	ldr	r0, [r7, #24]
 8005488:	f000 f8f8 	bl	800567c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <pvPortMalloc+0x17c>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <pvPortMalloc+0x17c>)
 8005498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <pvPortMalloc+0x17c>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <pvPortMalloc+0x184>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d203      	bcs.n	80054ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <pvPortMalloc+0x17c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <pvPortMalloc+0x184>)
 80054ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <pvPortMalloc+0x178>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c2:	f7fe fc95 	bl	8003df0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <pvPortMalloc+0x16a>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <pvPortMalloc+0x168>
	return pvReturn;
 80054e6:	69fb      	ldr	r3, [r7, #28]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	; 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	200019f4 	.word	0x200019f4
 80054f4:	20001a00 	.word	0x20001a00
 80054f8:	200019f8 	.word	0x200019f8
 80054fc:	200019ec 	.word	0x200019ec
 8005500:	200019fc 	.word	0x200019fc

08005504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d048      	beq.n	80055a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005516:	2308      	movs	r3, #8
 8005518:	425b      	negs	r3, r3
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <vPortFree+0xac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <vPortFree+0x44>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60fb      	str	r3, [r7, #12]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <vPortFree+0x62>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60bb      	str	r3, [r7, #8]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <vPortFree+0xac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d019      	beq.n	80055a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d115      	bne.n	80055a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortFree+0xac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	43db      	mvns	r3, r3
 8005586:	401a      	ands	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800558c:	f7fe fc22 	bl	8003dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <vPortFree+0xb0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4413      	add	r3, r2
 800559a:	4a06      	ldr	r2, [pc, #24]	; (80055b4 <vPortFree+0xb0>)
 800559c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800559e:	6938      	ldr	r0, [r7, #16]
 80055a0:	f000 f86c 	bl	800567c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055a4:	f7fe fc24 	bl	8003df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055a8:	bf00      	nop
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20001a00 	.word	0x20001a00
 80055b4:	200019f8 	.word	0x200019f8

080055b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055c4:	4b27      	ldr	r3, [pc, #156]	; (8005664 <prvHeapInit+0xac>)
 80055c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3307      	adds	r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	4a1f      	ldr	r2, [pc, #124]	; (8005664 <prvHeapInit+0xac>)
 80055e8:	4413      	add	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <prvHeapInit+0xb0>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055f6:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <prvHeapInit+0xb0>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4413      	add	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005604:	2208      	movs	r2, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a15      	ldr	r2, [pc, #84]	; (800566c <prvHeapInit+0xb4>)
 8005618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <prvHeapInit+0xb4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <prvHeapInit+0xb4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	1ad2      	subs	r2, r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <prvHeapInit+0xb4>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <prvHeapInit+0xb8>)
 8005646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a09      	ldr	r2, [pc, #36]	; (8005674 <prvHeapInit+0xbc>)
 800564e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <prvHeapInit+0xc0>)
 8005652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000dec 	.word	0x20000dec
 8005668:	200019ec 	.word	0x200019ec
 800566c:	200019f4 	.word	0x200019f4
 8005670:	200019fc 	.word	0x200019fc
 8005674:	200019f8 	.word	0x200019f8
 8005678:	20001a00 	.word	0x20001a00

0800567c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <prvInsertBlockIntoFreeList+0xa8>)
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e002      	b.n	8005690 <prvInsertBlockIntoFreeList+0x14>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d8f7      	bhi.n	800568a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4413      	add	r3, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d108      	bne.n	80056be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	441a      	add	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d118      	bne.n	8005704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <prvInsertBlockIntoFreeList+0xac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d00d      	beq.n	80056fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e008      	b.n	800570c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <prvInsertBlockIntoFreeList+0xac>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e003      	b.n	800570c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d002      	beq.n	800571a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	200019ec 	.word	0x200019ec
 8005728:	200019f4 	.word	0x200019f4

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	2600      	movs	r6, #0
 8005730:	4d0c      	ldr	r5, [pc, #48]	; (8005764 <__libc_init_array+0x38>)
 8005732:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	f000 f830 	bl	80057a0 <_init>
 8005740:	2600      	movs	r6, #0
 8005742:	4d0a      	ldr	r5, [pc, #40]	; (800576c <__libc_init_array+0x40>)
 8005744:	4c0a      	ldr	r4, [pc, #40]	; (8005770 <__libc_init_array+0x44>)
 8005746:	1b64      	subs	r4, r4, r5
 8005748:	10a4      	asrs	r4, r4, #2
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08005934 	.word	0x08005934
 8005768:	08005934 	.word	0x08005934
 800576c:	08005934 	.word	0x08005934
 8005770:	08005938 	.word	0x08005938

08005774 <memcpy>:
 8005774:	440a      	add	r2, r1
 8005776:	4291      	cmp	r1, r2
 8005778:	f100 33ff 	add.w	r3, r0, #4294967295
 800577c:	d100      	bne.n	8005780 <memcpy+0xc>
 800577e:	4770      	bx	lr
 8005780:	b510      	push	{r4, lr}
 8005782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005786:	4291      	cmp	r1, r2
 8005788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578c:	d1f9      	bne.n	8005782 <memcpy+0xe>
 800578e:	bd10      	pop	{r4, pc}

08005790 <memset>:
 8005790:	4603      	mov	r3, r0
 8005792:	4402      	add	r2, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	d100      	bne.n	800579a <memset+0xa>
 8005798:	4770      	bx	lr
 800579a:	f803 1b01 	strb.w	r1, [r3], #1
 800579e:	e7f9      	b.n	8005794 <memset+0x4>

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
